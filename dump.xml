<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>stochsd-wiki</sitename>
    <dbname>my_wiki</dbname>
    <base>http://localhost:8080/index.php/Main_Page</base>
    <generator>MediaWiki 1.40.0</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Stochsd-wiki</namespace>
      <namespace key="5" case="first-letter">Stochsd-wiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Main Page</title>
    <ns>0</ns>
    <id>1</id>
    <revision>
      <id>1</id>
      <timestamp>2023-08-20T08:58:02Z</timestamp>
      <contributor>
        <username>MediaWiki default</username>
        <id>2</id>
      </contributor>
      <origin>1</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="755" sha1="22vz5zlxa2zctewimaum2bf1due8hkl" xml:space="preserve">&lt;strong&gt;MediaWiki has been installed.&lt;/strong&gt;

Consult the [https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents User's Guide] for information on using the wiki software.

== Getting started ==
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Configuration_settings Configuration settings list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:FAQ MediaWiki FAQ]
* [https://lists.wikimedia.org/postorius/lists/mediawiki-announce.lists.wikimedia.org/ MediaWiki release mailing list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Localisation#Translation_resources Localise MediaWiki for your language]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Combating_spam Learn how to combat spam on your wiki]</text>
      <sha1>22vz5zlxa2zctewimaum2bf1due8hkl</sha1>
    </revision>
    <revision>
      <id>2</id>
      <parentid>1</parentid>
      <timestamp>2023-08-20T09:04:30Z</timestamp>
      <contributor>
        <ip>172.20.0.1</ip>
      </contributor>
      <origin>2</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="768" sha1="r1n14wr1261zs07u366fhiyezbcz9gy" xml:space="preserve">&lt;strong&gt;MediaWiki has been installed.&lt;/strong&gt;

Consult the [https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents User's Guide] for information on using the wiki software.

[[StochSD]]

== Getting started ==
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Configuration_settings Configuration settings list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:FAQ MediaWiki FAQ]
* [https://lists.wikimedia.org/postorius/lists/mediawiki-announce.lists.wikimedia.org/ MediaWiki release mailing list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Localisation#Translation_resources Localise MediaWiki for your language]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Combating_spam Learn how to combat spam on your wiki]</text>
      <sha1>r1n14wr1261zs07u366fhiyezbcz9gy</sha1>
    </revision>
    <revision>
      <id>74</id>
      <parentid>2</parentid>
      <timestamp>2023-08-22T14:02:10Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>74</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="798" sha1="1en4vsflpttgw9jv2egfr0msz43dpp2" xml:space="preserve">&lt;strong&gt;MediaWiki has been installed.&lt;/strong&gt;

Consult the [https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents User's Guide] for information on using the wiki software.

[[StochSD]]

Old article

[[StochSD Old]]

== Getting started ==
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Configuration_settings Configuration settings list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:FAQ MediaWiki FAQ]
* [https://lists.wikimedia.org/postorius/lists/mediawiki-announce.lists.wikimedia.org/ MediaWiki release mailing list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Localisation#Translation_resources Localise MediaWiki for your language]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Combating_spam Learn how to combat spam on your wiki]</text>
      <sha1>1en4vsflpttgw9jv2egfr0msz43dpp2</sha1>
    </revision>
    <revision>
      <id>128</id>
      <parentid>74</parentid>
      <timestamp>2023-08-23T20:55:55Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>128</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="895" sha1="3q92osnysukyjrs2xt3hv5ilzmutqry" xml:space="preserve">&lt;strong&gt;MediaWiki has been installed.&lt;/strong&gt;

Consult the [https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents User's Guide] for information on using the wiki software.

[[StochSD]] - huvudartikeln vi jobbar på

[[StochSD Old]] - den gamla artikeln

[[Erik|Eriks exprimentsida]] - där Erik testar wikikoder

== Getting started ==
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Configuration_settings Configuration settings list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:FAQ MediaWiki FAQ]
* [https://lists.wikimedia.org/postorius/lists/mediawiki-announce.lists.wikimedia.org/ MediaWiki release mailing list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Localisation#Translation_resources Localise MediaWiki for your language]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Combating_spam Learn how to combat spam on your wiki]</text>
      <sha1>3q92osnysukyjrs2xt3hv5ilzmutqry</sha1>
    </revision>
  </page>
  <page>
    <title>StochSD</title>
    <ns>0</ns>
    <id>2</id>
    <revision>
      <id>3</id>
      <timestamp>2023-08-20T09:04:34Z</timestamp>
      <contributor>
        <ip>172.20.0.1</ip>
      </contributor>
      <comment>Created page with "Found here: https://en.wikipedia.org/wiki/User:Johhio/stochsd  We try to write about stochsd here  {{Infobox software | name                 = StochSD | developer            = Leif, Erik and Magnus Gustafsson | latest release version = {{Start date and age|2022|01|02}} | released             = {{Start date and age|2017|06|16}} | programming language = [[Javascript]] | operating system    = [[Windows]], [[macOS]], [[Linux]] | genre                = System dynamics|Sytem..."</comment>
      <origin>3</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5538" sha1="kqdxdl7mci6xvqsziimryo3d96fxqin" xml:space="preserve">Found here:
https://en.wikipedia.org/wiki/User:Johhio/stochsd

We try to write about stochsd here

{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}

StochSD[1](2]&lt;ref&gt;{{Cite web|url=https://archlinux.org/packages/?q=libasl|title=Arch Linux - Package Search|website=archlinux.org}}&lt;/ref&gt; (Stochastic System Dynamics) is a free, open-source [[Continuous_simulation|Continuous System Simulation]] (CSS) package intended for small and medium-sized models in education, self-studies and research. Technically, StochSD is based on the Insight Maker[4] Engine with its DE-solver, function library, error checker, macro facility, etc., while the design, graphical user’s interface, construction elements, result presentation, file handling, link checking, etc. are different. Also, tools for sensitivity analysis, optimisation and statistical analysis are included. In particular, StochSD includes features for stochastic modelling, post-analysis of multiple simulations, and presentation of the results in statistical form. 

The designed and developed of StochSD was done during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

StochSD was designed to fulfil the two purposes: 
To provide an open-source CSS language based on the System Dynamics[8] [9] [10] philosophy, where a system is described in terms of stocks (compartments) and flows, and where, pedagogic aspects, ease of use and understanding are prioritised.

To enable Full Potential[11] CSS modelling and simulation, which means that a micro ([[Discrete Event Simulation]] or [[Agent-based_model|Agent-Based Simulation]]) model and a macro (CSS) model of a well-defined system under study will produce fully consistent (i.e., contradiction-free) results. 


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed by professor Leif Gustafsson during his 40 years of experience in research and teaching modelling and simulation on all levels at Swedish universities.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that provides the rules so that the results from macro-modelling become consistent with those from micro-modelling[1] [14] [15] [16]. 
Here, in addition to modelling and simulating continuous flows between stocks represented by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But in contrast to including individual entities into a CSS model, StochSD preserves the lumped macro approach for discrete entities by transferring integer number of entities (e.g., arrivals, accidents, deaths) during a time-step. However, such transitions may happen irregularly over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD contains powerful random functions to model uncertainties of different kinds, as well as devices to collect statistics during a simulation and from multiple replications of the same stochastic model. In particular, this approach also enables the construction of queuing models[17] and combined models[18] in a straightforward way.
The Full Potential concept also includes rules about how a stage has to be expanded to a structure of stocks and flows in order to produce a proper sojourn time distribution (if not exponential), how attributes are to be handled, and where and how different types of uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should be implemented.[11]. These rules can be applied in any CSS language.

==A StochSD model example==
asdadsljkad

&lt;ref&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}&lt;/ref&gt;

&lt;ref name="Repenning:2001kx"&gt;{{cite journal |last=Repenning |first=Nelson P. |year=2001 |title= Understanding fire fighting in new product development |journal= The Journal of Product Innovation Management |volume= 18 |issue=5|pages= 285–300|doi= 10.1016/S0737-6782(01)00099-6|url= https://dspace.mit.edu/bitstream/1721.1/3961/2/Tilting_v40-web.pdf |hdl=1721.1/3961 |hdl-access= free }}&lt;/ref&gt;

[1] Gustafsson, L., Gustafsson, E. and Gustafsson, M. (2022) StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation, 10, 219-253.
https://doi.org/10.4236/ojmsi.2022.102012



Back to [[User:johhio/sandbox|sandbox keke]].
New York also has [[User:johhio/sanxbox|public transportation]].

== References ==
{{Reflist}}</text>
      <sha1>kqdxdl7mci6xvqsziimryo3d96fxqin</sha1>
    </revision>
    <revision>
      <id>4</id>
      <parentid>3</parentid>
      <timestamp>2023-08-20T10:49:23Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <origin>4</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5539" sha1="e9v30q6csnh7ky0skjfpb834n277fg1" xml:space="preserve">Found here:
https://en.wikipedia.org/wiki/User:Johhio/stochsd

We try to write about stochsd here

{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}

StochSD[1](2]&lt;ref&gt;{{Cite web|url=https://archlinux.org/packages/?q=libasl|title=Arch Linux - Package Search|website=archlinux.org}}&lt;/ref&gt; (Stochastic System Dynamics) is a free, open-source [[Continuous_simulation|Continuous System Simulation]] (CSS) package intended for small and medium-sized models in education, self-studies and research. Technically, StochSD is based on the Insight Maker[4] Engine with its DE-solver, function library, error checker, macro facility, etc., while the design, graphical user’s interface, construction elements, result presentation, file handling, link checking, etc. are different. Also, tools for sensitivity analysis, optimisation and statistical analysis are included. In particular, StochSD includes features for stochastic modelling, post-analysis of multiple simulations, and presentation of the results in statistical form. 

The designed and developed of StochSD was done during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

StochSD was designed to fulfil the two purposes: 
To provide an open-source CSS language based on the System Dynamics[8] [9] [10] philosophy, where a system is described in terms of stocks (compartments) and flows, and where, pedagogic aspects, ease of use and understanding are prioritised.

To enable Full Potential[11] CSS modelling and simulation, which means that a micro ([[Discrete Event Simulation]] or [[Agent-based_model|Agent-Based Simulation]]) model and a macro (CSS) model of a well-defined system under study will produce fully consistent (i.e., contradiction-free) results. 


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed by professor Leif Gustafsson during his 40 years of experience in research and teaching modelling and simulation on all levels at Swedish universities.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that provides the rules so that the results from macro-modelling become consistent with those from micro-modelling[1] [14] [15] [16]. 
Here, in addition to modelling and simulating continuous flows between stocks represented by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But in contrast to including individual entities into a CSS model, StochSD preserves the lumped macro approach for discrete entities by transferring integer number of entities (e.g., arrivals, accidents, deaths) during a time-step. However, such transitions may happen irregularly over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD contains powerful random functions to model uncertainties of different kinds, as well as devices to collect statistics during a simulation and from multiple replications of the same stochastic model. In particular, this approach also enables the construction of queuing models[17] and combined models[18] in a straightforward way.
The Full Potential concept also includes rules about how a stage has to be expanded to a structure of stocks and flows in order to produce a proper sojourn time distribution (if not exponential), how attributes are to be handled, and where and how different types of uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should be implemented.[11]. These rules can be applied in any CSS language.

==A StochSD model example==
asdadsljkad

&lt;ref&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt;

&lt;ref name="Repenning:2001kx"&gt;{{cite journal |last=Repenning |first=Nelson P. |year=2001 |title= Understanding fire fighting in new product development |journal= The Journal of Product Innovation Management |volume= 18 |issue=5|pages= 285–300|doi= 10.1016/S0737-6782(01)00099-6|url= https://dspace.mit.edu/bitstream/1721.1/3961/2/Tilting_v40-web.pdf |hdl=1721.1/3961 |hdl-access= free }}&lt;/ref&gt;

[1] Gustafsson, L., Gustafsson, E. and Gustafsson, M. (2022) StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation, 10, 219-253.
https://doi.org/10.4236/ojmsi.2022.102012



Back to [[User:johhio/sandbox|sandbox keke]].
New York also has [[User:johhio/sanxbox|public transportation]].

== References ==
{{Reflist}}</text>
      <sha1>e9v30q6csnh7ky0skjfpb834n277fg1</sha1>
    </revision>
    <revision>
      <id>41</id>
      <parentid>4</parentid>
      <timestamp>2023-08-21T14:53:32Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>41</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5440" sha1="reinqhum1wgj8mzj8e8yl6eb2cyypui" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}

StochSD[1](2]&lt;ref&gt;{{Cite web|url=https://archlinux.org/packages/?q=libasl|title=Arch Linux - Package Search|website=archlinux.org}}&lt;/ref&gt; (Stochastic System Dynamics) is a free, open-source [[Continuous_simulation|Continuous System Simulation]] (CSS) package intended for small and medium-sized models in education, self-studies and research. Technically, StochSD is based on the Insight Maker[4] Engine with its DE-solver, function library, error checker, macro facility, etc., while the design, graphical user’s interface, construction elements, result presentation, file handling, link checking, etc. are different. Also, tools for sensitivity analysis, optimisation and statistical analysis are included. In particular, StochSD includes features for stochastic modelling, post-analysis of multiple simulations, and presentation of the results in statistical form. 

The designed and developed of StochSD was done during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

StochSD was designed to fulfil the two purposes: 
To provide an open-source CSS language based on the System Dynamics[8] [9] [10] philosophy, where a system is described in terms of stocks (compartments) and flows, and where, pedagogic aspects, ease of use and understanding are prioritised.

To enable Full Potential[11] CSS modelling and simulation, which means that a micro ([[Discrete Event Simulation]] or [[Agent-based_model|Agent-Based Simulation]]) model and a macro (CSS) model of a well-defined system under study will produce fully consistent (i.e., contradiction-free) results. 


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed by professor Leif Gustafsson during his 40 years of experience in research and teaching modelling and simulation on all levels at Swedish universities.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that provides the rules so that the results from macro-modelling become consistent with those from micro-modelling[1] [14] [15] [16]. 
Here, in addition to modelling and simulating continuous flows between stocks represented by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But in contrast to including individual entities into a CSS model, StochSD preserves the lumped macro approach for discrete entities by transferring integer number of entities (e.g., arrivals, accidents, deaths) during a time-step. However, such transitions may happen irregularly over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD contains powerful random functions to model uncertainties of different kinds, as well as devices to collect statistics during a simulation and from multiple replications of the same stochastic model. In particular, this approach also enables the construction of queuing models[17] and combined models[18] in a straightforward way.
The Full Potential concept also includes rules about how a stage has to be expanded to a structure of stocks and flows in order to produce a proper sojourn time distribution (if not exponential), how attributes are to be handled, and where and how different types of uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should be implemented.[11]. These rules can be applied in any CSS language.

==A StochSD model example==
asdadsljkad

&lt;ref&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt;

&lt;ref name="Repenning:2001kx"&gt;{{cite journal |last=Repenning |first=Nelson P. |year=2001 |title= Understanding fire fighting in new product development |journal= The Journal of Product Innovation Management |volume= 18 |issue=5|pages= 285–300|doi= 10.1016/S0737-6782(01)00099-6|url= https://dspace.mit.edu/bitstream/1721.1/3961/2/Tilting_v40-web.pdf |hdl=1721.1/3961 |hdl-access= free }}&lt;/ref&gt;

[1] Gustafsson, L., Gustafsson, E. and Gustafsson, M. (2022) StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation, 10, 219-253.
https://doi.org/10.4236/ojmsi.2022.102012



Back to [[User:johhio/sandbox|sandbox keke]].
New York also has [[User:johhio/sanxbox|public transportation]].

== References ==
{{Reflist}}</text>
      <sha1>reinqhum1wgj8mzj8e8yl6eb2cyypui</sha1>
    </revision>
    <revision>
      <id>48</id>
      <parentid>41</parentid>
      <timestamp>2023-08-21T15:01:04Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <origin>48</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5326" sha1="sxen3mt2yfjfdfb5z7w9fk90jthni45" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}

StochSD[1](2]&lt;ref&gt;{{Cite web|url=https://archlinux.org/packages/?q=libasl|title=Arch Linux - Package Search|website=archlinux.org}}&lt;/ref&gt; (Stochastic System Dynamics) is a free, open-source [[Continuous_simulation|Continuous System Simulation]] (CSS) package intended for small and medium-sized models in education, self-studies and research. Technically, StochSD is based on the Insight Maker[4] Engine with its DE-solver, function library, error checker, macro facility, etc., while the design, graphical user’s interface, construction elements, result presentation, file handling, link checking, etc. are different. Also, tools for sensitivity analysis, optimisation and statistical analysis are included. In particular, StochSD includes features for stochastic modelling, post-analysis of multiple simulations, and presentation of the results in statistical form. 

The designed and developed of StochSD was done during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

StochSD was designed to fulfil the two purposes: 
To provide an open-source CSS language based on the System Dynamics[8] [9] [10] philosophy, where a system is described in terms of stocks (compartments) and flows, and where, pedagogic aspects, ease of use and understanding are prioritised.

To enable Full Potential[11] CSS modelling and simulation, which means that a micro ([[Discrete Event Simulation]] or [[Agent-based_model|Agent-Based Simulation]]) model and a macro (CSS) model of a well-defined system under study will produce fully consistent (i.e., contradiction-free) results. 


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed by professor Leif Gustafsson during his 40 years of experience in research and teaching modelling and simulation on all levels at Swedish universities.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that provides the rules so that the results from macro-modelling become consistent with those from micro-modelling[1] [14] [15] [16]. 
Here, in addition to modelling and simulating continuous flows between stocks represented by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But in contrast to including individual entities into a CSS model, StochSD preserves the lumped macro approach for discrete entities by transferring integer number of entities (e.g., arrivals, accidents, deaths) during a time-step. However, such transitions may happen irregularly over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD contains powerful random functions to model uncertainties of different kinds, as well as devices to collect statistics during a simulation and from multiple replications of the same stochastic model. In particular, this approach also enables the construction of queuing models[17] and combined models[18] in a straightforward way.
The Full Potential concept also includes rules about how a stage has to be expanded to a structure of stocks and flows in order to produce a proper sojourn time distribution (if not exponential), how attributes are to be handled, and where and how different types of uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should be implemented.[11]. These rules can be applied in any CSS language.

==A StochSD model example==
asdadsljkad

&lt;ref&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt;

&lt;ref name="Repenning:2001kx"&gt;{{cite journal |last=Repenning |first=Nelson P. |year=2001 |title= Understanding fire fighting in new product development |journal= The Journal of Product Innovation Management |volume= 18 |issue=5|pages= 285–300|doi= 10.1016/S0737-6782(01)00099-6|url= https://dspace.mit.edu/bitstream/1721.1/3961/2/Tilting_v40-web.pdf |hdl=1721.1/3961 |hdl-access= free }}&lt;/ref&gt;

[1] Gustafsson, L., Gustafsson, E. and Gustafsson, M. (2022) StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation, 10, 219-253.
https://doi.org/10.4236/ojmsi.2022.102012

== References ==
{{Reflist}}</text>
      <sha1>sxen3mt2yfjfdfb5z7w9fk90jthni45</sha1>
    </revision>
    <revision>
      <id>63</id>
      <parentid>48</parentid>
      <timestamp>2023-08-22T13:22:15Z</timestamp>
      <contributor>
        <ip>78.77.203.90</ip>
      </contributor>
      <origin>63</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1517" sha1="e1dc63092tkmzltqhpwatxurgs4sqvb" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source Continuous System Simulation (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its DE-solver, function library, error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.
The design and development of StochSD were done
during 2017-2022 with support from Uppsala
University, Karolinska Institute, and the Swedish
University of Agricultural Sciences.</text>
      <sha1>e1dc63092tkmzltqhpwatxurgs4sqvb</sha1>
    </revision>
    <revision>
      <id>64</id>
      <parentid>63</parentid>
      <timestamp>2023-08-22T13:23:01Z</timestamp>
      <contributor>
        <ip>78.77.203.90</ip>
      </contributor>
      <origin>64</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1543" sha1="pj7mcfrnmdxprwgs7ibqo2a4vsglxxf" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its DE-solver, function library, error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.
The design and development of StochSD were done
during 2017-2022 with support from Uppsala
University, Karolinska Institute, and the Swedish
University of Agricultural Sciences.</text>
      <sha1>pj7mcfrnmdxprwgs7ibqo2a4vsglxxf</sha1>
    </revision>
    <revision>
      <id>65</id>
      <parentid>64</parentid>
      <timestamp>2023-08-22T13:23:58Z</timestamp>
      <contributor>
        <ip>78.77.203.90</ip>
      </contributor>
      <origin>65</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1555" sha1="f8hx2vdyez4n0dectyqnic1bwgt8tdp" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its DE-solver, function library, error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.
The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].</text>
      <sha1>f8hx2vdyez4n0dectyqnic1bwgt8tdp</sha1>
    </revision>
    <revision>
      <id>66</id>
      <parentid>65</parentid>
      <timestamp>2023-08-22T13:24:20Z</timestamp>
      <contributor>
        <ip>78.77.203.90</ip>
      </contributor>
      <origin>66</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1556" sha1="4ec7zbmxowpj30jcxbc6idia2xom2p3" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its DE-solver, function library, error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].</text>
      <sha1>4ec7zbmxowpj30jcxbc6idia2xom2p3</sha1>
    </revision>
    <revision>
      <id>67</id>
      <parentid>66</parentid>
      <timestamp>2023-08-22T13:25:54Z</timestamp>
      <contributor>
        <ip>78.77.203.90</ip>
      </contributor>
      <origin>67</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2068" sha1="rmvk2vz28hxtccr2hez8pw1jinmh7r6" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its DE-solver, function library, error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed by professor Leif Gustafsson during his 40 years of experience in research and teaching modelling and simulation on all levels at Swedish universities.</text>
      <sha1>rmvk2vz28hxtccr2hez8pw1jinmh7r6</sha1>
    </revision>
    <revision>
      <id>68</id>
      <parentid>67</parentid>
      <timestamp>2023-08-22T13:27:47Z</timestamp>
      <contributor>
        <ip>78.77.203.90</ip>
      </contributor>
      <origin>68</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2031" sha1="jqpl0a1kn88a29lav2vva71fqwjm89p" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its DE-solver, function library, error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.</text>
      <sha1>jqpl0a1kn88a29lav2vva71fqwjm89p</sha1>
    </revision>
    <revision>
      <id>69</id>
      <parentid>68</parentid>
      <timestamp>2023-08-22T13:29:01Z</timestamp>
      <contributor>
        <ip>78.77.203.90</ip>
      </contributor>
      <origin>69</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2089" sha1="0ay2czpvd0bfw8drsadusjv7lz52hzf" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[DE-solver|Numerical_methods_for_ordinary_differential_equations]], function library, error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.</text>
      <sha1>0ay2czpvd0bfw8drsadusjv7lz52hzf</sha1>
    </revision>
    <revision>
      <id>70</id>
      <parentid>69</parentid>
      <timestamp>2023-08-22T13:29:22Z</timestamp>
      <contributor>
        <ip>78.77.203.90</ip>
      </contributor>
      <origin>70</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2089" sha1="akh99f2bzz2t7vzgi2fbb0jkc1hvhws" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], function library, error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.</text>
      <sha1>akh99f2bzz2t7vzgi2fbb0jkc1hvhws</sha1>
    </revision>
    <revision>
      <id>71</id>
      <parentid>70</parentid>
      <timestamp>2023-08-22T13:33:48Z</timestamp>
      <contributor>
        <ip>78.77.203.90</ip>
      </contributor>
      <origin>71</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2113" sha1="jt5q3ofkkirpq8xes4axcbjcmvmjsuh" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[function library|Library_(computing)]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.</text>
      <sha1>jt5q3ofkkirpq8xes4axcbjcmvmjsuh</sha1>
    </revision>
    <revision>
      <id>72</id>
      <parentid>71</parentid>
      <timestamp>2023-08-22T13:58:21Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>72</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2113" sha1="3lh7be2lostq68wbsmbc32fbgchsuu3" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.</text>
      <sha1>3lh7be2lostq68wbsmbc32fbgchsuu3</sha1>
    </revision>
    <revision>
      <id>115</id>
      <parentid>72</parentid>
      <timestamp>2023-08-22T21:05:05Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>115</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2150" sha1="fxezj1xamawgfmb6xtz09rh2exu0cxv" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.</text>
      <sha1>fxezj1xamawgfmb6xtz09rh2exu0cxv</sha1>
    </revision>
    <revision>
      <id>116</id>
      <parentid>115</parentid>
      <timestamp>2023-08-22T21:06:44Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>116</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1897" sha1="13ncdgbfdb13rop9a6j0pk9llhlzd7t" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

==Education and self-studies==
The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala
University]], [[Karolinska Institute]], and the [[Swedish
University of Agricultural Sciences]].</text>
      <sha1>13ncdgbfdb13rop9a6j0pk9llhlzd7t</sha1>
    </revision>
    <revision>
      <id>117</id>
      <parentid>116</parentid>
      <timestamp>2023-08-22T21:08:37Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>117</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1675" sha1="23x8jnj9x6pzi2ekrgo6n2xx1v3lgwi" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].</text>
      <sha1>23x8jnj9x6pzi2ekrgo6n2xx1v3lgwi</sha1>
    </revision>
    <revision>
      <id>118</id>
      <parentid>117</parentid>
      <timestamp>2023-08-22T21:26:36Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>118</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1652" sha1="190h0zz0tdcyrej1yw6mh7z0duccxtz" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].</text>
      <sha1>190h0zz0tdcyrej1yw6mh7z0duccxtz</sha1>
    </revision>
    <revision>
      <id>119</id>
      <parentid>118</parentid>
      <timestamp>2023-08-23T16:54:26Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>119</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2167" sha1="iuvg0aspsj6wbkqd2ycxchwlz2ryjvg" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.</text>
      <sha1>iuvg0aspsj6wbkqd2ycxchwlz2ryjvg</sha1>
    </revision>
    <revision>
      <id>120</id>
      <parentid>119</parentid>
      <timestamp>2023-08-23T16:54:47Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>120</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2701" sha1="9c7sh2lv20abwn93ln4hh768b4jkfbr" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
- To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
- To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.</text>
      <sha1>9c7sh2lv20abwn93ln4hh768b4jkfbr</sha1>
    </revision>
    <revision>
      <id>121</id>
      <parentid>120</parentid>
      <timestamp>2023-08-23T16:55:34Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>121</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2701" sha1="d4yhra7oz3vq0gubl6x3hfdep6lcs69" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.</text>
      <sha1>d4yhra7oz3vq0gubl6x3hfdep6lcs69</sha1>
    </revision>
    <revision>
      <id>122</id>
      <parentid>121</parentid>
      <timestamp>2023-08-23T16:56:03Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>122</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4307" sha1="ogpv59czrtdhdc19r36046kz9ldjrjn" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .</text>
      <sha1>ogpv59czrtdhdc19r36046kz9ldjrjn</sha1>
    </revision>
    <revision>
      <id>123</id>
      <parentid>122</parentid>
      <timestamp>2023-08-23T16:56:19Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>123</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4505" sha1="m5xcn583els30fzmhw6iuasxnu4obmn" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.</text>
      <sha1>m5xcn583els30fzmhw6iuasxnu4obmn</sha1>
    </revision>
    <revision>
      <id>124</id>
      <parentid>123</parentid>
      <timestamp>2023-08-23T20:53:47Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>124</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5144" sha1="8i95afc3mcyl9zgbozia78ceaxkj45o" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.</text>
      <sha1>8i95afc3mcyl9zgbozia78ceaxkj45o</sha1>
    </revision>
    <revision>
      <id>125</id>
      <parentid>124</parentid>
      <timestamp>2023-08-23T20:54:19Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>125</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5704" sha1="itpv5rd4u558xzzaz80owxspx972x1w" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.

-image here-
Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)

Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.</text>
      <sha1>itpv5rd4u558xzzaz80owxspx972x1w</sha1>
    </revision>
    <revision>
      <id>129</id>
      <parentid>125</parentid>
      <timestamp>2023-08-23T20:56:27Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>129</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5891" sha1="8js6g6wfxmexingyj3bh3e5t41g9bhx" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.

-image here-
Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)

Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>8js6g6wfxmexingyj3bh3e5t41g9bhx</sha1>
    </revision>
    <revision>
      <id>135</id>
      <parentid>129</parentid>
      <timestamp>2023-08-23T21:58:28Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>135</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5921" sha1="nv8g8rucajh12hi09i0trux3txyagqo" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.

[[image:Combined-Pray-Predator-Model.png]]
Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)

Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>nv8g8rucajh12hi09i0trux3txyagqo</sha1>
    </revision>
    <revision>
      <id>136</id>
      <parentid>135</parentid>
      <timestamp>2023-08-23T22:02:38Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>136</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5934" sha1="78i700ew3qg3hcxiwj8d4wnynubo0ku" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.

[[image:Combined-Pray-Predator-Model.png|x200px|hello]]
Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)

Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>78i700ew3qg3hcxiwj8d4wnynubo0ku</sha1>
    </revision>
    <revision>
      <id>137</id>
      <parentid>136</parentid>
      <timestamp>2023-08-23T22:04:30Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>137</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5933" sha1="2r7kktaegbkb1q1ie0t789rulnspf0t" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.

[[image:Combined-Pray-Predator-Model.png|frame|hello]]
Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)

Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>2r7kktaegbkb1q1ie0t789rulnspf0t</sha1>
    </revision>
    <revision>
      <id>138</id>
      <parentid>137</parentid>
      <timestamp>2023-08-23T22:05:03Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>138</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5933" sha1="oac33jrbi3zy1uj9en3ybkr53bawmff" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.

[[image:Combined-Pray-Predator-Model.png|thumb|hello]]
Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)

Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>oac33jrbi3zy1uj9en3ybkr53bawmff</sha1>
    </revision>
    <revision>
      <id>139</id>
      <parentid>138</parentid>
      <timestamp>2023-08-23T22:06:11Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>139</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5933" sha1="2r7kktaegbkb1q1ie0t789rulnspf0t" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.

[[image:Combined-Pray-Predator-Model.png|frame|hello]]
Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)

Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>2r7kktaegbkb1q1ie0t789rulnspf0t</sha1>
    </revision>
    <revision>
      <id>140</id>
      <parentid>139</parentid>
      <timestamp>2023-08-23T22:07:40Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>140</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5939" sha1="lfj7ysxfuzzlfv3g4rfo0pbkj68sv0o" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.

[[image:Combined-Pray-Predator-Model.png|frame|200px|hello]]
Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)

Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>lfj7ysxfuzzlfv3g4rfo0pbkj68sv0o</sha1>
    </revision>
    <revision>
      <id>141</id>
      <parentid>140</parentid>
      <timestamp>2023-08-23T22:08:01Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>141</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5940" sha1="bjc4ix09niemfes31o4d5i1l2fozcp3" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.

[[image:Combined-Pray-Predator-Model.png|frame|x200px|hello]]
Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)

Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>bjc4ix09niemfes31o4d5i1l2fozcp3</sha1>
    </revision>
    <revision>
      <id>142</id>
      <parentid>141</parentid>
      <timestamp>2023-08-23T22:08:13Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>142</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5935" sha1="hhlwz6dsl6n0h9c4tl7ltvblk8pi77x" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.

[[image:Combined-Pray-Predator-Model.png|frame|x200px|Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)]]


Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>hhlwz6dsl6n0h9c4tl7ltvblk8pi77x</sha1>
    </revision>
    <revision>
      <id>143</id>
      <parentid>142</parentid>
      <timestamp>2023-08-23T22:08:56Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>143</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5936" sha1="onnpp9279kuzwuv9x990sn3kedxvhlq" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.


[[image:Combined-Pray-Predator-Model.png|frame|x200px|Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)]]


Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>onnpp9279kuzwuv9x990sn3kedxvhlq</sha1>
    </revision>
    <revision>
      <id>144</id>
      <parentid>143</parentid>
      <timestamp>2023-08-23T22:10:05Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>144</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5951" sha1="0u6ofm45wh9gtuy1c630an6hrb1fg8x" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.


[[image:Combined-Pray-Predator-Model.png|frame|x200px|Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)]]
&lt;br clear=all&gt;


Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>0u6ofm45wh9gtuy1c630an6hrb1fg8x</sha1>
    </revision>
    <revision>
      <id>145</id>
      <parentid>144</parentid>
      <timestamp>2023-08-23T22:10:50Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>145</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5956" sha1="dybhbuhy077vwnta5lkpb0uaptt3zdr" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.


[[image:Combined-Pray-Predator-Model.png|frame|x200px|left|Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)]]
&lt;br clear=all&gt;


Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>dybhbuhy077vwnta5lkpb0uaptt3zdr</sha1>
    </revision>
    <revision>
      <id>146</id>
      <parentid>145</parentid>
      <timestamp>2023-08-23T22:11:25Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>146</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5954" sha1="iiicntvjzxclm3mc45e5t6wvhrtkd10" xml:space="preserve">{{Infobox software
| logo                 = Stochsd.png
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


StochSD was designed to fulfil the two purposes:
* To provide an open-source CSS language based on the System Dynamics [4] [5] [6]
philosophy, where a system is described in terms of stocks (compartments) and
flows, and where, pedagogic aspects, ease of use and understanding are prioritised.
* To enable Full Potential [7] CSS modelling and simulation. This means that a macro
(CSS) model in StochSD can produce results that are fully consistent (i.e.,
contradiction-free) with those from a micro (Discrete Event Simulation (DES)


==Education and self-studies==
To support the use in education and self-studies, the StochSD package as well as material to
enable courses in classical CSS and Full Potential CSS modelling and simulation are available
for free at the StochSD Website. This course material contains lectures, laboratory exercises,
instructive models, and StochSD manuals, which mainly are based on material developed at
Uppsala University and the Swedish University of Agricultural Sciences for courses in
modelling and simulation.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that
provides the rules so that the results from macro-modelling can become consistent with
those from micro-modelling [1] [7] [8] [9] [10] .
Here, in addition to modelling and simulating continuous flows between stocks represented
by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But
in contrast to including individual entities into a CSS model, StochSD preserves the lumped
macro approach for discrete entities by transferring integer number of entities (e.g., arrivals,
accidents, deaths) during a time-step. However, such transitions may happen irregularly
over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD
contains powerful random functions to model uncertainties of different kinds, as well as
devices to collect statistics during a simulation and from multiple replications of the same
stochastic model. In particular, StochSD enables the construction and simulation in a
straightforward way of e.g. queuing models [11] as well as macro models consistent with
combined discrete and continuous models.
The Full Potential concept also includes rules about how a stage has to be expanded to a
structure of stocks and flows in order to produce a proper sojourn time distribution (if not
exponential), how attributes are to be handled, and where and how different types of
uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should
be implemented [7] .

==A StochSD model example==
A combined prey-predator model [12] [13] with continuous prey (e.g. X = Grass) and discrete
predators (e.g. Y = Sheep), and a replication of this model are shown below.

[[image:Combined-Pray-Predator-Model.png|frame|x200px|left|Figure. The combined prey-predator model with continuous prey and discrete predators,
and a replication of this model. (Note that the colouring of a primitive is preserved in the
time plot.)]]
&lt;br clear=all&gt;

In the replication shown, the discrete predators became extinct at around 235 time units
(e.g., months). The continuous prey then increases logistically to an equilibrium without
further stochastic variations.
Comparing a continuous prey-predator model with the combined model reveals that the
continuous model, starting at the equilibrium state (as in this example), will only produce
two straight horizontal lines. Starting the continuous model outside the equilibrium state
will make it approach the equilibrium for both species without lasting variations. Further, a
phenomenon such as extinction cannot occur for a continuous model.

Creating a combined model, within the CSS concept, in StochSD is straightforward. The
alternative of constructing a combined continuous and discrete model, with its mixture of
disparate DES and CSS concepts, synchronisation of two time-handling methods, and
requiring a special combined simulation language is not an attractive option for a macro
study.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>iiicntvjzxclm3mc45e5t6wvhrtkd10</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite journal</title>
    <ns>10</ns>
    <id>3</id>
    <revision>
      <id>5</id>
      <timestamp>2023-08-20T10:49:56Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "Test making a template"</comment>
      <origin>5</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="h4n1uiuz20s6i8cldvcv237eidyhgkj" xml:space="preserve">Test making a template</text>
      <sha1>h4n1uiuz20s6i8cldvcv237eidyhgkj</sha1>
    </revision>
    <revision>
      <id>8</id>
      <parentid>5</parentid>
      <timestamp>2023-08-20T10:56:39Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <origin>8</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="126" sha1="9fcytsszanq7xbwi3p28zsneear9938" xml:space="preserve">&lt;includeonly&gt;{{#invoke:Citation/CS1|citation
|CitationClass=journal
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>9fcytsszanq7xbwi3p28zsneear9938</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Reflist</title>
    <ns>10</ns>
    <id>4</id>
    <revision>
      <id>6</id>
      <timestamp>2023-08-20T10:50:25Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "My Template reflist"</comment>
      <origin>6</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19" sha1="gvdevmxs5s23ki4u23ukqbo8ydlxrag" xml:space="preserve">My Template reflist</text>
      <sha1>gvdevmxs5s23ki4u23ukqbo8ydlxrag</sha1>
    </revision>
    <revision>
      <id>7</id>
      <parentid>6</parentid>
      <timestamp>2023-08-20T10:53:38Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <origin>7</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1059" sha1="geeeydvb5368tzzflcyuzs20a5hlnbz" xml:space="preserve">&lt;templatestyles src="Reflist/styles.css" /&gt;&lt;div class="reflist &lt;!--
--&gt;{{#if:{{{1|}}}{{{colwidth|}}}|reflist-columns references-column-width}} &lt;!--
--&gt;{{#switch:{{{liststyle|{{{group|}}}}}}|upper-alpha|upper-roman|lower-alpha|lower-greek|lower-roman=reflist-{{{liststyle|{{{group}}}}}}}} &lt;!--
--&gt;{{#if:{{{1|}}}|{{#iferror:{{#ifexpr: {{{1|1}}} &gt; 1 }}||{{#switch:{{{1|}}}|1=|2=reflist-columns-2|#default=reflist-columns-3}} }}}}" &lt;!-- end class
--&gt;{{#if: {{{1|}}}&lt;!-- start style --&gt;
    | {{#iferror: {{#ifexpr: {{{1|1}}} &gt; 1 }} |style="column-width: {{{1}}};"}}
    | {{#if: {{{colwidth|}}}|style="column-width: {{{colwidth}}};"}}
    }}&gt;
{{#tag:references|{{{refs|}}}|group={{{group|}}}|responsive={{#if:{{{1|}}}{{{colwidth|}}}|0|1}}}}&lt;/div&gt;{{#invoke:Check for unknown parameters|check|unknown={{main other|[[Category:Pages using reflist with unknown parameters|_VALUE_{{PAGENAME}}]]}}|preview=Page using [[Template:Reflist]] with unknown parameter "_VALUE_"|ignoreblank=y| 1 | colwidth | group | liststyle | refs }}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>geeeydvb5368tzzflcyuzs20a5hlnbz</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Infobox</title>
    <ns>10</ns>
    <id>5</id>
    <revision>
      <id>9</id>
      <timestamp>2023-08-20T11:00:33Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "{{#invoke:Infobox|infobox}}&lt;includeonly&gt;{{template other|{{#ifeq:{{PAGENAME}}|Infobox||{{#ifeq:{{str left|{{SUBPAGENAME}}|7}}|Infobox|[[Category:Infobox templates|{{remove first word|{{SUBPAGENAME}}}}]]}}}}|}}&lt;/includeonly&gt;&lt;noinclude&gt; {{documentation}} &lt;!-- Categories go in the /doc subpage, and interwikis go in Wikidata. --&gt; &lt;/noinclude&gt;"</comment>
      <origin>9</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="340" sha1="f4hgwrnr11ahhwyo266vcd10dpi92pe" xml:space="preserve">{{#invoke:Infobox|infobox}}&lt;includeonly&gt;{{template other|{{#ifeq:{{PAGENAME}}|Infobox||{{#ifeq:{{str left|{{SUBPAGENAME}}|7}}|Infobox|[[Category:Infobox templates|{{remove first word|{{SUBPAGENAME}}}}]]}}}}|}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go in the /doc subpage, and interwikis go in Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>f4hgwrnr11ahhwyo266vcd10dpi92pe</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Infobox software</title>
    <ns>10</ns>
    <id>6</id>
    <revision>
      <id>10</id>
      <timestamp>2023-08-20T11:01:24Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "&lt;includeonly&gt;{{Infobox | bodyclass  = vevent | bodystyle  = {{{bodystyle|}}} | title      = {{{title|{{{name|{{PAGENAMEBASE}}}}}}}} | titleclass = summary | labelstyle = white-space: nowrap;  | imageclass = logo | imagestyle = | image      = {{#invoke:InfoboxImage |InfoboxImage |image={{{logo|}}} |size={{{logo size|{{{logo_size|}}} }}} |sizedefault=frameless |upright=0.55 |alt={{{logo alt|{{{logo_alt|}}} }}} }} | caption    = {{{logo caption|{{{logo_caption|}}} }}} | ima..."</comment>
      <origin>10</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7274" sha1="oo0y9loo5cdvcawo47l3j4s4t9xwxm5" xml:space="preserve">&lt;includeonly&gt;{{Infobox
| bodyclass  = vevent
| bodystyle  = {{{bodystyle|}}}
| title      = {{{title|{{{name|{{PAGENAMEBASE}}}}}}}}
| titleclass = summary
| labelstyle = white-space: nowrap;

| imageclass = logo
| imagestyle =
| image      = {{#invoke:InfoboxImage |InfoboxImage |image={{{logo|}}} |size={{{logo size|{{{logo_size|}}} }}} |sizedefault=frameless |upright=0.55 |alt={{{logo alt|{{{logo_alt|}}} }}} }}
| caption    = {{{logo caption|{{{logo_caption|}}} }}}
| image2     = {{#if:{{{screenshot|}}}
  | {{#if:{{{collapsible|}}}
    | {{Hidden begin|title={{{collapsetext|Screenshot}}}|titlestyle=background:{{{background|gainsboro}}};text-align:center|contentstyle=text-align:center}}
  }}
  {{#invoke:InfoboxImage |InfoboxImage |image={{{screenshot|}}} |size={{{screenshot size|{{{screenshot_size|}}} }}} |sizedefault=frameless |upright=1 |alt={{{screenshot alt|{{{screenshot_alt|}}} }}} }}
}}
| caption2   = {{{caption|}}}{{#if:{{{screenshot|}}}|{{#if:{{{collapsible|}}}|{{hidden end}}}}}}

| label1     = Other names
| data1      = {{{other_names|}}}
| label2     = [[Programmer|Original author(s)]]
| data2      = {{{author|}}}
| label3     = [[Programmer|Developer(s)]]
| data3      = {{{developer|}}}
| label4     = Initial release
| data4      = {{{released|}}}
| rowstyle5  = display: none;&lt;!--
===============================================================================
The data5 field displays a sub-infobox. The HTML cleanup module in charge of
rendering Wikipedia pages converts this sub-infobox into a new set of rows that
lay below the data4 row. Hence, the data4 row becomes an empty redundant row
that the reader would rather not see.

I resisted implementing this at first because hacks are generally fragile. But
I am giving up the resistance as the proper venue has failed to address this.

—User:Codename Lisa
===============================================================================
--&gt;
| data5      = {{#ifeq:{{lc:{{{ver layout|simple}}}}}|stacked
 |{{Infobox software/stacked
  |{{{title|{{{name|{{PAGENAME}}}}}}}}
  |{{{discontinued|no}}}
  |{{{latest release version|{{{latest_release_version|}}}}}}
  |{{{latest release date   |   {{{latest_release_date|}}}}}}
  |{{{latest preview version|{{{latest_preview_version|}}}}}}
  |{{{latest preview date   |   {{{latest_preview_date|}}}}}}
  }}
 |{{Infobox software/simple
  |{{{title|{{{name|{{PAGENAME}}}}}}}}
  |{{{discontinued|no}}}
  |{{{latest release version|{{{latest_release_version|}}}}}}
  |{{{latest release date   |   {{{latest_release_date|}}}}}}
  |{{{latest preview version|{{{latest_preview_version|}}}}}}
  |{{{latest preview date   |   {{{latest_preview_date|}}}}}}
  }}
 }}
| label6     = [[Repository (version control)|Repository]]
| data6      = {{#if:{{{repo|}}}{{#ifeq:{{{qid|}}}|none|-}}
                  |{{{repo|}}}
                  |{{#if: {{#property:P1324|from={{{qid|}}}}}
                      |{{#ifeq: {{wikidata|property|{{{qid|}}}|P1324|best|format=%p}} | none
                          |{{wikidata|property|{{{qid|}}}|P1324|best|format=%p}}{{EditAtWikidata|pid=P1324}}
                          |{{Plainlist|&lt;ul&gt;&lt;li&gt;{{URL|{{wikidata|property|{{{qid|}}}|P1324|best|format=%p}}}}{{EditAtWikidata|pid=P1324|qid={{{qid|}}}}}&lt;/li&gt;&lt;/ul&gt;}}
                       }}
                   }}
               }}
| label7     = Written in
| data7      = {{{programming language|{{{programming_language|}}}}}}
| label8     = [[Middleware]]
| data8      = {{{middleware|}}}
| label10    = [[Software engine|Engine]]{{#if: {{{engines|}}} |s}}
| data10     = {{#if: {{{engines|}}}
                   |{{{engines}}}
                   |{{#if:{{{engine|}}}{{#ifeq:{{{qid|}}}|none|-}}
                     |{{{engine|}}}
                     |{{#if: {{#property:P408|from={{{qid|}}}}}
                         |{{Plainlist|&lt;ul&gt;{{wikidata|properties|{{{qid|}}}|P408|best|format=&lt;li&gt;%p&lt;/li&gt;}}&lt;/ul&gt;}}{{EditAtWikidata|pid=P408}}
                       }}
                   }}
               }}
| label11    = [[Operating system]]
| data11     = {{{operating system|{{{operating_system|}}}}}}
| label12    = [[Computing platform|Platform]]
| data12     = {{{platform|}}}
| label13    = Included with
| data13     = {{{included with|}}}
| label14    = Predecessor
| data14     = {{{replaces|}}}
| label15    = Successor
| data15     = {{{replaced_by|}}}
| label16    = Service name
| data16     = {{{service_name|}}}
| label17    = [[File size|Size]]
| data17     = {{{size|}}}
| label18    = [[Technical standard|Standard]](s)
| data18     = {{{standard|}}}
| label19    = Available in
| data19     = {{#if:{{{language count|}}}|{{{language count}}} languages|{{{language|}}}}}{{{language footnote|}}}
| data20     = {{#if:{{{language count|}}}|{{#if:{{{language|}}}|{{Hidden begin|title=List of languages|titlestyle=background-color: transparent;}}{{{language|}}}{{hidden end}}}}}}
| label21    = [[Software categories#Categorization approaches|Type]]
| data21     = {{{genre|}}}
| label22    = [[Software license|License]]
| data22     = {{{license|}}}
| label23    = [[Software license|Licence]] &lt;!-- Spelled differently; see [[MOS:ENGVAR]] --&gt;
| data23     = {{{licence|}}}
| label25    = Website
| data25     = {{#if:{{{website|}}}{{#ifeq:{{{qid|}}}|none|-}}
            | {{#ifeq:{{{website|}}} | hide | | {{{website|}}} }}
            | {{#if:{{wikidata|property|raw|{{{qid|}}}|P856}}
              | {{#invoke:WikidataIB |url2 |url={{if empty
                |{{#invoke:WikidataIB|getValueByLang|P856|qid={{{qid|}}}|fwd=ALL|osd=no|maxvals=1}}
                |{{Wdib|P856|qid={{{qid|}}}|fwd=ALL|osd=no|maxvals=1}}
                }} }}
              }}
            }}
| label26    = As of
| data26     = {{{AsOf|}}}

}}{{#invoke:Check for unknown parameters | check | showblankpositional=1
| unknown = {{main other|[[Category:Pages using Infobox software with unknown parameters|_VALUE_{{PAGENAME}}]]}}
| preview = Page using [[Template:Infobox software]] with unknown parameter "_VALUE_"|ignoreblank=y
| AsOf | author | background | bodystyle | caption | collapsetext | collapsible | developer | discontinued | engine | engines | genre | included with | language | language count | language footnote | latest preview date | latest preview version | latest release date | latest release version | latest_preview_date | latest_preview_version | latest_release_date | latest_release_version | licence | license | logo | logo alt | logo caption | logo size | logo_alt | logo_caption | logo_size | middleware | name | operating system | operating_system | other_names | platform | programming language | programming_language | released | replaced_by | replaces | repo | screenshot | screenshot alt | screenshot size | screenshot_alt | screenshot_size | service_name | size | standard | title | ver layout | website | qid
}}&lt;!-- check for version errors, mostly from Wikidata:
--&gt;{{main other|{{#iferror: {{{latest release version|{{{latest_release_version|}}}}}} {{{latest release date   |   {{{latest_release_date|}}}}}} {{{latest preview version|{{{latest_preview_version|}}}}}} {{{latest preview date   |   {{{latest_preview_date|}}}}}} |[[Category:Pages using Infobox software with version errors]]|}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>oo0y9loo5cdvcawo47l3j4s4t9xwxm5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Infobox</title>
    <ns>828</ns>
    <id>7</id>
    <revision>
      <id>11</id>
      <timestamp>2023-08-20T12:27:47Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "local p = {} local args = {} local origArgs = {} local root local empty_row_categories = {} local category_in_empty_row_pattern = '%[%[%s*[Cc][Aa][Tt][Ee][Gg][Oo][Rr][Yy]%s*:[^]]*]]' local has_rows = false local lists = { 	plainlist_t = { 		patterns = { 			'^plainlist$', 			'%splainlist$', 			'^plainlist%s', 			'%splainlist%s' 		}, 		found = false, 		styles = 'Plainlist/styles.css' 	}, 	hlist_t = { 		patterns = { 			'^hlist$', 			'%shlist$', 			'^hlist%s', 			'%shlist%s'..."</comment>
      <origin>11</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="20533" sha1="1m9tzydwofr8cj9bzzm2am6moool42y" xml:space="preserve">local p = {}
local args = {}
local origArgs = {}
local root
local empty_row_categories = {}
local category_in_empty_row_pattern = '%[%[%s*[Cc][Aa][Tt][Ee][Gg][Oo][Rr][Yy]%s*:[^]]*]]'
local has_rows = false
local lists = {
	plainlist_t = {
		patterns = {
			'^plainlist$',
			'%splainlist$',
			'^plainlist%s',
			'%splainlist%s'
		},
		found = false,
		styles = 'Plainlist/styles.css'
	},
	hlist_t = {
		patterns = {
			'^hlist$',
			'%shlist$',
			'^hlist%s',
			'%shlist%s'
		},
		found = false,
		styles = 'Hlist/styles.css'
	}
}

local function has_list_class(args_to_check)
	for _, list in pairs(lists) do
		if not list.found then
			for _, arg in pairs(args_to_check) do
				for _, pattern in ipairs(list.patterns) do
					if mw.ustring.find(arg or '', pattern) then
						list.found = true
						break
					end
				end
				if list.found then break end
			end
		end
	end
end

local function fixChildBoxes(sval, tt)
	local function notempty( s ) return s and s:match( '%S' ) end
	
	if notempty(sval) then
		local marker = '&lt;span class=special_infobox_marker&gt;'
		local s = sval
		-- start moving templatestyles and categories inside of table rows
		local slast = ''
		while slast ~= s do
			slast = s
			s = mw.ustring.gsub(s, '(&lt;/[Tt][Rr]%s*&gt;%s*)(%[%[%s*[Cc][Aa][Tt][Ee][Gg][Oo][Rr][Yy]%s*:[^]]*%]%])', '%2%1')
			s = mw.ustring.gsub(s, '(&lt;/[Tt][Rr]%s*&gt;%s*)(\127[^\127]*UNIQ%-%-templatestyles%-%x+%-QINU[^\127]*\127)', '%2%1')
		end
		-- end moving templatestyles and categories inside of table rows
		s = mw.ustring.gsub(s, '(&lt;%s*[Tt][Rr])', marker .. '%1')
		s = mw.ustring.gsub(s, '(&lt;/[Tt][Rr]%s*&gt;)', '%1' .. marker)
		if s:match(marker) then
			s = mw.ustring.gsub(s, marker .. '%s*' .. marker, '')
			s = mw.ustring.gsub(s, '([\r\n]|-[^\r\n]*[\r\n])%s*' .. marker, '%1')
			s = mw.ustring.gsub(s, marker .. '%s*([\r\n]|-)', '%1')
			s = mw.ustring.gsub(s, '(&lt;/[Cc][Aa][Pp][Tt][Ii][Oo][Nn]%s*&gt;%s*)' .. marker, '%1')
			s = mw.ustring.gsub(s, '(&lt;%s*[Tt][Aa][Bb][Ll][Ee][^&lt;&gt;]*&gt;%s*)' .. marker, '%1')
			s = mw.ustring.gsub(s, '^(%{|[^\r\n]*[\r\n]%s*)' .. marker, '%1')
			s = mw.ustring.gsub(s, '([\r\n]%{|[^\r\n]*[\r\n]%s*)' .. marker, '%1')
			s = mw.ustring.gsub(s, marker .. '(%s*&lt;/[Tt][Aa][Bb][Ll][Ee]%s*&gt;)', '%1')
			s = mw.ustring.gsub(s, marker .. '(%s*\n|%})', '%1')
		end
		if s:match(marker) then
			local subcells = mw.text.split(s, marker)
			s = ''
			for k = 1, #subcells do
				if k == 1 then
					s = s .. subcells[k] .. '&lt;/' .. tt .. '&gt;&lt;/tr&gt;'
				elseif k == #subcells then
					local rowstyle = ' style="display:none"'
					if notempty(subcells[k]) then rowstyle = ''	end
					s = s .. '&lt;tr' .. rowstyle ..'&gt;&lt;' .. tt .. ' colspan=2&gt;\n' ..
						subcells[k]
				elseif notempty(subcells[k]) then
					if (k % 2) == 0 then
						s = s .. subcells[k]
					else
						s = s .. '&lt;tr&gt;&lt;' .. tt .. ' colspan=2&gt;\n' ..
							subcells[k] .. '&lt;/' .. tt .. '&gt;&lt;/tr&gt;'
					end
				end
			end
		end
		-- the next two lines add a newline at the end of lists for the PHP parser
		-- [[Special:Diff/849054481]]
		-- remove when [[:phab:T191516]] is fixed or OBE
		s = mw.ustring.gsub(s, '([\r\n][%*#;:][^\r\n]*)$', '%1\n')
		s = mw.ustring.gsub(s, '^([%*#;:][^\r\n]*)$', '%1\n')
		s = mw.ustring.gsub(s, '^([%*#;:])', '\n%1')
		s = mw.ustring.gsub(s, '^(%{%|)', '\n%1')
		return s
	else
		return sval
	end
end

-- Cleans empty tables
local function cleanInfobox()
	root = tostring(root)
	if has_rows == false then
		root = mw.ustring.gsub(root, '&lt;table[^&lt;&gt;]*&gt;%s*&lt;/table&gt;', '')
	end
end

-- Returns the union of the values of two tables, as a sequence.
local function union(t1, t2)

	local vals = {}
	for k, v in pairs(t1) do
		vals[v] = true
	end
	for k, v in pairs(t2) do
		vals[v] = true
	end
	local ret = {}
	for k, v in pairs(vals) do
		table.insert(ret, k)
	end
	return ret
end

-- Returns a table containing the numbers of the arguments that exist
-- for the specified prefix. For example, if the prefix was 'data', and
-- 'data1', 'data2', and 'data5' exist, it would return {1, 2, 5}.
local function getArgNums(prefix)
	local nums = {}
	for k, v in pairs(args) do
		local num = tostring(k):match('^' .. prefix .. '([1-9]%d*)$')
		if num then table.insert(nums, tonumber(num)) end
	end
	table.sort(nums)
	return nums
end

-- Adds a row to the infobox, with either a header cell
-- or a label/data cell combination.
local function addRow(rowArgs)
	
	if rowArgs.header and rowArgs.header ~= '_BLANK_' then
		has_rows = true
		has_list_class({ rowArgs.rowclass, rowArgs.class, args.headerclass })
		
		root
			:tag('tr')
				:addClass(rowArgs.rowclass)
				:cssText(rowArgs.rowstyle)
				:tag('th')
					:attr('colspan', '2')
					:addClass('infobox-header')
					:addClass(rowArgs.class)
					:addClass(args.headerclass)
					-- @deprecated next; target .infobox-&lt;name&gt; .infobox-header
					:cssText(args.headerstyle)
					:cssText(rowArgs.rowcellstyle)
					:wikitext(fixChildBoxes(rowArgs.header, 'th'))
		if rowArgs.data then
			root:wikitext(
				'[[Category:Pages using infobox templates with ignored data cells]]'
			)
		end
	elseif rowArgs.data and rowArgs.data:gsub(category_in_empty_row_pattern, ''):match('^%S') then
		has_rows = true
		has_list_class({ rowArgs.rowclass, rowArgs.class })
		
		local row = root:tag('tr')
		row:addClass(rowArgs.rowclass)
		row:cssText(rowArgs.rowstyle)
		if rowArgs.label then
			row
				:tag('th')
					:attr('scope', 'row')
					:addClass('infobox-label')
					-- @deprecated next; target .infobox-&lt;name&gt; .infobox-label
					:cssText(args.labelstyle)
					:cssText(rowArgs.rowcellstyle)
					:wikitext(rowArgs.label)
					:done()
		end

		local dataCell = row:tag('td')
		dataCell
			:attr('colspan', not rowArgs.label and '2' or nil)
			:addClass(not rowArgs.label and 'infobox-full-data' or 'infobox-data')
			:addClass(rowArgs.class)
			-- @deprecated next; target .infobox-&lt;name&gt; .infobox(-full)-data
			:cssText(rowArgs.datastyle)
			:cssText(rowArgs.rowcellstyle)
			:wikitext(fixChildBoxes(rowArgs.data, 'td'))
	else
		table.insert(empty_row_categories, rowArgs.data or '')
	end
end

local function renderTitle()
	if not args.title then return end

	has_rows = true
	has_list_class({args.titleclass})
	
	root
		:tag('caption')
			:addClass('infobox-title')
			:addClass(args.titleclass)
			-- @deprecated next; target .infobox-&lt;name&gt; .infobox-title
			:cssText(args.titlestyle)
			:wikitext(args.title)
	
end

local function renderAboveRow()
	if not args.above then return end

	has_rows = true
	has_list_class({ args.aboveclass })
	
	root
		:tag('tr')
			:tag('th')
				:attr('colspan', '2')
				:addClass('infobox-above')
				:addClass(args.aboveclass)
				-- @deprecated next; target .infobox-&lt;name&gt; .infobox-above
				:cssText(args.abovestyle)
				:wikitext(fixChildBoxes(args.above,'th'))
end

local function renderBelowRow()
	if not args.below then return end

	has_rows = true
	has_list_class({ args.belowclass })
	
	root
		:tag('tr')
			:tag('td')
				:attr('colspan', '2')
				:addClass('infobox-below')
				:addClass(args.belowclass)
				-- @deprecated next; target .infobox-&lt;name&gt; .infobox-below
				:cssText(args.belowstyle)
				:wikitext(fixChildBoxes(args.below,'td'))
end

local function addSubheaderRow(subheaderArgs)
	if subheaderArgs.data and
		subheaderArgs.data:gsub(category_in_empty_row_pattern, ''):match('^%S') then
		has_rows = true
		has_list_class({ subheaderArgs.rowclass, subheaderArgs.class })
		
		local row = root:tag('tr')
		row:addClass(subheaderArgs.rowclass)

		local dataCell = row:tag('td')
		dataCell
			:attr('colspan', '2')
			:addClass('infobox-subheader')
			:addClass(subheaderArgs.class)
			:cssText(subheaderArgs.datastyle)
			:cssText(subheaderArgs.rowcellstyle)
			:wikitext(fixChildBoxes(subheaderArgs.data, 'td'))
	else
		table.insert(empty_row_categories, subheaderArgs.data or '')
	end
end

local function renderSubheaders()
	if args.subheader then
		args.subheader1 = args.subheader
	end
	if args.subheaderrowclass then
		args.subheaderrowclass1 = args.subheaderrowclass
	end
	local subheadernums = getArgNums('subheader')
	for k, num in ipairs(subheadernums) do
		addSubheaderRow({
			data = args['subheader' .. tostring(num)],
			-- @deprecated next; target .infobox-&lt;name&gt; .infobox-subheader
			datastyle = args.subheaderstyle,
			rowcellstyle = args['subheaderstyle' .. tostring(num)],
			class = args.subheaderclass,
			rowclass = args['subheaderrowclass' .. tostring(num)]
		})
	end
end

local function addImageRow(imageArgs)

	if imageArgs.data and
		imageArgs.data:gsub(category_in_empty_row_pattern, ''):match('^%S') then

		has_rows = true
		has_list_class({ imageArgs.rowclass, imageArgs.class })
		
		local row = root:tag('tr')
		row:addClass(imageArgs.rowclass)

		local dataCell = row:tag('td')
		dataCell
			:attr('colspan', '2')
			:addClass('infobox-image')
			:addClass(imageArgs.class)
			:cssText(imageArgs.datastyle)
			:wikitext(fixChildBoxes(imageArgs.data, 'td'))
	else
		table.insert(empty_row_categories, imageArgs.data or '')
	end
end

local function renderImages()
	if args.image then
		args.image1 = args.image
	end
	if args.caption then
		args.caption1 = args.caption
	end
	local imagenums = getArgNums('image')
	for k, num in ipairs(imagenums) do
		local caption = args['caption' .. tostring(num)]
		local data = mw.html.create():wikitext(args['image' .. tostring(num)])
		if caption then
			data
				:tag('div')
					:addClass('infobox-caption')
					-- @deprecated next; target .infobox-&lt;name&gt; .infobox-caption
					:cssText(args.captionstyle)
					:wikitext(caption)
		end
		addImageRow({
			data = tostring(data),
			-- @deprecated next; target .infobox-&lt;name&gt; .infobox-image
			datastyle = args.imagestyle,
			class = args.imageclass,
			rowclass = args['imagerowclass' .. tostring(num)]
		})
	end
end

-- When autoheaders are turned on, preprocesses the rows
local function preprocessRows()
	if not args.autoheaders then return end
	
	local rownums = union(getArgNums('header'), getArgNums('data'))
	table.sort(rownums)
	local lastheader
	for k, num in ipairs(rownums) do
		if args['header' .. tostring(num)] then
			if lastheader then
				args['header' .. tostring(lastheader)] = nil
			end
			lastheader = num
		elseif args['data' .. tostring(num)] and
			args['data' .. tostring(num)]:gsub(
				category_in_empty_row_pattern, ''
			):match('^%S') then
			local data = args['data' .. tostring(num)]
			if data:gsub(category_in_empty_row_pattern, ''):match('%S') then
				lastheader = nil
			end
		end
	end
	if lastheader then
		args['header' .. tostring(lastheader)] = nil
	end
end

-- Gets the union of the header and data argument numbers,
-- and renders them all in order
local function renderRows()

	local rownums = union(getArgNums('header'), getArgNums('data'))
	table.sort(rownums)
	for k, num in ipairs(rownums) do
		addRow({
			header = args['header' .. tostring(num)],
			label = args['label' .. tostring(num)],
			data = args['data' .. tostring(num)],
			datastyle = args.datastyle,
			class = args['class' .. tostring(num)],
			rowclass = args['rowclass' .. tostring(num)],
			-- @deprecated next; target .infobox-&lt;name&gt; rowclass
			rowstyle = args['rowstyle' .. tostring(num)],
			rowcellstyle = args['rowcellstyle' .. tostring(num)]
		})
	end
end

local function renderNavBar()
	if not args.name then return end

	has_rows = true
	root
		:tag('tr')
			:tag('td')
				:attr('colspan', '2')
				:addClass('infobox-navbar')
				:wikitext(require('Module:Navbar')._navbar{
					args.name,
					mini = 1,
				})
end

local function renderItalicTitle()
	local italicTitle = args['italic title'] and mw.ustring.lower(args['italic title'])
	if italicTitle == '' or italicTitle == 'force' or italicTitle == 'yes' then
		root:wikitext(require('Module:Italic title')._main({}))
	end
end

-- Categories in otherwise empty rows are collected in empty_row_categories.
-- This function adds them to the module output. It is not affected by
-- args.decat because this module should not prevent module-external categories
-- from rendering.
local function renderEmptyRowCategories()
	for _, s in ipairs(empty_row_categories) do
		root:wikitext(s)
	end
end

-- Render tracking categories. args.decat == turns off tracking categories.
local function renderTrackingCategories()
	if args.decat == 'yes' then return end
	if args.child == 'yes' then
		if args.title then
			root:wikitext(
				'[[Category:Pages using embedded infobox templates with the title parameter]]'
			)
		end
	elseif #(getArgNums('data')) == 0 and mw.title.getCurrentTitle().namespace == 0 then
		root:wikitext('[[Category:Articles using infobox templates with no data rows]]')
	end
end

--[=[
Loads the templatestyles for the infobox.

TODO: FINISH loading base templatestyles here rather than in
MediaWiki:Common.css. There are 4-5000 pages with 'raw' infobox tables.
See [[Mediawiki_talk:Common.css/to_do#Infobox]] and/or come help :).
When we do this we should clean up the inline CSS below too.
Will have to do some bizarre conversion category like with sidebar.

]=]
local function loadTemplateStyles()
	local frame = mw.getCurrentFrame()
	
	local hlist_templatestyles = ''
	if lists.hlist_t.found then
		hlist_templatestyles = frame:extensionTag{
			name = 'templatestyles', args = { src = lists.hlist_t.styles }
		}
	end
	
	local plainlist_templatestyles = ''
	if lists.plainlist_t.found then
		plainlist_templatestyles = frame:extensionTag{
			name = 'templatestyles', args = { src = lists.plainlist_t.styles }
		}
	end
	
	-- See function description
	local base_templatestyles = frame:extensionTag{
		name = 'templatestyles', args = { src = 'Module:Infobox/styles.css' }
	}

	local templatestyles = ''
	if args['templatestyles'] then
		templatestyles = frame:extensionTag{
			name = 'templatestyles', args = { src = args['templatestyles'] }
		}
	end
	
	local child_templatestyles = ''
	if args['child templatestyles'] then
		child_templatestyles = frame:extensionTag{
			name = 'templatestyles', args = { src = args['child templatestyles'] }
		}
	end
	
	local grandchild_templatestyles = ''
	if args['grandchild templatestyles'] then
		grandchild_templatestyles = frame:extensionTag{
			name = 'templatestyles', args = { src = args['grandchild templatestyles'] }
		}
	end
	
	return table.concat({
		-- hlist -&gt; plainlist -&gt; base is best-effort to preserve old Common.css ordering.
		-- this ordering is not a guarantee because the rows of interest invoking
		-- each class may not be on a specific page
		hlist_templatestyles,
		plainlist_templatestyles,
		base_templatestyles,
		templatestyles,
		child_templatestyles,
		grandchild_templatestyles
	})
end

-- common functions between the child and non child cases
local function structure_infobox_common()
	renderSubheaders()
	renderImages()
	preprocessRows()
	renderRows()
	renderBelowRow()
	renderNavBar()
	renderItalicTitle()
	renderEmptyRowCategories()
	renderTrackingCategories()
	cleanInfobox()
end

-- Specify the overall layout of the infobox, with special settings if the
-- infobox is used as a 'child' inside another infobox.
local function _infobox()
	if args.child ~= 'yes' then
		root = mw.html.create('table')

		root
			:addClass(args.subbox == 'yes' and 'infobox-subbox' or 'infobox')
			:addClass(args.bodyclass)
			-- @deprecated next; target .infobox-&lt;name&gt;
			:cssText(args.bodystyle)
		
		has_list_class({ args.bodyclass })

		renderTitle()
		renderAboveRow()
	else
		root = mw.html.create()

		root
			:wikitext(args.title)
	end
	structure_infobox_common()
	
	return loadTemplateStyles() .. root
end

-- If the argument exists and isn't blank, add it to the argument table.
-- Blank arguments are treated as nil to match the behaviour of ParserFunctions.
local function preprocessSingleArg(argName)
	if origArgs[argName] and origArgs[argName] ~= '' then
		args[argName] = origArgs[argName]
	end
end

-- Assign the parameters with the given prefixes to the args table, in order, in
-- batches of the step size specified. This is to prevent references etc. from
-- appearing in the wrong order. The prefixTable should be an array containing
-- tables, each of which has two possible fields, a "prefix" string and a
-- "depend" table. The function always parses parameters containing the "prefix"
-- string, but only parses parameters in the "depend" table if the prefix
-- parameter is present and non-blank.
local function preprocessArgs(prefixTable, step)
	if type(prefixTable) ~= 'table' then
		error("Non-table value detected for the prefix table", 2)
	end
	if type(step) ~= 'number' then
		error("Invalid step value detected", 2)
	end

	-- Get arguments without a number suffix, and check for bad input.
	for i,v in ipairs(prefixTable) do
		if type(v) ~= 'table' or type(v.prefix) ~= "string" or
			(v.depend and type(v.depend) ~= 'table') then
			error('Invalid input detected to preprocessArgs prefix table', 2)
		end
		preprocessSingleArg(v.prefix)
		-- Only parse the depend parameter if the prefix parameter is present
		-- and not blank.
		if args[v.prefix] and v.depend then
			for j, dependValue in ipairs(v.depend) do
				if type(dependValue) ~= 'string' then
					error('Invalid "depend" parameter value detected in preprocessArgs')
				end
				preprocessSingleArg(dependValue)
			end
		end
	end

	-- Get arguments with number suffixes.
	local a = 1 -- Counter variable.
	local moreArgumentsExist = true
	while moreArgumentsExist == true do
		moreArgumentsExist = false
		for i = a, a + step - 1 do
			for j,v in ipairs(prefixTable) do
				local prefixArgName = v.prefix .. tostring(i)
				if origArgs[prefixArgName] then
					-- Do another loop if any arguments are found, even blank ones.
					moreArgumentsExist = true
					preprocessSingleArg(prefixArgName)
				end
				-- Process the depend table if the prefix argument is present
				-- and not blank, or we are processing "prefix1" and "prefix" is
				-- present and not blank, and if the depend table is present.
				if v.depend and (args[prefixArgName] or (i == 1 and args[v.prefix])) then
					for j,dependValue in ipairs(v.depend) do
						local dependArgName = dependValue .. tostring(i)
						preprocessSingleArg(dependArgName)
					end
				end
			end
		end
		a = a + step
	end
end

-- Parse the data parameters in the same order that the old {{infobox}} did, so
-- that references etc. will display in the expected places. Parameters that
-- depend on another parameter are only processed if that parameter is present,
-- to avoid phantom references appearing in article reference lists.
local function parseDataParameters()

	preprocessSingleArg('autoheaders')
	preprocessSingleArg('child')
	preprocessSingleArg('bodyclass')
	preprocessSingleArg('subbox')
	preprocessSingleArg('bodystyle')
	preprocessSingleArg('title')
	preprocessSingleArg('titleclass')
	preprocessSingleArg('titlestyle')
	preprocessSingleArg('above')
	preprocessSingleArg('aboveclass')
	preprocessSingleArg('abovestyle')
	preprocessArgs({
		{prefix = 'subheader', depend = {'subheaderstyle', 'subheaderrowclass'}}
	}, 10)
	preprocessSingleArg('subheaderstyle')
	preprocessSingleArg('subheaderclass')
	preprocessArgs({
		{prefix = 'image', depend = {'caption', 'imagerowclass'}}
	}, 10)
	preprocessSingleArg('captionstyle')
	preprocessSingleArg('imagestyle')
	preprocessSingleArg('imageclass')
	preprocessArgs({
		{prefix = 'header'},
		{prefix = 'data', depend = {'label'}},
		{prefix = 'rowclass'},
		{prefix = 'rowstyle'},
		{prefix = 'rowcellstyle'},
		{prefix = 'class'}
	}, 50)
	preprocessSingleArg('headerclass')
	preprocessSingleArg('headerstyle')
	preprocessSingleArg('labelstyle')
	preprocessSingleArg('datastyle')
	preprocessSingleArg('below')
	preprocessSingleArg('belowclass')
	preprocessSingleArg('belowstyle')
	preprocessSingleArg('name')
	-- different behaviour for italics if blank or absent
	args['italic title'] = origArgs['italic title']
	preprocessSingleArg('decat')
	preprocessSingleArg('templatestyles')
	preprocessSingleArg('child templatestyles')
	preprocessSingleArg('grandchild templatestyles')
end

-- If called via #invoke, use the args passed into the invoking template.
-- Otherwise, for testing purposes, assume args are being passed directly in.
function p.infobox(frame)
	if frame == mw.getCurrentFrame() then
		origArgs = frame:getParent().args
	else
		origArgs = frame
	end
	
	parseDataParameters()
	
	return _infobox()
end

-- For calling via #invoke within a template
function p.infoboxTemplate(frame)
	origArgs = {}
	for k,v in pairs(frame.args) do origArgs[k] = mw.text.trim(v) end
	
	parseDataParameters()
	
	return _infobox()
end
return p</text>
      <sha1>1m9tzydwofr8cj9bzzm2am6moool42y</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1</title>
    <ns>828</ns>
    <id>8</id>
    <revision>
      <id>12</id>
      <timestamp>2023-08-20T12:30:18Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "require ('strict');  --[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------  each of these counts against the Lua upvalue limit  ]]  local validation;																-- functions in Module:Citation/CS1/Date_validation  local utilities;																-- functions in Module:Citation/CS1/Utilities local z = {};																	-- table of tables in Module:Citation/CS1/Utilities  local identifiers;																-- f..."</comment>
      <origin>12</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="223518" sha1="tdu8ggjbxwo5jmdozqbp8w94qat411d" xml:space="preserve">require ('strict');

--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------

each of these counts against the Lua upvalue limit

]]

local validation;																-- functions in Module:Citation/CS1/Date_validation

local utilities;																-- functions in Module:Citation/CS1/Utilities
local z = {};																	-- table of tables in Module:Citation/CS1/Utilities

local identifiers;																-- functions and tables in Module:Citation/CS1/Identifiers
local metadata;																	-- functions in Module:Citation/CS1/COinS
local cfg = {};																	-- table of configuration tables that are defined in Module:Citation/CS1/Configuration
local whitelist = {};															-- table of tables listing valid template parameter names; defined in Module:Citation/CS1/Whitelist


--[[------------------&lt; P A G E   S C O P E   V A R I A B L E S &gt;---------------

declare variables here that have page-wide scope that are not brought in from
other modules; that are created here and used here

]]

local added_deprecated_cat;														-- Boolean flag so that the category is added only once
local added_vanc_errs;															-- Boolean flag so we only emit one Vancouver error / category
local added_generic_name_errs;													-- Boolean flag so we only emit one generic name error / category and stop testing names once an error is encountered
local Frame;																	-- holds the module's frame table
local is_preview_mode;															-- true when article is in preview mode; false when using 'Preview page with this template' (previewing the module)
local is_sandbox;																-- true when using sandbox modules to render citation


--[[--------------------------&lt; F I R S T _ S E T &gt;------------------------------------------------------------

Locates and returns the first set value in a table of values where the order established in the table,
left-to-right (or top-to-bottom), is the order in which the values are evaluated.  Returns nil if none are set.

This version replaces the original 'for _, val in pairs do' and a similar version that used ipairs.  With the pairs
version the order of evaluation could not be guaranteed.  With the ipairs version, a nil value would terminate
the for-loop before it reached the actual end of the list.

]]

local function first_set (list, count)
	local i = 1;
	while i &lt;= count do															-- loop through all items in list
		if utilities.is_set( list[i] ) then
			return list[i];														-- return the first set list member
		end
		i = i + 1;																-- point to next
	end
end


--[[--------------------------&lt; A D D _ V A N C _ E R R O R &gt;----------------------------------------------------

Adds a single Vancouver system error message to the template's output regardless of how many error actually exist.
To prevent duplication, added_vanc_errs is nil until an error message is emitted.

added_vanc_errs is a Boolean declared in page scope variables above

]]

local function add_vanc_error (source, position)
	if added_vanc_errs then return end
		
	added_vanc_errs = true;														-- note that we've added this category
	utilities.set_message ('err_vancouver', {source, position});
end


--[[--------------------------&lt; I S _ S C H E M E &gt;------------------------------------------------------------

does this thing that purports to be a URI scheme seem to be a valid scheme?  The scheme is checked to see if it
is in agreement with http://tools.ietf.org/html/std66#section-3.1 which says:
	Scheme names consist of a sequence of characters beginning with a
   letter and followed by any combination of letters, digits, plus
   ("+"), period ("."), or hyphen ("-").

returns true if it does, else false

]]

local function is_scheme (scheme)
	return scheme and scheme:match ('^%a[%a%d%+%.%-]*:');						-- true if scheme is set and matches the pattern
end


--[=[-------------------------&lt; I S _ D O M A I N _ N A M E &gt;--------------------------------------------------

Does this thing that purports to be a domain name seem to be a valid domain name?

Syntax defined here: http://tools.ietf.org/html/rfc1034#section-3.5
BNF defined here: https://tools.ietf.org/html/rfc4234
Single character names are generally reserved; see https://tools.ietf.org/html/draft-ietf-dnsind-iana-dns-01#page-15;
	see also [[Single-letter second-level domain]]
list of TLDs: https://www.iana.org/domains/root/db

RFC 952 (modified by RFC 1123) requires the first and last character of a hostname to be a letter or a digit.  Between
the first and last characters the name may use letters, digits, and the hyphen.

Also allowed are IPv4 addresses. IPv6 not supported

domain is expected to be stripped of any path so that the last character in the last character of the TLD.  tld
is two or more alpha characters.  Any preceding '//' (from splitting a URL with a scheme) will be stripped
here.  Perhaps not necessary but retained in case it is necessary for IPv4 dot decimal.

There are several tests:
	the first character of the whole domain name including subdomains must be a letter or a digit
	internationalized domain name (ASCII characters with .xn-- ASCII Compatible Encoding (ACE) prefix xn-- in the TLD) see https://tools.ietf.org/html/rfc3490
	single-letter/digit second-level domains in the .org, .cash, and .today TLDs
	q, x, and z SL domains in the .com TLD
	i and q SL domains in the .net TLD
	single-letter SL domains in the ccTLDs (where the ccTLD is two letters)
	two-character SL domains in gTLDs (where the gTLD is two or more letters)
	three-plus-character SL domains in gTLDs (where the gTLD is two or more letters)
	IPv4 dot-decimal address format; TLD not allowed

returns true if domain appears to be a proper name and TLD or IPv4 address, else false

]=]

local function is_domain_name (domain)
	if not domain then
		return false;															-- if not set, abandon
	end
	
	domain = domain:gsub ('^//', '');											-- strip '//' from domain name if present; done here so we only have to do it once
	
	if not domain:match ('^[%w]') then											-- first character must be letter or digit
		return false;
	end

	if domain:match ('^%a+:') then												-- hack to detect things that look like s:Page:Title where Page: is namespace at Wikisource
		return false;
	end

	local patterns = {															-- patterns that look like URLs
		'%f[%w][%w][%w%-]+[%w]%.%a%a+$',										-- three or more character hostname.hostname or hostname.tld
		'%f[%w][%w][%w%-]+[%w]%.xn%-%-[%w]+$',									-- internationalized domain name with ACE prefix
		'%f[%a][qxz]%.com$',													-- assigned one character .com hostname (x.com times out 2015-12-10)
		'%f[%a][iq]%.net$',														-- assigned one character .net hostname (q.net registered but not active 2015-12-10)
		'%f[%w][%w]%.%a%a$',													-- one character hostname and ccTLD (2 chars)
		'%f[%w][%w][%w]%.%a%a+$',												-- two character hostname and TLD
		'^%d%d?%d?%.%d%d?%d?%.%d%d?%d?%.%d%d?%d?',								-- IPv4 address
		}

	for _, pattern in ipairs (patterns) do										-- loop through the patterns list
		if domain:match (pattern) then
			return true;														-- if a match then we think that this thing that purports to be a URL is a URL
		end
	end

	for _, d in ipairs (cfg.single_letter_2nd_lvl_domains_t) do					-- look for single letter second level domain names for these top level domains
		if domain:match ('%f[%w][%w]%.' .. d) then
			return true
		end
	end
	return false;																-- no matches, we don't know what this thing is
end


--[[--------------------------&lt; I S _ U R L &gt;------------------------------------------------------------------

returns true if the scheme and domain parts of a URL appear to be a valid URL; else false.

This function is the last step in the validation process.  This function is separate because there are cases that
are not covered by split_url(), for example is_parameter_ext_wikilink() which is looking for bracketted external
wikilinks.

]]

local function is_url (scheme, domain)
	if utilities.is_set (scheme) then											-- if scheme is set check it and domain
		return is_scheme (scheme) and is_domain_name (domain);
	else
		return is_domain_name (domain);											-- scheme not set when URL is protocol-relative
	end
end


--[[--------------------------&lt; S P L I T _ U R L &gt;------------------------------------------------------------

Split a URL into a scheme, authority indicator, and domain.

First remove Fully Qualified Domain Name terminator (a dot following TLD) (if any) and any path(/), query(?) or fragment(#).

If protocol-relative URL, return nil scheme and domain else return nil for both scheme and domain.

When not protocol-relative, get scheme, authority indicator, and domain.  If there is an authority indicator (one
or more '/' characters immediately following the scheme's colon), make sure that there are only 2.

Any URL that does not have news: scheme must have authority indicator (//).  TODO: are there other common schemes
like news: that don't use authority indicator?

Strip off any port and path;

]]

local function split_url (url_str)
	local scheme, authority, domain;
	
	url_str = url_str:gsub ('([%a%d])%.?[/%?#].*$', '%1');						-- strip FQDN terminator and path(/), query(?), fragment (#) (the capture prevents false replacement of '//')

	if url_str:match ('^//%S*') then											-- if there is what appears to be a protocol-relative URL
		domain = url_str:match ('^//(%S*)')
	elseif url_str:match ('%S-:/*%S+') then										-- if there is what appears to be a scheme, optional authority indicator, and domain name
		scheme, authority, domain = url_str:match ('(%S-:)(/*)(%S+)');			-- extract the scheme, authority indicator, and domain portions
		if utilities.is_set (authority) then
			authority = authority:gsub ('//', '', 1);							-- replace place 1 pair of '/' with nothing;
			if utilities.is_set(authority) then									-- if anything left (1 or 3+ '/' where authority should be) then
				return scheme;													-- return scheme only making domain nil which will cause an error message
			end
		else
			if not scheme:match ('^news:') then									-- except for news:..., MediaWiki won't link URLs that do not have authority indicator; TODO: a better way to do this test?
				return scheme;													-- return scheme only making domain nil which will cause an error message
			end
		end
		domain = domain:gsub ('(%a):%d+', '%1');								-- strip port number if present
	end
	
	return scheme, domain;
end


--[[--------------------------&lt; L I N K _ P A R A M _ O K &gt;---------------------------------------------------

checks the content of |title-link=, |series-link=, |author-link=, etc. for properly formatted content: no wikilinks, no URLs

Link parameters are to hold the title of a Wikipedia article, so none of the WP:TITLESPECIALCHARACTERS are allowed:
	# &lt; &gt; [ ] | { } _
except the underscore which is used as a space in wiki URLs and # which is used for section links

returns false when the value contains any of these characters.

When there are no illegal characters, this function returns TRUE if value DOES NOT appear to be a valid URL (the
|&lt;param&gt;-link= parameter is ok); else false when value appears to be a valid URL (the |&lt;param&gt;-link= parameter is NOT ok).

]]

local function link_param_ok (value)
	local scheme, domain;
	if value:find ('[&lt;&gt;%[%]|{}]') then											-- if any prohibited characters
		return false;
	end

	scheme, domain = split_url (value);											-- get scheme or nil and domain or nil from URL; 
	return not is_url (scheme, domain);											-- return true if value DOES NOT appear to be a valid URL
end


--[[--------------------------&lt; L I N K _ T I T L E _ O K &gt;---------------------------------------------------

Use link_param_ok() to validate |&lt;param&gt;-link= value and its matching |&lt;title&gt;= value.

|&lt;title&gt;= may be wiki-linked but not when |&lt;param&gt;-link= has a value.  This function emits an error message when
that condition exists

check &lt;link&gt; for inter-language interwiki-link prefix.  prefix must be a MediaWiki-recognized language
code and must begin with a colon.

]]

local function link_title_ok (link, lorig, title, torig)
	local orig;
	if utilities.is_set (link) then 											-- don't bother if &lt;param&gt;-link doesn't have a value
		if not link_param_ok (link) then										-- check |&lt;param&gt;-link= markup
			orig = lorig;														-- identify the failing link parameter
		elseif title:find ('%[%[') then											-- check |title= for wikilink markup
			orig = torig;														-- identify the failing |title= parameter
		elseif link:match ('^%a+:') then										-- if the link is what looks like an interwiki
			local prefix = link:match ('^(%a+):'):lower();						-- get the interwiki prefix

			if cfg.inter_wiki_map[prefix] then									-- if prefix is in the map, must have preceding colon
				orig = lorig;													-- flag as error
			end
		end
	end

	if utilities.is_set (orig) then
		link = '';																-- unset
		utilities.set_message ('err_bad_paramlink', orig);						-- URL or wikilink in |title= with |title-link=;
	end
	
	return link;																-- link if ok, empty string else
end


--[[--------------------------&lt; C H E C K _ U R L &gt;------------------------------------------------------------

Determines whether a URL string appears to be valid.

First we test for space characters.  If any are found, return false.  Then split the URL into scheme and domain
portions, or for protocol-relative (//example.com) URLs, just the domain.  Use is_url() to validate the two
portions of the URL.  If both are valid, or for protocol-relative if domain is valid, return true, else false.

Because it is different from a standard URL, and because this module used external_link() to make external links
that work for standard and news: links, we validate newsgroup names here.  The specification for a newsgroup name
is at https://tools.ietf.org/html/rfc5536#section-3.1.4

]]

local function check_url( url_str )
	if nil == url_str:match ("^%S+$") then										-- if there are any spaces in |url=value it can't be a proper URL
		return false;
	end
	local scheme, domain;

	scheme, domain = split_url (url_str);										-- get scheme or nil and domain or nil from URL;
	
	if 'news:' == scheme then													-- special case for newsgroups
		return domain:match('^[%a%d%+%-_]+%.[%a%d%+%-_%.]*[%a%d%+%-_]$');
	end
	
	return is_url (scheme, domain);												-- return true if value appears to be a valid URL
end


--[=[-------------------------&lt; I S _ P A R A M E T E R _ E X T _ W I K I L I N K &gt;----------------------------

Return true if a parameter value has a string that begins and ends with square brackets [ and ] and the first
non-space characters following the opening bracket appear to be a URL.  The test will also find external wikilinks
that use protocol-relative URLs. Also finds bare URLs.

The frontier pattern prevents a match on interwiki-links which are similar to scheme:path URLs.  The tests that
find bracketed URLs are required because the parameters that call this test (currently |title=, |chapter=, |work=,
and |publisher=) may have wikilinks and there are articles or redirects like '//Hus' so, while uncommon, |title=[[//Hus]]
is possible as might be [[en://Hus]].

]=]

local function is_parameter_ext_wikilink (value)
local scheme, domain;

	if value:match ('%f[%[]%[%a%S*:%S+.*%]') then								-- if ext. wikilink with scheme and domain: [xxxx://yyyyy.zzz]
		scheme, domain = split_url (value:match ('%f[%[]%[(%a%S*:%S+).*%]'));
	elseif value:match ('%f[%[]%[//%S+.*%]') then								-- if protocol-relative ext. wikilink: [//yyyyy.zzz]
		scheme, domain = split_url (value:match ('%f[%[]%[(//%S+).*%]'));
	elseif value:match ('%a%S*:%S+') then										-- if bare URL with scheme; may have leading or trailing plain text
		scheme, domain = split_url (value:match ('(%a%S*:%S+)'));
	elseif value:match ('//%S+') then											-- if protocol-relative bare URL: //yyyyy.zzz; may have leading or trailing plain text
		scheme, domain = split_url (value:match ('(//%S+)'));					-- what is left should be the domain
	else
		return false;															-- didn't find anything that is obviously a URL
	end

	return is_url (scheme, domain);												-- return true if value appears to be a valid URL
end


--[[-------------------------&lt; C H E C K _ F O R _ U R L &gt;-----------------------------------------------------

loop through a list of parameters and their values.  Look at the value and if it has an external link, emit an error message.

]]

local function check_for_url (parameter_list, error_list)
	for k, v in pairs (parameter_list) do										-- for each parameter in the list
		if is_parameter_ext_wikilink (v) then									-- look at the value; if there is a URL add an error message
			table.insert (error_list, utilities.wrap_style ('parameter', k));
		end
	end
end


--[[--------------------------&lt; S A F E _ F O R _ U R L &gt;------------------------------------------------------

Escape sequences for content that will be used for URL descriptions

]]

local function safe_for_url( str )
	if str:match( "%[%[.-%]%]" ) ~= nil then 
		utilities.set_message ('err_wikilink_in_url', {});
	end
	
	return str:gsub( '[%[%]\n]', {	
		['['] = '&amp;#91;',
		[']'] = '&amp;#93;',
		['\n'] = ' ' } );
end


--[[--------------------------&lt; E X T E R N A L _ L I N K &gt;----------------------------------------------------

Format an external link with error checking

]]

local function external_link (URL, label, source, access)
	local err_msg = '';
	local domain;
	local path;
	local base_url;

	if not utilities.is_set (label) then
		label = URL;
		if utilities.is_set (source) then
			utilities.set_message ('err_bare_url_missing_title', {utilities.wrap_style ('parameter', source)});
		else
			error (cfg.messages["bare_url_no_origin"]);							-- programmer error; valid parameter name does not have matching meta-parameter
		end			
	end
	if not check_url (URL) then
		utilities.set_message ('err_bad_url', {utilities.wrap_style ('parameter', source)});
	end
	
	domain, path = URL:match ('^([/%.%-%+:%a%d]+)([/%?#].*)$');					-- split the URL into scheme plus domain and path
	if path then																-- if there is a path portion
		path = path:gsub ('[%[%]]', {['['] = '%5b', [']'] = '%5d'});			-- replace '[' and ']' with their percent-encoded values
		URL = table.concat ({domain, path});									-- and reassemble
	end

	base_url = table.concat ({ "[", URL, " ", safe_for_url (label), "]" });		-- assemble a wiki-markup URL

	if utilities.is_set (access) then											-- access level (subscription, registration, limited)
		base_url = utilities.substitute (cfg.presentation['ext-link-access-signal'], {cfg.presentation[access].class, cfg.presentation[access].title, base_url});	-- add the appropriate icon
	end

	return base_url;
end


--[[--------------------------&lt; D E P R E C A T E D _ P A R A M E T E R &gt;--------------------------------------

Categorize and emit an error message when the citation contains one or more deprecated parameters.  The function includes the
offending parameter name to the error message.  Only one error message is emitted regardless of the number of deprecated
parameters in the citation.

added_deprecated_cat is a Boolean declared in page scope variables above

]]

local function deprecated_parameter(name)
	if not added_deprecated_cat then
		added_deprecated_cat = true;											-- note that we've added this category
		utilities.set_message ('err_deprecated_params', {name});				-- add error message
	end
end


--[=[-------------------------&lt; K E R N _ Q U O T E S &gt;--------------------------------------------------------

Apply kerning to open the space between the quote mark provided by the module and a leading or trailing quote
mark contained in a |title= or |chapter= parameter's value.

This function will positive kern either single or double quotes:
	"'Unkerned title with leading and trailing single quote marks'"
	" 'Kerned title with leading and trailing single quote marks' " (in real life the kerning isn't as wide as this example)
Double single quotes (italic or bold wiki-markup) are not kerned.

Replaces Unicode quote marks in plain text or in the label portion of a [[L|D]] style wikilink with typewriter
quote marks regardless of the need for kerning.  Unicode quote marks are not replaced in simple [[D]] wikilinks.

Call this function for chapter titles, for website titles, etc.; not for book titles.

]=]

local function kern_quotes (str)
	local cap = '';
	local wl_type, label, link;

	wl_type, label, link = utilities.is_wikilink (str);							-- wl_type is: 0, no wl (text in label variable); 1, [[D]]; 2, [[L|D]]
	
	if 1 == wl_type then														-- [[D]] simple wikilink with or without quote marks
		if mw.ustring.match (str, '%[%[[\"“”\'‘’].+[\"“”\'‘’]%]%]') then		-- leading and trailing quote marks
			str = utilities.substitute (cfg.presentation['kern-left'], str);
			str = utilities.substitute (cfg.presentation['kern-right'], str);
		elseif mw.ustring.match (str, '%[%[[\"“”\'‘’].+%]%]')	then			-- leading quote marks
			str = utilities.substitute (cfg.presentation['kern-left'], str);
		elseif mw.ustring.match (str, '%[%[.+[\"“”\'‘’]%]%]') then				-- trailing quote marks
			str = utilities.substitute (cfg.presentation['kern-right'], str);
		end

	else																		-- plain text or [[L|D]]; text in label variable
		label = mw.ustring.gsub (label, '[“”]', '\"');							-- replace “” (U+201C &amp; U+201D) with " (typewriter double quote mark)
		label = mw.ustring.gsub (label, '[‘’]', '\'');							-- replace ‘’ (U+2018 &amp; U+2019) with ' (typewriter single quote mark)

		cap = mw.ustring.match (label, "^([\"\'][^\'].+)");						-- match leading double or single quote but not doubled single quotes (italic markup)
		if utilities.is_set (cap) then
			label = utilities.substitute (cfg.presentation['kern-left'], cap);
		end
	
		cap = mw.ustring.match (label, "^(.+[^\'][\"\'])$")						-- match trailing double or single quote but not doubled single quotes (italic markup)
		if utilities.is_set (cap) then
			label = utilities.substitute (cfg.presentation['kern-right'], cap);
		end
		
		if 2 == wl_type then
			str = utilities.make_wikilink (link, label);						-- reassemble the wikilink
		else
			str = label;
		end
	end
	return str;
end


--[[--------------------------&lt; F O R M A T _ S C R I P T _ V A L U E &gt;----------------------------------------

|script-title= holds title parameters that are not written in Latin-based scripts: Chinese, Japanese, Arabic, Hebrew, etc. These scripts should
not be italicized and may be written right-to-left.  The value supplied by |script-title= is concatenated onto Title after Title has been wrapped
in italic markup.

Regardless of language, all values provided by |script-title= are wrapped in &lt;bdi&gt;...&lt;/bdi&gt; tags to isolate RTL languages from the English left to right.

|script-title= provides a unique feature.  The value in |script-title= may be prefixed with a two-character ISO 639-1 language code and a colon:
	|script-title=ja:*** *** (where * represents a Japanese character)
Spaces between the two-character code and the colon and the colon and the first script character are allowed:
	|script-title=ja : *** ***
	|script-title=ja: *** ***
	|script-title=ja :*** ***
Spaces preceding the prefix are allowed: |script-title = ja:*** ***

The prefix is checked for validity.  If it is a valid ISO 639-1 language code, the lang attribute (lang="ja") is added to the &lt;bdi&gt; tag so that browsers can
know the language the tag contains.  This may help the browser render the script more correctly.  If the prefix is invalid, the lang attribute
is not added.  At this time there is no error message for this condition.

Supports |script-title=, |script-chapter=, |script-&lt;periodical&gt;=

]]

local function format_script_value (script_value, script_param)
	local lang='';																-- initialize to empty string
	local name;
	if script_value:match('^%l%l%l?%s*:') then									-- if first 3 or 4 non-space characters are script language prefix
		lang = script_value:match('^(%l%l%l?)%s*:%s*%S.*');						-- get the language prefix or nil if there is no script
		if not utilities.is_set (lang) then
			utilities.set_message ('err_script_parameter', {script_param, cfg.err_msg_supl['missing title part']});		-- prefix without 'title'; add error message
			return '';															-- script_value was just the prefix so return empty string
		end
																				-- if we get this far we have prefix and script
		name = cfg.lang_tag_remap[lang] or mw.language.fetchLanguageName( lang, cfg.this_wiki_code );	-- get language name so that we can use it to categorize
		if utilities.is_set (name) then											-- is prefix a proper ISO 639-1 language code?
			script_value = script_value:gsub ('^%l+%s*:%s*', '');				-- strip prefix from script
																				-- is prefix one of these language codes?
			if utilities.in_array (lang, cfg.script_lang_codes) then
				utilities.add_prop_cat ('script', {name, lang})
			else
				utilities.set_message ('err_script_parameter', {script_param, cfg.err_msg_supl['unknown language code']});	-- unknown script-language; add error message
			end
			lang = ' lang="' .. lang .. '" ';									-- convert prefix into a lang attribute
		else
			utilities.set_message ('err_script_parameter', {script_param, cfg.err_msg_supl['invalid language code']});		-- invalid language code; add error message
			lang = '';															-- invalid so set lang to empty string
		end
	else
		utilities.set_message ('err_script_parameter', {script_param, cfg.err_msg_supl['missing prefix']});				-- no language code prefix; add error message
	end
	script_value = utilities.substitute (cfg.presentation['bdi'], {lang, script_value});	-- isolate in case script is RTL

	return script_value;
end


--[[--------------------------&lt; S C R I P T _ C O N C A T E N A T E &gt;------------------------------------------

Initially for |title= and |script-title=, this function concatenates those two parameter values after the script
value has been wrapped in &lt;bdi&gt; tags.

]]

local function script_concatenate (title, script, script_param)
	if utilities.is_set (script) then
		script = format_script_value (script, script_param);					-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; returns empty string on error
		if utilities.is_set (script) then
			title = title .. ' ' .. script;										-- concatenate title and script title
		end
	end
	return title;
end


--[[--------------------------&lt; W R A P _ M S G &gt;--------------------------------------------------------------

Applies additional message text to various parameter values. Supplied string is wrapped using a message_list
configuration taking one argument.  Supports lower case text for {{citation}} templates.  Additional text taken
from citation_config.messages - the reason this function is similar to but separate from wrap_style().

]]

local function wrap_msg (key, str, lower)
	if not utilities.is_set ( str ) then
		return "";
	end
	if true == lower then
		local msg;
		msg = cfg.messages[key]:lower();										-- set the message to lower case before 
		return utilities.substitute ( msg, str );								-- including template text
	else
		return utilities.substitute ( cfg.messages[key], str );
	end		
end


--[[----------------&lt; W I K I S O U R C E _ U R L _ M A K E &gt;-------------------

Makes a Wikisource URL from Wikisource interwiki-link.  Returns the URL and appropriate
label; nil else.

str is the value assigned to |chapter= (or aliases) or |title= or |title-link=

]]

local function wikisource_url_make (str)
	local wl_type, D, L;
	local ws_url, ws_label;
	local wikisource_prefix = table.concat ({'https://', cfg.this_wiki_code, '.wikisource.org/wiki/'});

	wl_type, D, L = utilities.is_wikilink (str);								-- wl_type is 0 (not a wikilink), 1 (simple wikilink), 2 (complex wikilink)

	if 0 == wl_type then														-- not a wikilink; might be from |title-link=
		str = D:match ('^[Ww]ikisource:(.+)') or D:match ('^[Ss]:(.+)');		-- article title from interwiki link with long-form or short-form namespace
		if utilities.is_set (str) then
			ws_url = table.concat ({											-- build a Wikisource URL
				wikisource_prefix,												-- prefix
				str,															-- article title
				});
			ws_label = str;														-- label for the URL
		end
	elseif 1 == wl_type then													-- simple wikilink: [[Wikisource:ws article]]
		str = D:match ('^[Ww]ikisource:(.+)') or D:match ('^[Ss]:(.+)');		-- article title from interwiki link with long-form or short-form namespace
		if utilities.is_set (str) then
			ws_url = table.concat ({											-- build a Wikisource URL
				wikisource_prefix,												-- prefix
				str,															-- article title
				});
			ws_label = str;														-- label for the URL
		end
	elseif 2 == wl_type then													-- non-so-simple wikilink: [[Wikisource:ws article|displayed text]] ([[L|D]])
		str = L:match ('^[Ww]ikisource:(.+)') or L:match ('^[Ss]:(.+)');		-- article title from interwiki link with long-form or short-form namespace
		if utilities.is_set (str) then
			ws_label = D;														-- get ws article name from display portion of interwiki link
			ws_url = table.concat ({											-- build a Wikisource URL
				wikisource_prefix,												-- prefix
				str,															-- article title without namespace from link portion of wikilink
				});
		end
	end

	if ws_url then
		ws_url = mw.uri.encode (ws_url, 'WIKI');								-- make a usable URL
		ws_url = ws_url:gsub ('%%23', '#');										-- undo percent-encoding of fragment marker
	end

	return ws_url, ws_label, L or D;											-- return proper URL or nil and a label or nil
end


--[[----------------&lt; F O R M A T _ P E R I O D I C A L &gt;-----------------------

Format the three periodical parameters: |script-&lt;periodical&gt;=, |&lt;periodical&gt;=,
and |trans-&lt;periodical&gt;= into a single Periodical meta-parameter.

]]

local function format_periodical (script_periodical, script_periodical_source, periodical, trans_periodical)

	if not utilities.is_set (periodical) then
		periodical = '';														-- to be safe for concatenation
	else
		periodical = utilities.wrap_style ('italic-title', periodical);			-- style 
	end

	periodical = script_concatenate (periodical, script_periodical, script_periodical_source);	-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after title is wrapped

	if utilities.is_set (trans_periodical) then
		trans_periodical = utilities.wrap_style ('trans-italic-title', trans_periodical);
		if utilities.is_set (periodical) then
			periodical = periodical .. ' ' .. trans_periodical;
		else																	-- here when trans-periodical without periodical or script-periodical
			periodical = trans_periodical;
			utilities.set_message ('err_trans_missing_title', {'periodical'});
		end
	end

	return periodical;
end


--[[------------------&lt; F O R M A T _ C H A P T E R _ T I T L E &gt;---------------

Format the four chapter parameters: |script-chapter=, |chapter=, |trans-chapter=,
and |chapter-url= into a single chapter meta- parameter (chapter_url_source used
for error messages).

]]

local function format_chapter_title (script_chapter, script_chapter_source, chapter, chapter_source, trans_chapter, trans_chapter_source, chapter_url, chapter_url_source, no_quotes, access)
	local ws_url, ws_label, L = wikisource_url_make (chapter);					-- make a wikisource URL and label from a wikisource interwiki link
	if ws_url then
		ws_label = ws_label:gsub ('_', ' ');									-- replace underscore separators with space characters
		chapter = ws_label;
	end

	if not utilities.is_set (chapter) then
		chapter = '';															-- to be safe for concatenation
	else
		if false == no_quotes then
			chapter = kern_quotes (chapter);									-- if necessary, separate chapter title's leading and trailing quote marks from module provided quote marks
			chapter = utilities.wrap_style ('quoted-title', chapter);
		end
	end

	chapter = script_concatenate (chapter, script_chapter, script_chapter_source);	-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after title is wrapped

	if utilities.is_set (chapter_url) then
		chapter = external_link (chapter_url, chapter, chapter_url_source, access);	-- adds bare_url_missing_title error if appropriate
	elseif ws_url then
		chapter = external_link (ws_url, chapter .. '&amp;nbsp;', 'ws link in chapter');	-- adds bare_url_missing_title error if appropriate; space char to move icon away from chap text; TODO: better way to do this?
		chapter = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, chapter});				
	end

	if utilities.is_set (trans_chapter) then
		trans_chapter = utilities.wrap_style ('trans-quoted-title', trans_chapter);
		if utilities.is_set (chapter) then
			chapter = chapter .. ' ' .. trans_chapter;
		else																	-- here when trans_chapter without chapter or script-chapter
			chapter = trans_chapter;
			chapter_source = trans_chapter_source:match ('trans%-?(.+)');		-- when no chapter, get matching name from trans-&lt;param&gt;
			utilities.set_message ('err_trans_missing_title', {chapter_source});
		end
	end

	return chapter;
end


--[[----------------&lt; H A S _ I N V I S I B L E _ C H A R S &gt;-------------------

This function searches a parameter's value for non-printable or invisible characters.
The search stops at the first match.

This function will detect the visible replacement character when it is part of the Wikisource.

Detects but ignores nowiki and math stripmarkers.  Also detects other named stripmarkers
(gallery, math, pre, ref) and identifies them with a slightly different error message.
See also coins_cleanup().

Output of this function is an error message that identifies the character or the
Unicode group, or the stripmarker that was detected along with its position (or,
for multi-byte characters, the position of its first byte) in the parameter value.

]]

local function has_invisible_chars (param, v)
	local position = '';														-- position of invisible char or starting position of stripmarker
	local capture;																-- used by stripmarker detection to hold name of the stripmarker
	local stripmarker;															-- boolean set true when a stripmarker is found

	capture = string.match (v, '[%w%p ]*');										-- test for values that are simple ASCII text and bypass other tests if true
	if capture == v then														-- if same there are no Unicode characters
		return;
	end

	for _, invisible_char in ipairs (cfg.invisible_chars) do
		local char_name = invisible_char[1];									-- the character or group name
		local pattern = invisible_char[2];										-- the pattern used to find it
		position, _, capture = mw.ustring.find (v, pattern);					-- see if the parameter value contains characters that match the pattern
		
		if position and (cfg.invisible_defs.zwj == capture) then				-- if we found a zero-width joiner character
			if mw.ustring.find (v, cfg.indic_script) then						-- it's ok if one of the Indic scripts
				position = nil;													-- unset position
			elseif cfg.emoji_t[mw.ustring.codepoint (v, position+1)] then			-- is zwj followed by a character listed in emoji{}?
				position = nil;													-- unset position
			end
		end
		
		if position then
			if 'nowiki' == capture or 'math' == capture or						-- nowiki and math stripmarkers (not an error condition)
				('templatestyles' == capture and utilities.in_array (param, {'id', 'quote'})) then	-- templatestyles stripmarker allowed in these parameters
					stripmarker = true;											-- set a flag
			elseif true == stripmarker and cfg.invisible_defs.del == capture then	-- because stripmakers begin and end with the delete char, assume that we've found one end of a stripmarker
				position = nil;													-- unset
			else
				local err_msg;
				if capture and not (cfg.invisible_defs.del == capture or cfg.invisible_defs.zwj == capture) then
					err_msg = capture .. ' ' .. char_name;
				else
					err_msg = char_name .. ' ' .. 'character';
				end

				utilities.set_message ('err_invisible_char', {err_msg, utilities.wrap_style ('parameter', param), position});	-- add error message
				return;															-- and done with this parameter
			end
		end
	end
end


--[[-------------------&lt; A R G U M E N T _ W R A P P E R &gt;----------------------

Argument wrapper.  This function provides support for argument mapping defined
in the configuration file so that multiple names can be transparently aliased to
single internal variable.

]]

local function argument_wrapper ( args )
	local origin = {};
	
	return setmetatable({
		ORIGIN = function ( self, k )
			local dummy = self[k];												-- force the variable to be loaded.
			return origin[k];
		end
	},
	{
		__index = function ( tbl, k )
			if origin[k] ~= nil then
				return nil;
			end
			
			local args, list, v = args, cfg.aliases[k];
			
			if type( list ) == 'table' then
				v, origin[k] = utilities.select_one ( args, list, 'err_redundant_parameters' );
				if origin[k] == nil then
					origin[k] = '';												-- Empty string, not nil
				end
			elseif list ~= nil then
				v, origin[k] = args[list], list;
			else
				-- maybe let through instead of raising an error?
				-- v, origin[k] = args[k], k;
				error( cfg.messages['unknown_argument_map'] .. ': ' .. k);
			end
			
			-- Empty strings, not nil;
			if v == nil then
				v = '';
				origin[k] = '';
			end
			
			tbl = rawset( tbl, k, v );
			return v;
		end,
	});
end


--[[--------------------------&lt; N O W R A P _ D A T E &gt;-------------------------

When date is YYYY-MM-DD format wrap in nowrap span: &lt;span ...&gt;YYYY-MM-DD&lt;/span&gt;.
When date is DD MMMM YYYY or is MMMM DD, YYYY then wrap in nowrap span:
&lt;span ...&gt;DD MMMM&lt;/span&gt; YYYY or &lt;span ...&gt;MMMM DD,&lt;/span&gt; YYYY

DOES NOT yet support MMMM YYYY or any of the date ranges.

]]

local function nowrap_date (date)
	local cap = '';
	local cap2 = '';

	if date:match("^%d%d%d%d%-%d%d%-%d%d$") then
		date = utilities.substitute (cfg.presentation['nowrap1'], date);
	
	elseif date:match("^%a+%s*%d%d?,%s+%d%d%d%d$") or date:match ("^%d%d?%s*%a+%s+%d%d%d%d$") then
		cap, cap2 = string.match (date, "^(.*)%s+(%d%d%d%d)$");
		date = utilities.substitute (cfg.presentation['nowrap2'], {cap, cap2});
	end
	
	return date;
end


--[[--------------------------&lt; S E T _ T I T L E T Y P E &gt;---------------------

This function sets default title types (equivalent to the citation including
|type=&lt;default value&gt;) for those templates that have defaults. Also handles the
special case where it is desirable to omit the title type from the rendered citation
(|type=none).

]]

local function set_titletype (cite_class, title_type)
	if utilities.is_set (title_type) then
		if 'none' == cfg.keywords_xlate[title_type] then
			title_type = '';													-- if |type=none then type parameter not displayed
		end
		return title_type;														-- if |type= has been set to any other value use that value
	end

	return cfg.title_types [cite_class] or '';									-- set template's default title type; else empty string for concatenation
end


--[[--------------------------&lt; S A F E _ J O I N &gt;-----------------------------

Joins a sequence of strings together while checking for duplicate separation characters.

]]

local function safe_join( tbl, duplicate_char )
	local f = {};																-- create a function table appropriate to type of 'duplicate character'
		if 1 == #duplicate_char then											-- for single byte ASCII characters use the string library functions
			f.gsub = string.gsub
			f.match = string.match
			f.sub = string.sub
		else																	-- for multi-byte characters use the ustring library functions
			f.gsub = mw.ustring.gsub
			f.match = mw.ustring.match
			f.sub = mw.ustring.sub
		end

	local str = '';																-- the output string
	local comp = '';															-- what does 'comp' mean?
	local end_chr = '';
	local trim;
	for _, value in ipairs( tbl ) do
		if value == nil then value = ''; end
		
		if str == '' then														-- if output string is empty
			str = value;														-- assign value to it (first time through the loop)
		elseif value ~= '' then
			if value:sub(1, 1) == '&lt;' then										-- special case of values enclosed in spans and other markup.
				comp = value:gsub( "%b&lt;&gt;", "" );								-- remove HTML markup (&lt;span&gt;string&lt;/span&gt; -&gt; string)
			else
				comp = value;
			end
																				-- typically duplicate_char is sepc
			if f.sub(comp, 1, 1) == duplicate_char then							-- is first character same as duplicate_char? why test first character?
																				--   Because individual string segments often (always?) begin with terminal punct for the
																				--   preceding segment: 'First element' .. 'sepc next element' .. etc.?
				trim = false;
				end_chr = f.sub(str, -1, -1);									-- get the last character of the output string
				-- str = str .. "&lt;HERE(enchr=" .. end_chr .. ")"				-- debug stuff?
				if end_chr == duplicate_char then								-- if same as separator
					str = f.sub(str, 1, -2);									-- remove it
				elseif end_chr == "'" then										-- if it might be wiki-markup
					if f.sub(str, -3, -1) == duplicate_char .. "''" then		-- if last three chars of str are sepc'' 
						str = f.sub(str, 1, -4) .. "''";						-- remove them and add back ''
					elseif  f.sub(str, -5, -1) == duplicate_char .. "]]''" then	-- if last five chars of str are sepc]]'' 
						trim = true;											-- why? why do this and next differently from previous?
					elseif f.sub(str, -4, -1) == duplicate_char .. "]''" then	-- if last four chars of str are sepc]'' 
						trim = true;											-- same question
					end
				elseif end_chr == "]" then										-- if it might be wiki-markup
					if f.sub(str, -3, -1) == duplicate_char .. "]]" then		-- if last three chars of str are sepc]] wikilink 
						trim = true;
					elseif f.sub(str, -3, -1) == duplicate_char .. '"]' then	-- if last three chars of str are sepc"] quoted external link 
						trim = true;
					elseif  f.sub(str, -2, -1) == duplicate_char .. "]" then	-- if last two chars of str are sepc] external link
						trim = true;
					elseif f.sub(str, -4, -1) == duplicate_char .. "'']" then	-- normal case when |url=something &amp; |title=Title.
						trim = true;
					end
				elseif end_chr == " " then										-- if last char of output string is a space
					if f.sub(str, -2, -1) == duplicate_char .. " " then			-- if last two chars of str are &lt;sepc&gt;&lt;space&gt;
						str = f.sub(str, 1, -3);								-- remove them both
					end
				end

				if trim then
					if value ~= comp then 										-- value does not equal comp when value contains HTML markup
						local dup2 = duplicate_char;
						if f.match(dup2, "%A" ) then dup2 = "%" .. dup2; end	-- if duplicate_char not a letter then escape it
						
						value = f.gsub(value, "(%b&lt;&gt;)" .. dup2, "%1", 1 )		-- remove duplicate_char if it follows HTML markup
					else
						value = f.sub(value, 2, -1 );							-- remove duplicate_char when it is first character
					end
				end
			end
			str = str .. value; 												-- add it to the output string
		end
	end
	return str;
end


--[[--------------------------&lt; I S _ S U F F I X &gt;-----------------------------

returns true if suffix is properly formed Jr, Sr, or ordinal in the range 1–9.
Puncutation not allowed.

]]

local function is_suffix (suffix)
	if utilities.in_array (suffix, {'Jr', 'Sr', 'Jnr', 'Snr', '1st', '2nd', '3rd'}) or suffix:match ('^%dth$') then
		return true;
	end
	return false;
end


--[[--------------------&lt; I S _ G O O D _ V A N C _ N A M E &gt;-------------------

For Vancouver style, author/editor names are supposed to be rendered in Latin
(read ASCII) characters.  When a name uses characters that contain diacritical
marks, those characters are to be converted to the corresponding Latin
character. When a name is written using a non-Latin alphabet or logogram, that
name is to be transliterated into Latin characters. The module doesn't do this
so editors may/must.

This test allows |first= and |last= names to contain any of the letters defined
in the four Unicode Latin character sets
	[http://www.unicode.org/charts/PDF/U0000.pdf C0 Controls and Basic Latin] 0041–005A, 0061–007A
	[http://www.unicode.org/charts/PDF/U0080.pdf C1 Controls and Latin-1 Supplement] 00C0–00D6, 00D8–00F6, 00F8–00FF
	[http://www.unicode.org/charts/PDF/U0100.pdf Latin Extended-A] 0100–017F
	[http://www.unicode.org/charts/PDF/U0180.pdf Latin Extended-B] 0180–01BF, 01C4–024F

|lastn= also allowed to contain hyphens, spaces, and apostrophes.
	(http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35029/)
|firstn= also allowed to contain hyphens, spaces, apostrophes, and periods

This original test:
	if nil == mw.ustring.find (last, "^[A-Za-zÀ-ÖØ-öø-ƿǄ-ɏ%-%s%']*$")
	or nil == mw.ustring.find (first, "^[A-Za-zÀ-ÖØ-öø-ƿǄ-ɏ%-%s%'%.]+[2-6%a]*$") then
was written outside of the code editor and pasted here because the code editor
gets confused between character insertion point and cursor position. The test has
been rewritten to use decimal character escape sequence for the individual bytes
of the Unicode characters so that it is not necessary to use an external editor
to maintain this code.

	\195\128-\195\150 – À-Ö (U+00C0–U+00D6 – C0 controls)
	\195\152-\195\182 – Ø-ö (U+00D8-U+00F6 – C0 controls)
	\195\184-\198\191 – ø-ƿ (U+00F8-U+01BF – C0 controls, Latin extended A &amp; B)
	\199\132-\201\143 – Ǆ-ɏ (U+01C4-U+024F – Latin extended B)

]]

local function is_good_vanc_name (last, first, suffix, position)
	if not suffix then
		if first:find ('[,%s]') then											-- when there is a space or comma, might be first name/initials + generational suffix
			first = first:match ('(.-)[,%s]+');									-- get name/initials
			suffix = first:match ('[,%s]+(.+)$');								-- get generational suffix
		end
	end
	if utilities.is_set (suffix) then
		if not is_suffix (suffix) then
			add_vanc_error (cfg.err_msg_supl.suffix, position);
			return false;														-- not a name with an appropriate suffix
		end
	end
	if nil == mw.ustring.find (last, "^[A-Za-z\195\128-\195\150\195\152-\195\182\195\184-\198\191\199\132-\201\143%-%s%']*$") or
		nil == mw.ustring.find (first, "^[A-Za-z\195\128-\195\150\195\152-\195\182\195\184-\198\191\199\132-\201\143%-%s%'%.]*$") then
			add_vanc_error (cfg.err_msg_supl['non-Latin char'], position);
			return false;														-- not a string of Latin characters; Vancouver requires Romanization
	end;
	return true;
end


--[[--------------------------&lt; R E D U C E _ T O _ I N I T I A L S &gt;------------------------------------------

Attempts to convert names to initials in support of |name-list-style=vanc.  

Names in |firstn= may be separated by spaces or hyphens, or for initials, a period.
See http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35062/.

Vancouver style requires family rank designations (Jr, II, III, etc.) to be rendered
as Jr, 2nd, 3rd, etc.  See http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35085/.
This code only accepts and understands generational suffix in the Vancouver format
because Roman numerals look like, and can be mistaken for, initials.

This function uses ustring functions because firstname initials may be any of the
Unicode Latin characters accepted by is_good_vanc_name ().

]]

local function reduce_to_initials(first, position)
	local name, suffix = mw.ustring.match(first, "^(%u+) ([%dJS][%drndth]+)$");

	if not name then															-- if not initials and a suffix
		name = mw.ustring.match(first, "^(%u+)$");								-- is it just initials?
	end

	if name then																-- if first is initials with or without suffix
		if 3 &gt; mw.ustring.len (name) then										-- if one or two initials
			if suffix then														-- if there is a suffix
				if is_suffix (suffix) then										-- is it legitimate?
					return first;												-- one or two initials and a valid suffix so nothing to do
				else
					add_vanc_error (cfg.err_msg_supl.suffix, position);			-- one or two initials with invalid suffix so error message
					return first;												-- and return first unmolested
				end
			else
				return first;													-- one or two initials without suffix; nothing to do
			end
		end
	end																			-- if here then name has 3 or more uppercase letters so treat them as a word

	local initials, names = {}, {};												-- tables to hold name parts and initials
	local i = 1;																-- counter for number of initials

	names = mw.text.split (first, '[%s,]+');									-- split into a table of names and possible suffix

	while names[i] do															-- loop through the table
		if 1 &lt; i and names[i]:match ('[%dJS][%drndth]+%.?$') then				-- if not the first name, and looks like a suffix (may have trailing dot)
			names[i] = names[i]:gsub ('%.', '');								-- remove terminal dot if present
			if is_suffix (names[i]) then										-- if a legitimate suffix
				table.insert (initials, ' ' .. names[i]);						-- add a separator space, insert at end of initials table
				break;															-- and done because suffix must fall at the end of a name
			end																	-- no error message if not a suffix; possibly because of Romanization
		end
		if 3 &gt; i then
			table.insert (initials, mw.ustring.sub(names[i], 1, 1));			-- insert the initial at end of initials table
		end
		i = i + 1;																-- bump the counter
	end
			
	return table.concat(initials)												-- Vancouver format does not include spaces.
end


--[[--------------------------&lt; I N T E R W I K I _ P R E F I X E N _ G E T &gt;----------------------------------

extract interwiki prefixen from &lt;value&gt;.  Returns two one or two values:
	false – no prefixen
	nil – prefix exists but not recognized
	project prefix, language prefix – when value has either of:
		:&lt;project&gt;:&lt;language&gt;:&lt;article&gt;
		:&lt;language&gt;:&lt;project&gt;:&lt;article&gt;
	project prefix, nil – when &lt;value&gt; has only a known single-letter prefix
	nil, language prefix – when &lt;value&gt; has only a known language prefix

accepts single-letter project prefixen: 'd' (wikidata), 's' (wikisource), and 'w' (wikipedia) prefixes; at this
writing, the other single-letter prefixen (b (wikibook), c (commons), m (meta), n (wikinews), q (wikiquote), and
v (wikiversity)) are not supported.

]]

local function interwiki_prefixen_get (value, is_link)
	if not value:find (':%l+:') then											-- if no prefix
		return false;															-- abandon; boolean here to distinguish from nil fail returns later
	end

	local prefix_patterns_linked_t = {											-- sequence of valid interwiki and inter project prefixen
		'^%[%[:([dsw]):(%l%l+):',												-- wikilinked; project and language prefixes
		'^%[%[:(%l%l+):([dsw]):',												-- wikilinked; language and project prefixes
		'^%[%[:([dsw]):',														-- wikilinked; project prefix
		'^%[%[:(%l%l+):',														-- wikilinked; language prefix
		}
		
	local prefix_patterns_unlinked_t = {										-- sequence of valid interwiki and inter project prefixen
		'^:([dsw]):(%l%l+):',													-- project and language prefixes
		'^:(%l%l+):([dsw]):',													-- language and project prefixes
		'^:([dsw]):',															-- project prefix
		'^:(%l%l+):',															-- language prefix
		}
	
	local cap1, cap2;
	for _, pattern in ipairs ((is_link and prefix_patterns_linked_t) or prefix_patterns_unlinked_t) do
		cap1, cap2 = value:match (pattern);
		if cap1 then
			break;																-- found a match so stop looking
		end
	end
	
	if cap1 and cap2 then														-- when both then :project:language: or :language:project: (both forms allowed)
		if 1 == #cap1 then														-- length == 1 then :project:language:
			if cfg.inter_wiki_map[cap2] then									-- is language prefix in the interwiki map?
				return cap1, cap2;												-- return interwiki project and interwiki language
			end
		else																	-- here when :language:project:
			if cfg.inter_wiki_map[cap1] then									-- is language prefix in the interwiki map?
				return cap2, cap1;												-- return interwiki project and interwiki language
			end
		end
		return nil;																-- unknown interwiki language
	elseif not (cap1 or cap2) then												-- both are nil?
		return nil;																-- we got something that looks like a project prefix but isn't; return fail
	elseif 1 == #cap1 then														-- here when one capture
		return cap1, nil;														-- length is 1 so return project, nil language
	else																		-- here when one capture and its length it more than 1
		if cfg.inter_wiki_map[cap1] then										-- is language prefix in the interwiki map?
			return nil, cap1;													-- return nil project, language
		end
	end
end


--[[--------------------------&lt; L I S T _ P E O P L E &gt;--------------------------

Formats a list of people (authors, contributors, editors, interviewers, translators) 

names in the list will be linked when
	|&lt;name&gt;-link= has a value
	|&lt;name&gt;-mask- does NOT have a value; masked names are presumed to have been
		rendered previously so should have been linked there

when |&lt;name&gt;-mask=0, the associated name is not rendered

]]

local function list_people (control, people, etal)
	local sep;
	local namesep;
	local format = control.format;
	local maximum = control.maximum;
	local name_list = {};

	if 'vanc' == format then													-- Vancouver-like name styling?
		sep = cfg.presentation['sep_nl_vanc'];									-- name-list separator between names is a comma
		namesep = cfg.presentation['sep_name_vanc'];							-- last/first separator is a space
	else
		sep = cfg.presentation['sep_nl'];										-- name-list separator between names is a semicolon
		namesep = cfg.presentation['sep_name'];									-- last/first separator is &lt;comma&gt;&lt;space&gt;
	end
	
	if sep:sub (-1, -1) ~= " " then sep = sep .. " " end
	if utilities.is_set (maximum) and maximum &lt; 1 then return "", 0; end		-- returned 0 is for EditorCount; not used for other names
	
	for i, person in ipairs (people) do
		if utilities.is_set (person.last) then
			local mask = person.mask;
			local one;
			local sep_one = sep;

			if utilities.is_set (maximum) and i &gt; maximum then
				etal = true;
				break;
			end
			
			if mask then
				local n = tonumber (mask);										-- convert to a number if it can be converted; nil else
				if n then
					one = 0 ~= n and string.rep("&amp;mdash;", n) or nil;			-- make a string of (n &gt; 0) mdashes, nil else, to replace name
					person.link = nil;											-- don't create link to name if name is replaces with mdash string or has been set nil
				else
					one = mask;													-- replace name with mask text (must include name-list separator)
					sep_one = " ";												-- modify name-list separator
				end
			else
				one = person.last;												-- get surname
				local first = person.first										-- get given name
				if utilities.is_set (first) then
					if ("vanc" == format) then									-- if Vancouver format
						one = one:gsub ('%.', '');								-- remove periods from surnames (http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35029/)
						if not person.corporate and is_good_vanc_name (one, first, nil, i) then		-- and name is all Latin characters; corporate authors not tested
							first = reduce_to_initials (first, i);				-- attempt to convert first name(s) to initials
						end
					end
					one = one .. namesep .. first;
				end
			end
			if utilities.is_set (person.link) then
				one = utilities.make_wikilink (person.link, one);				-- link author/editor
			end

			if one then															-- if &lt;one&gt; has a value (name, mdash replacement, or mask text replacement)
				local proj, tag = interwiki_prefixen_get (one, true);			-- get the interwiki prefixen if present

				if 'w' == proj and ('Wikipedia' == mw.site.namespaces.Project['name']) then
					proj = nil;													-- for stuff like :w:de:&lt;article&gt;, :w is unnecessary TODO: maint cat?
				end
				if proj then
					proj = ({['d'] = 'Wikidata', ['s'] = 'Wikisource', ['w'] = 'Wikipedia'})[proj];	-- :w (wikipedia) for linking from a non-wikipedia project
					if proj then 
						one = one .. utilities.wrap_style ('interproj', proj);	-- add resized leading space, brackets, static text, language name
						tag = nil;												-- unset; don't do both project and language
					end
				end
				if tag == cfg.this_wiki_code then
					tag = nil;													-- stuff like :en:&lt;article&gt; at en.wiki is pointless TODO: maint cat?
				end
				if tag then
					local lang = cfg.lang_tag_remap[tag] or cfg.mw_languages_by_tag_t[tag];
					if lang then												-- error messaging done in extract_names() where we know parameter names
						one = one .. utilities.wrap_style ('interwiki', lang);	-- add resized leading space, brackets, static text, language name
					end
				end

				table.insert (name_list, one);									-- add it to the list of names
				table.insert (name_list, sep_one);								-- add the proper name-list separator
			end
		end
	end

	local count = #name_list / 2;												-- (number of names + number of separators) divided by 2
	if 0 &lt; count then 
		if 1 &lt; count and not etal then
			if 'amp' == format then
				name_list[#name_list-2] = " &amp; ";								-- replace last separator with ampersand text
			elseif 'and' == format then
				if 2 == count then
					name_list[#name_list-2] = cfg.presentation.sep_nl_and;		-- replace last separator with 'and' text
				else
					name_list[#name_list-2] = cfg.presentation.sep_nl_end;		-- replace last separator with '(sep) and' text
				end
			end
		end
		name_list[#name_list] = nil;											-- erase the last separator
	end

	local result = table.concat (name_list);									-- construct list
	if etal and utilities.is_set (result) then									-- etal may be set by |display-authors=etal but we might not have a last-first list
		result = result .. sep .. cfg.messages['et al'];						-- we've got a last-first list and etal so add et al.
	end
	
	return result, count;														-- return name-list string and count of number of names (count used for editor names only)
end


--[[--------------------&lt; M A K E _ C I T E R E F _ I D &gt;-----------------------

Generates a CITEREF anchor ID if we have at least one name or a date.  Otherwise
returns an empty string.

namelist is one of the contributor-, author-, or editor-name lists chosen in that
order.  year is Year or anchor_year.

]]

local function make_citeref_id (namelist, year)
	local names={};							-- a table for the one to four names and year
	for i,v in ipairs (namelist) do			-- loop through the list and take up to the first four last names
		names[i] = v.last
		if i == 4 then break end			-- if four then done
	end
	table.insert (names, year);				-- add the year at the end
	local id = table.concat(names);			-- concatenate names and year for CITEREF id
	if utilities.is_set (id) then			-- if concatenation is not an empty string
		return "CITEREF" .. id;				-- add the CITEREF portion
	else
		return '';							-- return an empty string; no reason to include CITEREF id in this citation
	end
end


--[[--------------------------&lt; C I T E _ C L A S S _A T T R I B U T E _M A K E &gt;------------------------------

construct &lt;cite&gt; tag class attribute for this citation.

&lt;cite_class&gt; – config.CitationClass from calling template
&lt;mode&gt; – value from |mode= parameter

]]

local function cite_class_attribute_make (cite_class, mode)
	local class_t = {};
	table.insert (class_t, 'citation');											-- required for blue highlight
	if 'citation' ~= cite_class then
		table.insert (class_t, cite_class);										-- identify this template for user css
		table.insert (class_t, utilities.is_set (mode) and mode or 'cs1');		-- identify the citation style for user css or javascript
	else
		table.insert (class_t, utilities.is_set (mode) and mode or 'cs2');		-- identify the citation style for user css or javascript
	end
	for _, prop_key in ipairs (z.prop_keys_t) do
		table.insert (class_t, prop_key);										-- identify various properties for user css or javascript
	end

	return table.concat (class_t, ' ');											-- make a big string and done
end


--[[---------------------&lt; N A M E _ H A S _ E T A L &gt;--------------------------

Evaluates the content of name parameters (author, editor, etc.) for variations on
the theme of et al.  If found, the et al. is removed, a flag is set to true and
the function returns the modified name and the flag.

This function never sets the flag to false but returns its previous state because
it may have been set by previous passes through this function or by the associated
|display-&lt;names&gt;=etal parameter

]]

local function name_has_etal (name, etal, nocat, param)

	if utilities.is_set (name) then												-- name can be nil in which case just return
		local patterns = cfg.et_al_patterns; 									-- get patterns from configuration
		
		for _, pattern in ipairs (patterns) do									-- loop through all of the patterns
			if name:match (pattern) then										-- if this 'et al' pattern is found in name
				name = name:gsub (pattern, '');									-- remove the offending text
				etal = true;													-- set flag (may have been set previously here or by |display-&lt;names&gt;=etal)
				if not nocat then												-- no categorization for |vauthors=
					utilities.set_message ('err_etal', {param});				-- and set an error if not added
				end
			end
		end
	end

	return name, etal;
end


--[[---------------------&lt; N A M E _ I S _ N U M E R I C &gt;----------------------

Add maint cat when name parameter value does not contain letters.  Does not catch
mixed alphanumeric names so |last=A. Green (1922-1987) does not get caught in the
current version of this test but |first=(1888) is caught.

returns nothing

]]

local function name_is_numeric (name, list_name)
	if utilities.is_set (name) then
		if mw.ustring.match (name, '^[%A]+$') then								-- when name does not contain any letters
			utilities.set_message ('maint_numeric_names', cfg.special_case_translation [list_name]);	-- add a maint cat for this template
		end
	end
end


--[[-----------------&lt; N A M E _ H A S _ M U L T _ N A M E S &gt;------------------

Evaluates the content of last/surname (authors etc.) parameters for multiple names.
Multiple names are indicated if there is more than one comma or any "unescaped"
semicolons. Escaped semicolons are ones used as part of selected HTML entities.
If the condition is met, the function adds the multiple name maintenance category.

Same test for first except that commas should not appear in given names (MOS:JR says
that the generational suffix does not take a separator character).  Titles, degrees,
postnominals, affiliations, all normally comma separated don't belong in a citation.

&lt;name&gt; – name parameter value
&lt;list_name&gt; – AuthorList, EditorList, etc
&lt;limit&gt; – number of allowed commas; 1 (default) for surnames; 0 for given names

returns nothing

]]

local function name_has_mult_names (name, list_name, limit)
	local _, commas, semicolons, nbsps;
	limit = limit and limit or 1;
	if utilities.is_set (name) then
		_, commas = name:gsub (',', '');										-- count the number of commas
		_, semicolons = name:gsub (';', '');									-- count the number of semicolons
		-- nbsps probably should be its own separate count rather than merged in
		-- some way with semicolons because Lua patterns do not support the
		-- grouping operator that regex does, which means there is no way to add
		-- more entities to escape except by adding more counts with the new
		-- entities
		_, nbsps = name:gsub ('&amp;nbsp;','');										-- count nbsps
		
		-- There is exactly 1 semicolon per &amp;nbsp; entity, so subtract nbsps
		-- from semicolons to 'escape' them. If additional entities are added,
		-- they also can be subtracted.
		if limit &lt; commas or 0 &lt; (semicolons - nbsps) then
			utilities.set_message ('maint_mult_names', cfg.special_case_translation [list_name]);	-- add a maint message
		end
	end
end


--[=[-------------------------&lt; I S _ G E N E R I C &gt;----------------------------------------------------------

Compares values assigned to various parameters according to the string provided as &lt;item&gt; in the function call.
&lt;item&gt; can have on of two values:
	'generic_names' – for name-holding parameters: |last=, |first=, |editor-last=, etc
	'generic_titles' – for |title=

There are two types of generic tests.  The 'accept' tests look for a pattern that should not be rejected by the
'reject' test.  For example,
	|author=[[John Smith (author)|Smith, John]]
would be rejected by the 'author' reject test.  But piped wikilinks with 'author' disambiguation should not be
rejected so the 'accept' test prevents that from happening.  Accept tests are always performed before reject
tests.

Each of the 'accept' and 'reject' sequence tables hold tables for en.wiki (['en']) and local.wiki (['local'])
that each can hold a test sequence table  The sequence table holds, at index [1], a test pattern, and, at index
[2], a boolean control value.  The control value tells string.find() or mw.ustring.find() to do plain-text search (true)
or a pattern search (false).  The intent of all this complexity is to make these searches as fast as possible so
that we don't run out of processing time on very large articles.

Returns
	true when a reject test finds the pattern or string
	false when an accept test finds the pattern or string
	nil else

]=]

local function is_generic (item, value, wiki)
	local test_val;
	local str_lower = {															-- use string.lower() for en.wiki (['en']) and use mw.ustring.lower() or local.wiki (['local'])
		['en'] = string.lower,
		['local'] = mw.ustring.lower,
		}
	local str_find = {															-- use string.find() for en.wiki (['en']) and use mw.ustring.find() or local.wiki (['local'])
		['en'] = string.find,
		['local'] = mw.ustring.find,
		}

	local function test (val, test_t, wiki)										-- local function to do the testing; &lt;wiki&gt; selects lower() and find() functions
		val = test_t[2] and str_lower[wiki](value) or val;						-- when &lt;test_t[2]&gt; set to 'true', plaintext search using lowercase value
		return str_find[wiki] (val, test_t[1], 1, test_t[2]);					-- return nil when not found or matched
	end
		
	local test_types_t = {'accept', 'reject'};									-- test accept patterns first, then reject patterns
	local wikis_t = {'en', 'local'};											-- do tests for each of these keys; en.wiki first, local.wiki second

	for _, test_type in ipairs (test_types_t) do								-- for each test type
		for _, generic_value in pairs (cfg.special_case_translation[item][test_type]) do	-- spin through the list of generic value fragments to accept or reject
			for _, wiki in ipairs (wikis_t) do
				if generic_value[wiki] then
					if test (value, generic_value[wiki], wiki) then				-- go do the test
						return ('reject' == test_type);							-- param value rejected, return true; false else
					end
				end
			end
		end
	end
end


--[[--------------------------&lt; N A M E _ I S _ G E N E R I C &gt;------------------------------------------------

calls is_generic() to determine if &lt;name&gt; is a 'generic name' listed in cfg.generic_names; &lt;name_alias&gt; is the
parameter name used in error messaging

]]

local function name_is_generic (name, name_alias)
	if not added_generic_name_errs  and is_generic ('generic_names', name) then
		utilities.set_message ('err_generic_name', name_alias);					-- set an error message
		added_generic_name_errs = true;
	end
end


--[[--------------------------&lt; N A M E _ C H E C K S &gt;--------------------------------------------------------

This function calls various name checking functions used to validate the content of the various name-holding parameters.

]]

local function name_checks (last, first, list_name, last_alias, first_alias)
	local accept_name;

	if utilities.is_set (last) then
		last, accept_name = utilities.has_accept_as_written (last);				-- remove accept-this-as-written markup when it wraps all of &lt;last&gt;

		if not accept_name then													-- &lt;last&gt; not wrapped in accept-as-written markup
			name_has_mult_names (last, list_name);								-- check for multiple names in the parameter
			name_is_numeric (last, list_name);									-- check for names that are composed of digits and punctuation
			name_is_generic (last, last_alias);									-- check for names found in the generic names list
		end
	end

	if utilities.is_set (first) then
		first, accept_name = utilities.has_accept_as_written (first);			-- remove accept-this-as-written markup when it wraps all of &lt;first&gt;

		if not accept_name then													-- &lt;first&gt; not wrapped in accept-as-written markup
			name_has_mult_names (first, list_name, 0);							-- check for multiple names in the parameter; 0 is number of allowed commas in a given name
			name_is_numeric (first, list_name);									-- check for names that are composed of digits and punctuation
			name_is_generic (first, first_alias);								-- check for names found in the generic names list
		end
		local wl_type, D = utilities.is_wikilink (first);
		if 0 ~= wl_type then
			first = D;
			utilities.set_message ('err_bad_paramlink', first_alias);
		end
	end

	return last, first;															-- done
end


--[[----------------------&lt; E X T R A C T _ N A M E S &gt;-------------------------

Gets name list from the input arguments

Searches through args in sequential order to find |lastn= and |firstn= parameters
(or their aliases), and their matching link and mask parameters. Stops searching
when both |lastn= and |firstn= are not found in args after two sequential attempts:
found |last1=, |last2=, and |last3= but doesn't find |last4= and |last5= then the
search is done.

This function emits an error message when there is a |firstn= without a matching
|lastn=.  When there are 'holes' in the list of last names, |last1= and |last3=
are present but |last2= is missing, an error message is emitted. |lastn= is not
required to have a matching |firstn=.

When an author or editor parameter contains some form of 'et al.', the 'et al.'
is stripped from the parameter and a flag (etal) returned that will cause list_people()
to add the static 'et al.' text from Module:Citation/CS1/Configuration.  This keeps
'et al.' out of the template's metadata.  When this occurs, an error is emitted.

]]

local function extract_names(args, list_name)
	local names = {};															-- table of names
	local last;																	-- individual name components
	local first;
	local link;
	local mask;
	local i = 1;																-- loop counter/indexer
	local n = 1;																-- output table indexer
	local count = 0;															-- used to count the number of times we haven't found a |last= (or alias for authors, |editor-last or alias for editors)
	local etal = false;															-- return value set to true when we find some form of et al. in an author parameter

	local last_alias, first_alias, link_alias;									-- selected parameter aliases used in error messaging
	while true do
		last, last_alias = utilities.select_one ( args, cfg.aliases[list_name .. '-Last'], 'err_redundant_parameters', i );		-- search through args for name components beginning at 1
		first, first_alias = utilities.select_one ( args, cfg.aliases[list_name .. '-First'], 'err_redundant_parameters', i );
		link, link_alias = utilities.select_one ( args, cfg.aliases[list_name .. '-Link'], 'err_redundant_parameters', i );
		mask = utilities.select_one ( args, cfg.aliases[list_name .. '-Mask'], 'err_redundant_parameters', i );
	
		if last then															-- error check |lastn= alias for unknown interwiki link prefix; done here because this is where we have the parameter name
			local project, language = interwiki_prefixen_get (last, true);		-- true because we expect interwiki links in |lastn= to be wikilinked
			if nil == project and nil == language then							-- when both are nil
				utilities.set_message ('err_bad_paramlink', last_alias);		-- not known, emit an error message	-- TODO: err_bad_interwiki?
				last = utilities.remove_wiki_link (last);						-- remove wikilink markup; show display value only
			end
		end
		
		if link then															-- error check |linkn= alias for unknown interwiki link prefix
			local project, language = interwiki_prefixen_get (link, false);		-- false because wiki links in |author-linkn= is an error
			if nil == project and nil == language then							-- when both are nil
				utilities.set_message ('err_bad_paramlink', link_alias);		-- not known, emit an error message	-- TODO: err_bad_interwiki?
				link = nil;														-- unset so we don't link
				link_alias = nil;
			end
		end
		
		last, etal = name_has_etal (last, etal, false, last_alias);				-- find and remove variations on et al.
		first, etal = name_has_etal (first, etal, false, first_alias);			-- find and remove variations on et al.
		last, first = name_checks (last, first, list_name, last_alias, first_alias);						-- multiple names, extraneous annotation, etc. checks

		if first and not last then												-- if there is a firstn without a matching lastn
			local alias = first_alias:find ('given', 1, true) and 'given' or 'first';	-- get first or given form of the alias
			utilities.set_message ('err_first_missing_last', {
				first_alias,													-- param name of alias missing its mate
				first_alias:gsub (alias, {['first'] = 'last', ['given'] = 'surname'}),	-- make param name appropriate to the alias form
				});																-- add this error message
		elseif not first and not last then										-- if both firstn and lastn aren't found, are we done?
			count = count + 1;													-- number of times we haven't found last and first
			if 2 &lt;= count then													-- two missing names and we give up
				break;															-- normal exit or there is a two-name hole in the list; can't tell which
			end
		else																	-- we have last with or without a first
			local result;
			link = link_title_ok (link, link_alias, last, last_alias);			-- check for improper wiki-markup

			if first then
				link = link_title_ok (link, link_alias, first, first_alias);	-- check for improper wiki-markup
			end

			names[n] = {last = last, first = first, link = link, mask = mask, corporate = false};	-- add this name to our names list (corporate for |vauthors= only)
			n = n + 1;															-- point to next location in the names table
			if 1 == count then													-- if the previous name was missing
				utilities.set_message ('err_missing_name', {list_name:match ("(%w+)List"):lower(), i - 1});	-- add this error message
			end
			count = 0;															-- reset the counter, we're looking for two consecutive missing names
		end
		i = i + 1;																-- point to next args location
	end
	
	return names, etal;															-- all done, return our list of names and the etal flag
end


--[[--------------------------&lt; N A M E _ T A G _ G E T &gt;------------------------------------------------------

attempt to decode |language=&lt;lang_param&gt; and return language name and matching tag; nil else.

This function looks for:
	&lt;lang_param&gt; as a tag in cfg.lang_tag_remap{}
	&lt;lang_param&gt; as a name in cfg.lang_name_remap{}
	
	&lt;lang_param&gt; as a name in cfg.mw_languages_by_name_t
	&lt;lang_param&gt; as a tag in cfg.mw_languages_by_tag_t
when those fail, presume that &lt;lang_param&gt; is an IETF-like tag that MediaWiki does not recognize.  Strip all
script, region, variant, whatever subtags from &lt;lang_param&gt; to leave just a two or three character language tag
and look for the new &lt;lang_param&gt; in cfg.mw_languages_by_tag_t{}

on success, returns name (in properly capitalized form) and matching tag (in lowercase); on failure returns nil

]]

local function name_tag_get (lang_param)
	local lang_param_lc = mw.ustring.lower (lang_param);						-- use lowercase as an index into the various tables
	local name;
	local tag;

	name = cfg.lang_tag_remap[lang_param_lc];									-- assume &lt;lang_param_lc&gt; is a tag; attempt to get remapped language name 
	if name then																-- when &lt;name&gt;, &lt;lang_param&gt; is a tag for a remapped language name
		return name, lang_param_lc;												-- so return &lt;name&gt; from remap and &lt;lang_param_lc&gt;
	end

	tag = lang_param_lc:match ('^(%a%a%a?)%-.*');								-- still assuming that &lt;lang_param_lc&gt; is a tag; strip script, region, variant subtags
	name = cfg.lang_tag_remap[tag];											-- attempt to get remapped language name with language subtag only
	if name then																-- when &lt;name&gt;, &lt;tag&gt; is a tag for a remapped language name
		return name, tag;														-- so return &lt;name&gt; from remap and &lt;tag&gt;
	end

	if cfg.lang_name_remap[lang_param_lc] then									-- not a tag, assume &lt;lang_param_lc&gt; is a name; attempt to get remapped language tag 
		return cfg.lang_name_remap[lang_param_lc][1], cfg.lang_name_remap[lang_param_lc][2];	-- for this &lt;lang_param_lc&gt;, return a (possibly) new name and appropriate tag
	end

	tag = cfg.mw_languages_by_name_t[lang_param_lc];							-- assume that &lt;lang_param_lc&gt; is a language name; attempt to get its matching tag
	
	if tag then
		return cfg.mw_languages_by_tag_t[tag], tag;								-- &lt;lang_param_lc&gt; is a name so return the name from the table and &lt;tag&gt;
	end

	name = cfg.mw_languages_by_tag_t[lang_param_lc];							-- assume that &lt;lang_param_lc&gt; is a tag; attempt to get its matching language name
	
	if name then
		return name, lang_param_lc;												-- &lt;lang_param_lc&gt; is a tag so return it and &lt;name&gt;
	end
	
	tag = lang_param_lc:match ('^(%a%a%a?)%-.*');								-- is &lt;lang_param_lc&gt; an IETF-like tag that MediaWiki doesn't recognize? &lt;tag&gt; gets the language subtag; nil else

	if tag then
		name = cfg.mw_languages_by_tag_t[tag];									-- attempt to get a language name using the shortened &lt;tag&gt;
		if name then
			return name, tag;													-- &lt;lang_param_lc&gt; is an unrecognized IETF-like tag so return &lt;name&gt; and language subtag
		end
	end
end


--[[-------------------&lt; L A N G U A G E _ P A R A M E T E R &gt;------------------

Gets language name from a provided two- or three-character ISO 639 code.  If a code
is recognized by MediaWiki, use the returned name; if not, then use the value that
was provided with the language parameter.

When |language= contains a recognized language (either code or name), the page is
assigned to the category for that code: Category:Norwegian-language sources (no).
For valid three-character code languages, the page is assigned to the single category
for '639-2' codes: Category:CS1 ISO 639-2 language sources.

Languages that are the same as the local wiki are not categorized.  MediaWiki does
not recognize three-character equivalents of two-character codes: code 'ar' is
recognized but code 'ara' is not.

This function supports multiple languages in the form |language=nb, French, th
where the language names or codes are separated from each other by commas with
optional space characters.

]]

local function language_parameter (lang)
	local tag;																	-- some form of IETF-like language tag; language subtag with optional region, sript, vatiant, etc subtags
	local lang_subtag;															-- ve populates |language= with mostly unecessary region subtags the MediaWiki does not recognize; this is the base language subtag
	local name;																	-- the language name
	local language_list = {};													-- table of language names to be rendered
	local names_t = {};															-- table made from the value assigned to |language=

	local this_wiki_name = mw.language.fetchLanguageName (cfg.this_wiki_code, cfg.this_wiki_code);	-- get this wiki's language name

	names_t = mw.text.split (lang, '%s*,%s*');									-- names should be a comma separated list

	for _, lang in ipairs (names_t) do											-- reuse lang here because we don't yet know if lang is a language name or a language tag
		name, tag = name_tag_get (lang);										-- attempt to get name/tag pair for &lt;lang&gt;; &lt;name&gt; has proper capitalization; &lt;tag&gt; is lowercase

		if utilities.is_set (tag) then
			lang_subtag = tag:gsub ('^(%a%a%a?)%-.*', '%1');					-- for categorization, strip any IETF-like tags from language tag

			if cfg.this_wiki_code ~= lang_subtag then							-- when the language is not the same as this wiki's language
				if 2 == lang_subtag:len() then									-- and is a two-character tag
					utilities.add_prop_cat ('foreign-lang-source', {name, tag}, lang_subtag);		-- categorize it; tag appended to allow for multiple language categorization
				else															-- or is a recognized language (but has a three-character tag)
					utilities.add_prop_cat ('foreign-lang-source-2', {lang_subtag}, lang_subtag);			-- categorize it differently TODO: support multiple three-character tag categories per cs1|2 template?
				end
			elseif cfg.local_lang_cat_enable then								-- when the language and this wiki's language are the same and categorization is enabled
				utilities.add_prop_cat ('local-lang-source', {name, lang_subtag});		-- categorize it
			end
		else
			name = lang;														-- return whatever &lt;lang&gt; has so that we show something
			utilities.set_message ('maint_unknown_lang');						-- add maint category if not already added
		end
		
		table.insert (language_list, name);
		name = '';																-- so we can reuse it
	end
 
	name = utilities.make_sep_list (#language_list, language_list);
	if (1 == #language_list) and (lang_subtag == cfg.this_wiki_code) then		-- when only one language, find lang name in this wiki lang name; for |language=en-us, 'English' in 'American English'
		return '';																-- if one language and that language is this wiki's return an empty string (no annotation)
	end
	return (" " .. wrap_msg ('language', name));								-- otherwise wrap with '(in ...)'
	--[[ TODO: should only return blank or name rather than full list
	so we can clean up the bunched parenthetical elements Language, Type, Format
	]]
end


--[[-----------------------&lt; S E T _ C S _ S T Y L E &gt;--------------------------

Gets the default CS style configuration for the given mode.
Returns default separator and either postscript as passed in or the default.
In CS1, the default postscript and separator are '.'.
In CS2, the default postscript is the empty string and the default separator is ','.

]]

local function set_cs_style (postscript, mode)
	if utilities.is_set(postscript) then
		-- emit a maintenance message if user postscript is the default cs1 postscript
		-- we catch the opposite case for cs2 in set_style
		if mode == 'cs1' and postscript == cfg.presentation['ps_' .. mode] then
			utilities.set_message ('maint_postscript');
		end
	else
		postscript = cfg.presentation['ps_' .. mode];
	end
	return cfg.presentation['sep_' .. mode], postscript;
end


--[[--------------------------&lt; S E T _ S T Y L E &gt;-----------------------------

Sets the separator and postscript styles. Checks the |mode= first and the
#invoke CitationClass second. Removes the postscript if postscript == none.

]]

local function set_style (mode, postscript, cite_class)
	local sep;
	if 'cs2' == mode then
		sep, postscript = set_cs_style (postscript, 'cs2');
	elseif 'cs1' == mode then
		sep, postscript = set_cs_style (postscript, 'cs1');
	elseif 'citation' == cite_class	then
		sep, postscript = set_cs_style (postscript, 'cs2');
	else
		sep, postscript = set_cs_style (postscript, 'cs1');
	end

	if cfg.keywords_xlate[postscript:lower()] == 'none' then
		-- emit a maintenance message if user postscript is the default cs2 postscript
		-- we catch the opposite case for cs1 in set_cs_style
		if 'cs2' == mode or 'citation' == cite_class then
			utilities.set_message ('maint_postscript');
		end
		postscript = '';
	end
	
	return sep, postscript
end


--[=[-------------------------&lt; I S _ P D F &gt;-----------------------------------

Determines if a URL has the file extension that is one of the PDF file extensions
used by [[MediaWiki:Common.css]] when applying the PDF icon to external links.

returns true if file extension is one of the recognized extensions, else false

]=]

local function is_pdf (url)
	return url:match ('%.pdf$') or url:match ('%.PDF$') or
		url:match ('%.pdf[%?#]') or url:match ('%.PDF[%?#]') or
		url:match ('%.PDF&amp;#035') or url:match ('%.pdf&amp;#035');
end


--[[--------------------------&lt; S T Y L E _ F O R M A T &gt;-----------------------

Applies CSS style to |format=, |chapter-format=, etc.  Also emits an error message
if the format parameter does not have a matching URL parameter.  If the format parameter
is not set and the URL contains a file extension that is recognized as a PDF document
by MediaWiki's commons.css, this code will set the format parameter to (PDF) with
the appropriate styling.

]]

local function style_format (format, url, fmt_param, url_param)
	if utilities.is_set (format) then
		format = utilities.wrap_style ('format', format);						-- add leading space, parentheses, resize
		if not utilities.is_set (url) then
			utilities.set_message ('err_format_missing_url', {fmt_param, url_param});	-- add an error message
		end
	elseif is_pdf (url) then													-- format is not set so if URL is a PDF file then
		format = utilities.wrap_style ('format', 'PDF');						-- set format to PDF
	else
		format = '';															-- empty string for concatenation
	end
	return format;
end


--[[---------------------&lt; G E T _ D I S P L A Y _ N A M E S &gt;------------------

Returns a number that defines the number of names displayed for author and editor
name lists and a Boolean flag to indicate when et al. should be appended to the name list.

When the value assigned to |display-xxxxors= is a number greater than or equal to zero,
return the number and the previous state of the 'etal' flag (false by default
but may have been set to true if the name list contains some variant of the text 'et al.').

When the value assigned to |display-xxxxors= is the keyword 'etal', return a number
that is one greater than the number of authors in the list and set the 'etal' flag true.
This will cause the list_people() to display all of the names in the name list followed by 'et al.'

In all other cases, returns nil and the previous state of the 'etal' flag.

inputs:
	max: A['DisplayAuthors'] or A['DisplayEditors'], etc; a number or some flavor of etal
	count: #a or #e
	list_name: 'authors' or 'editors'
	etal: author_etal or editor_etal

This function sets an error message when |display-xxxxors= value greater than or equal to number of names but
not when &lt;max&gt; comes from {{cs1 config}} global settings.  When using global settings, &lt;param&gt; is set to the
keyword 'cs1 config' which is used to supress the normal error.  Error is suppressed because it is to be expected
that some citations in an article will have the same or fewer names that the limit specified in {{cs1 config}}.

]]

local function get_display_names (max, count, list_name, etal, param)
	if utilities.is_set (max) then
		if 'etal' == max:lower():gsub("[ '%.]", '') then						-- the :gsub() portion makes 'etal' from a variety of 'et al.' spellings and stylings
			max = count + 1;													-- number of authors + 1 so display all author name plus et al.
			etal = true;														-- overrides value set by extract_names()
		elseif max:match ('^%d+$') then											-- if is a string of numbers
			max = tonumber (max);												-- make it a number
			if (max &gt;= count) and ('cs1 config' ~= param) then					-- error when local |display-xxxxors= value greater than or equal to number of names; not an error when using global setting
				utilities.set_message ('err_disp_name', {param, max});			-- add error message
				max = nil;
			end
		else																	-- not a valid keyword or number
			utilities.set_message ('err_disp_name', {param, max});				-- add error message
			max = nil;															-- unset; as if |display-xxxxors= had not been set
		end
	end
	
	return max, etal;
end


--[[----------&lt; E X T R A _ T E X T _ I N _ P A G E _ C H E C K &gt;---------------

Adds error if |page=, |pages=, |quote-page=, |quote-pages= has what appears to be
some form of p. or pp. abbreviation in the first characters of the parameter content.

check page for extraneous p, p., pp, pp., pg, pg. at start of parameter value:
	good pattern: '^P[^%.P%l]' matches when page begins PX or P# but not Px
		      where x and X are letters and # is a digit
	bad pattern:  '^[Pp][PpGg]' matches when page begins pp, pP, Pp, PP, pg, pG, Pg, PG

]]

local function extra_text_in_page_check (val, name)
	if not val:match (cfg.vol_iss_pg_patterns.good_ppattern) then
		for _, pattern in ipairs (cfg.vol_iss_pg_patterns.bad_ppatterns) do		-- spin through the selected sequence table of patterns
			if val:match (pattern) then											-- when a match, error so
				utilities.set_message ('err_extra_text_pages', name);	 		-- add error message
				return;															-- and done
			end
		end
	end		
end


--[[--------------------------&lt; E X T R A _ T E X T _ I N _ V O L _ I S S _ C H E C K &gt;------------------------

Adds error if |volume= or |issue= has what appears to be some form of redundant 'type' indicator.

For |volume=:
	'V.', or 'Vol.' (with or without the dot) abbreviations or 'Volume' in the first characters of the parameter
	content (all case insensitive). 'V' and 'v' (without the dot) are presumed to be roman numerals so
	are allowed.

For |issue=:
	'No.', 'I.', 'Iss.' (with or without the dot) abbreviations, or 'Issue' in the first characters of the
	parameter content (all case insensitive).
	
Single character values ('v', 'i', 'n') allowed when not followed by separator character ('.', ':', '=', or
whitespace character) – param values are trimmed of whitespace by MediaWiki before delivered to the module.
	
&lt;val&gt; is |volume= or |issue= parameter value
&lt;name&gt; is |volume= or |issue= parameter name for error message
&lt;selector&gt; is 'v' for |volume=, 'i' for |issue=

sets error message on failure; returns nothing

]]

local function extra_text_in_vol_iss_check (val, name, selector)
	if not utilities.is_set (val) then
		return;
	end
	
	local patterns = 'v' == selector and cfg.vol_iss_pg_patterns.vpatterns or cfg.vol_iss_pg_patterns.ipatterns;

	local handler = 'v' == selector and 'err_extra_text_volume' or 'err_extra_text_issue';
	val = val:lower();															-- force parameter value to lower case
	for _, pattern in ipairs (patterns) do										-- spin through the selected sequence table of patterns
		if val:match (pattern) then												-- when a match, error so
			utilities.set_message (handler, name);								-- add error message
			return;																-- and done
		end
	end
end


--[=[-------------------------&lt; G E T _ V _ N A M E _ T A B L E &gt;----------------------------------------------

split apart a |vauthors= or |veditors= parameter.  This function allows for corporate names, wrapped in doubled
parentheses to also have commas; in the old version of the code, the doubled parentheses were included in the
rendered citation and in the metadata.  Individual author names may be wikilinked

	|vauthors=Jones AB, [[E. B. White|White EB]], ((Black, Brown, and Co.))

]=]

local function get_v_name_table (vparam, output_table, output_link_table)
	local name_table = mw.text.split(vparam, "%s*,%s*");						-- names are separated by commas
	local wl_type, label, link;													-- wl_type not used here; just a placeholder
	
	local i = 1;
	
	while name_table[i] do
		if name_table[i]:match ('^%(%(.*[^%)][^%)]$') then						-- first segment of corporate with one or more commas; this segment has the opening doubled parentheses
			local name = name_table[i];
			i = i + 1;															-- bump indexer to next segment
			while name_table[i] do
				name = name .. ', ' .. name_table[i];							-- concatenate with previous segments
				if name_table[i]:match ('^.*%)%)$') then						-- if this table member has the closing doubled parentheses
					break;														-- and done reassembling so
				end
				i = i + 1;														-- bump indexer
			end
			table.insert (output_table, name);									-- and add corporate name to the output table
			table.insert (output_link_table, '');								-- no wikilink
		else
			wl_type, label, link = utilities.is_wikilink (name_table[i]);		-- wl_type is: 0, no wl (text in label variable); 1, [[D]]; 2, [[L|D]]
			table.insert (output_table, label);									-- add this name
			if 1 == wl_type then
				table.insert (output_link_table, label);						-- simple wikilink [[D]]
			else
				table.insert (output_link_table, link);							-- no wikilink or [[L|D]]; add this link if there is one, else empty string
			end
		end
		i = i + 1;
	end	
	return output_table;
end


--[[--------------------------&lt; P A R S E _ V A U T H O R S _ V E D I T O R S &gt;--------------------------------

This function extracts author / editor names from |vauthors= or |veditors= and finds matching |xxxxor-maskn= and
|xxxxor-linkn= in args.  It then returns a table of assembled names just as extract_names() does.

Author / editor names in |vauthors= or |veditors= must be in Vancouver system style. Corporate or institutional names
may sometimes be required and because such names will often fail the is_good_vanc_name() and other format compliance
tests, are wrapped in doubled parentheses ((corporate name)) to suppress the format tests.

Supports generational suffixes Jr, 2nd, 3rd, 4th–6th.

This function sets the Vancouver error when a required comma is missing and when there is a space between an author's initials.

]]

local function parse_vauthors_veditors (args, vparam, list_name)
	local names = {};															-- table of names assembled from |vauthors=, |author-maskn=, |author-linkn=
	local v_name_table = {};
	local v_link_table = {};													-- when name is wikilinked, targets go in this table
	local etal = false;															-- return value set to true when we find some form of et al. vauthors parameter
	local last, first, link, mask, suffix;
	local corporate = false;

	vparam, etal = name_has_etal (vparam, etal, true);							-- find and remove variations on et al. do not categorize (do it here because et al. might have a period)
	v_name_table = get_v_name_table (vparam, v_name_table, v_link_table);		-- names are separated by commas

	for i, v_name in ipairs(v_name_table) do
		first = '';																-- set to empty string for concatenation and because it may have been set for previous author/editor
		local accept_name;
		v_name, accept_name = utilities.has_accept_as_written (v_name);			-- remove accept-this-as-written markup when it wraps all of &lt;v_name&gt;

		if accept_name then
			last = v_name;
			corporate = true;													-- flag used in list_people()
		elseif string.find(v_name, "%s") then
			if v_name:find('[;%.]') then										-- look for commonly occurring punctuation characters; 
				add_vanc_error (cfg.err_msg_supl.punctuation, i);
			end
			local lastfirstTable = {}
			lastfirstTable = mw.text.split(v_name, "%s+")
			first = table.remove(lastfirstTable);								-- removes and returns value of last element in table which should be initials or generational suffix

			if not mw.ustring.match (first, '^%u+$') then						-- mw.ustring here so that later we will catch non-Latin characters
				suffix = first;													-- not initials so assume that whatever we got is a generational suffix
				first = table.remove(lastfirstTable);							-- get what should be the initials from the table
			end
			last = table.concat(lastfirstTable, ' ')							-- returns a string that is the concatenation of all other names that are not initials and generational suffix
			if not utilities.is_set (last) then
				first = '';														-- unset
				last = v_name;													-- last empty because something wrong with first
				add_vanc_error (cfg.err_msg_supl.name, i);
			end
			if mw.ustring.match (last, '%a+%s+%u+%s+%a+') then
				add_vanc_error (cfg.err_msg_supl['missing comma'], i);			-- matches last II last; the case when a comma is missing
			end
			if mw.ustring.match (v_name, ' %u %u$') then						-- this test is in the wrong place TODO: move or replace with a more appropriate test
				add_vanc_error (cfg.err_msg_supl.initials, i);					-- matches a space between two initials
			end
		else
			last = v_name;														-- last name or single corporate name?  Doesn't support multiword corporate names? do we need this?
		end
		
		if utilities.is_set (first) then
			if not mw.ustring.match (first, "^%u?%u$") then						-- first shall contain one or two upper-case letters, nothing else
				add_vanc_error (cfg.err_msg_supl.initials, i);					-- too many initials; mixed case initials (which may be ok Romanization); hyphenated initials
			end
			is_good_vanc_name (last, first, suffix, i);							-- check first and last before restoring the suffix which may have a non-Latin digit
			if utilities.is_set (suffix) then
				first = first .. ' ' .. suffix;									-- if there was a suffix concatenate with the initials
				suffix = '';													-- unset so we don't add this suffix to all subsequent names
			end
		else
			if not corporate then
				is_good_vanc_name (last, '', nil, i);
			end
		end

		link = utilities.select_one ( args, cfg.aliases[list_name .. '-Link'], 'err_redundant_parameters', i ) or v_link_table[i];
		mask = utilities.select_one ( args, cfg.aliases[list_name .. '-Mask'], 'err_redundant_parameters', i );
		names[i] = {last = last, first = first, link = link, mask = mask, corporate = corporate};		-- add this assembled name to our names list
	end
	return names, etal;															-- all done, return our list of names
end


--[[--------------------------&lt; S E L E C T _ A U T H O R _ E D I T O R _ S O U R C E &gt;------------------------

Select one of |authors=, |authorn= / |lastn / firstn=, or |vauthors= as the source of the author name list or
select one of |editorn= / editor-lastn= / |editor-firstn= or |veditors= as the source of the editor name list.

Only one of these appropriate three will be used.  The hierarchy is: |authorn= (and aliases) highest and |authors= lowest;
|editorn= (and aliases) highest and |veditors= lowest (support for |editors= withdrawn)

When looking for |authorn= / |editorn= parameters, test |xxxxor1= and |xxxxor2= (and all of their aliases); stops after the second
test which mimicks the test used in extract_names() when looking for a hole in the author name list.  There may be a better
way to do this, I just haven't discovered what that way is.

Emits an error message when more than one xxxxor name source is provided.

In this function, vxxxxors = vauthors or veditors; xxxxors = authors as appropriate.

]]

local function select_author_editor_source (vxxxxors, xxxxors, args, list_name)
	local lastfirst = false;
	if utilities.select_one ( args, cfg.aliases[list_name .. '-Last'], 'none', 1 ) or		-- do this twice in case we have a |first1= without a |last1=; this ...
		utilities.select_one ( args, cfg.aliases[list_name .. '-First'], 'none', 1 ) or		-- ... also catches the case where |first= is used with |vauthors=
		utilities.select_one ( args, cfg.aliases[list_name .. '-Last'], 'none', 2 ) or
		utilities.select_one ( args, cfg.aliases[list_name .. '-First'], 'none', 2 ) then
			lastfirst = true;
	end

	if (utilities.is_set (vxxxxors) and true == lastfirst) or					-- these are the three error conditions
		(utilities.is_set (vxxxxors) and utilities.is_set (xxxxors)) or
		(true == lastfirst and utilities.is_set (xxxxors)) then
			local err_name;
			if 'AuthorList' == list_name then									-- figure out which name should be used in error message
				err_name = 'author';
			else
				err_name = 'editor';
			end
			utilities.set_message ('err_redundant_parameters', err_name .. '-name-list parameters');	-- add error message
	end

	if true == lastfirst then return 1 end;										-- return a number indicating which author name source to use
	if utilities.is_set (vxxxxors) then return 2 end;
	if utilities.is_set (xxxxors) then return 3 end;
	return 1;																	-- no authors so return 1; this allows missing author name test to run in case there is a first without last 
end


--[[--------------------------&lt; I S _ V A L I D _ P A R A M E T E R _ V A L U E &gt;------------------------------

This function is used to validate a parameter's assigned value for those parameters that have only a limited number
of allowable values (yes, y, true, live, dead, etc.).  When the parameter value has not been assigned a value (missing
or empty in the source template) the function returns the value specified by ret_val.  If the parameter value is one
of the list of allowed values returns the translated value; else, emits an error message and returns the value
specified by ret_val.

TODO: explain &lt;invert&gt;

]]

local function is_valid_parameter_value (value, name, possible, ret_val, invert)
	if not utilities.is_set (value) then
		return ret_val;															-- an empty parameter is ok
	end

	if (not invert and utilities.in_array (value, possible)) then				-- normal; &lt;value&gt; is in &lt;possible&gt; table
		return cfg.keywords_xlate[value];										-- return translation of parameter keyword
	elseif invert and not utilities.in_array (value, possible) then				-- invert; &lt;value&gt; is not in &lt;possible&gt; table
		return value;															-- return &lt;value&gt; as it is
	else
		utilities.set_message ('err_invalid_param_val', {name, value});			-- not an allowed value so add error message
		return ret_val;
	end
end


--[[--------------------------&lt; T E R M I N A T E _ N A M E _ L I S T &gt;----------------------------------------

This function terminates a name list (author, contributor, editor) with a separator character (sepc) and a space
when the last character is not a sepc character or when the last three characters are not sepc followed by two
closing square brackets (close of a wikilink).  When either of these is true, the name_list is terminated with a
single space character.

]]

local function terminate_name_list (name_list, sepc)
	if (string.sub (name_list, -3, -1) == sepc .. '. ') then					-- if already properly terminated
		return name_list;														-- just return the name list
	elseif (string.sub (name_list, -1, -1) == sepc) or (string.sub (name_list, -3, -1) == sepc .. ']]') then	-- if last name in list ends with sepc char
		return name_list .. " ";												-- don't add another
	else
		return name_list .. sepc .. ' ';										-- otherwise terminate the name list
	end
end


--[[-------------------------&lt; F O R M A T _ V O L U M E _ I S S U E &gt;-----------------------------------------

returns the concatenation of the formatted volume and issue (or journal article number) parameters as a single
string; or formatted volume or formatted issue, or an empty string if neither are set.

]]
	
local function format_volume_issue (volume, issue, article, cite_class, origin, sepc, lower)
	if not utilities.is_set (volume) and not utilities.is_set (issue) and not utilities.is_set (article) then
		return '';
	end

	-- same condition as in format_pages_sheets()
	local is_journal = 'journal' == cite_class or (utilities.in_array (cite_class, {'citation', 'map', 'interview'}) and 'journal' == origin);

	local is_numeric_vol = volume and (volume:match ('^[MDCLXVI]+$') or volume:match ('^%d+$'));	-- is only uppercase roman numerals or only digits?
	local is_long_vol = volume and (4 &lt; mw.ustring.len(volume));				-- is |volume= value longer than 4 characters?
	
	if volume and (not is_numeric_vol and is_long_vol) then						-- when not all digits or Roman numerals, is |volume= longer than 4 characters?
		utilities.add_prop_cat ('long-vol');									-- yes, add properties cat
	end

	if is_journal then															-- journal-style formatting
		local vol = '';

		if utilities.is_set (volume) then
			if is_numeric_vol then												-- |volume= value all digits or all uppercase Roman numerals?
				vol = utilities.substitute (cfg.presentation['vol-bold'], {sepc, volume});	-- render in bold face
			elseif is_long_vol then												-- not all digits or Roman numerals; longer than 4 characters?
				vol = utilities.substitute (cfg.messages['j-vol'], {sepc, utilities.hyphen_to_dash (volume)});	-- not bold
			else																-- four or fewer characters
				vol = utilities.substitute (cfg.presentation['vol-bold'], {sepc, utilities.hyphen_to_dash (volume)});	-- bold
			end
		end
		vol = vol .. (utilities.is_set (issue) and utilities.substitute (cfg.messages['j-issue'], issue) or '')
		vol = vol .. (utilities.is_set (article) and utilities.substitute (cfg.messages['j-article-num'], article) or '')
		return vol;
	end
	
	if 'podcast' == cite_class and utilities.is_set (issue) then
		return wrap_msg ('issue', {sepc, issue}, lower);
	end
	
	if 'conference' == cite_class and utilities.is_set (article) then			-- |article-number= supported only in journal and conference cites
		if utilities.is_set (volume) and utilities.is_set (article) then		-- both volume and article number
			return wrap_msg ('vol-art', {sepc, utilities.hyphen_to_dash (volume), article}, lower);
		elseif utilities.is_set (article) then									-- article number alone; when volume alone, handled below
			return wrap_msg ('art', {sepc, article}, lower);
		end
	end

	-- all other types of citation
	if utilities.is_set (volume) and utilities.is_set (issue) then
		return wrap_msg ('vol-no', {sepc, utilities.hyphen_to_dash (volume), issue}, lower);
	elseif utilities.is_set (volume) then
		return wrap_msg ('vol', {sepc, utilities.hyphen_to_dash (volume)}, lower);
	else
		return wrap_msg ('issue', {sepc, issue}, lower);
	end
end


--[[-------------------------&lt; F O R M A T _ P A G E S _ S H E E T S &gt;-----------------------------------------

adds static text to one of |page(s)= or |sheet(s)= values and returns it with all of the others set to empty strings.
The return order is:
	page, pages, sheet, sheets

Singular has priority over plural when both are provided.

]]

local function format_pages_sheets (page, pages, sheet, sheets, cite_class, origin, sepc, nopp, lower)
	if 'map' == cite_class then													-- only cite map supports sheet(s) as in-source locators
		if utilities.is_set (sheet) then
			if 'journal' == origin then
				return '', '', wrap_msg ('j-sheet', sheet, lower), '';
			else
				return '', '', wrap_msg ('sheet', {sepc, sheet}, lower), '';
			end
		elseif utilities.is_set (sheets) then
			if 'journal' == origin then
				return '', '', '', wrap_msg ('j-sheets', sheets, lower);
			else
				return '', '', '', wrap_msg ('sheets', {sepc, sheets}, lower);
			end
		end
	end

	local is_journal = 'journal' == cite_class or (utilities.in_array (cite_class, {'citation', 'map', 'interview'}) and 'journal' == origin);
	
	if utilities.is_set (page) then
		if is_journal then
			return utilities.substitute (cfg.messages['j-page(s)'], page), '', '', '';
		elseif not nopp then
			return utilities.substitute (cfg.messages['p-prefix'], {sepc, page}), '', '', '';
		else
			return utilities.substitute (cfg.messages['nopp'], {sepc, page}), '', '', '';
		end
	elseif utilities.is_set (pages) then
		if is_journal then
			return utilities.substitute (cfg.messages['j-page(s)'], pages), '', '', '';
		elseif tonumber(pages) ~= nil and not nopp then							-- if pages is only digits, assume a single page number
			return '', utilities.substitute (cfg.messages['p-prefix'], {sepc, pages}), '', '';
		elseif not nopp then
			return '', utilities.substitute (cfg.messages['pp-prefix'], {sepc, pages}), '', '';
		else
			return '', utilities.substitute (cfg.messages['nopp'], {sepc, pages}), '', '';
		end
	end
	
	return '', '', '', '';														-- return empty strings
end


--[[--------------------------&lt; I N S O U R C E _ L O C _ G E T &gt;----------------------------------------------

returns one of the in-source locators: page, pages, or at. 

If any of these are interwiki links to Wikisource, returns the label portion of the interwiki-link as plain text
for use in COinS.  This COinS thing is done because here we convert an interwiki-link to an external link and
add an icon span around that; get_coins_pages() doesn't know about the span.  TODO: should it?  

TODO: add support for sheet and sheets?; streamline;

TODO: make it so that this function returns only one of the three as the single in-source (the return value assigned
to a new name)?

]]

local function insource_loc_get (page, page_orig, pages, pages_orig, at)
	local ws_url, ws_label, coins_pages, L;										-- for Wikisource interwiki-links; TODO: this corrupts page metadata (span remains in place after cleanup; fix there?)

	if utilities.is_set (page) then
		if utilities.is_set (pages) or utilities.is_set (at) then
			pages = '';															-- unset the others
			at = '';
		end
		extra_text_in_page_check (page, page_orig);								-- emit error message when |page= value begins with what looks like p., pp., etc.

		ws_url, ws_label, L = wikisource_url_make (page);						-- make ws URL from |page= interwiki link; link portion L becomes tooltip label
		if ws_url then
			page = external_link (ws_url, ws_label .. '&amp;nbsp;', 'ws link in page');	-- space char after label to move icon away from in-source text; TODO: a better way to do this?
			page = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, page});
			coins_pages = ws_label;
		end
	elseif utilities.is_set (pages) then
		if utilities.is_set (at) then
			at = '';															-- unset
		end
		extra_text_in_page_check (pages, pages_orig);							-- emit error message when |page= value begins with what looks like p., pp., etc.

		ws_url, ws_label, L = wikisource_url_make (pages);						-- make ws URL from |pages= interwiki link; link portion L becomes tooltip label
		if ws_url then
			pages = external_link (ws_url, ws_label .. '&amp;nbsp;', 'ws link in pages');	-- space char after label to move icon away from in-source text; TODO: a better way to do this?
			pages = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, pages});
			coins_pages = ws_label;
		end
	elseif utilities.is_set (at) then
		ws_url, ws_label, L = wikisource_url_make (at);							-- make ws URL from |at= interwiki link; link portion L becomes tooltip label
		if ws_url then
			at = external_link (ws_url, ws_label .. '&amp;nbsp;', 'ws link in at');	-- space char after label to move icon away from in-source text; TODO: a better way to do this?
			at = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, at});
			coins_pages = ws_label;
		end
	end
	
	return page, pages, at, coins_pages;
end

--[[--------------------------&lt; I S _ U N I Q U E _ A R C H I V E _ U R L &gt;------------------------------------

add error message when |archive-url= value is same as |url= or chapter-url= (or alias...) value

]]

local function is_unique_archive_url (archive, url, c_url, source, date)
	if utilities.is_set (archive) then
		if archive == url or archive == c_url then
			utilities.set_message ('err_bad_url', {utilities.wrap_style ('parameter', source)});	-- add error message
			return '', '';														-- unset |archive-url= and |archive-date= because same as |url= or |chapter-url=
		end
	end

	return archive, date;
end


--[=[-------------------------&lt; A R C H I V E _ U R L _ C H E C K &gt;--------------------------------------------

Check archive.org URLs to make sure they at least look like they are pointing at valid archives and not to the 
save snapshot URL or to calendar pages.  When the archive URL is 'https://web.archive.org/save/' (or http://...)
archive.org saves a snapshot of the target page in the URL.  That is something that Wikipedia should not allow
unwitting readers to do.

When the archive.org URL does not have a complete timestamp, archive.org chooses a snapshot according to its own
algorithm or provides a calendar 'search' result.  [[WP:ELNO]] discourages links to search results.

This function looks at the value assigned to |archive-url= and returns empty strings for |archive-url= and
|archive-date= and an error message when:
	|archive-url= holds an archive.org save command URL
	|archive-url= is an archive.org URL that does not have a complete timestamp (YYYYMMDDhhmmss 14 digits) in the
		correct place
otherwise returns |archive-url= and |archive-date=

There are two mostly compatible archive.org URLs:
	//web.archive.org/&lt;timestamp&gt;...		-- the old form
	//web.archive.org/web/&lt;timestamp&gt;...	-- the new form

The old form does not support or map to the new form when it contains a display flag.  There are four identified flags
('id_', 'js_', 'cs_', 'im_') but since archive.org ignores others following the same form (two letters and an underscore)
we don't check for these specific flags but we do check the form.

This function supports a preview mode.  When the article is rendered in preview mode, this function may return a modified
archive URL:
	for save command errors, return undated wildcard (/*/)
	for timestamp errors when the timestamp has a wildcard, return the URL unmodified
	for timestamp errors when the timestamp does not have a wildcard, return with timestamp limited to six digits plus wildcard (/yyyymm*/)

A secondary function is to return an archive-url timestamp from those urls that have them (archive.org and
archive.today).  The timestamp is used by validation.archive_date_check() to see if the value in |archive-date=
matches the timestamp in the archive url.

]=]

local function archive_url_check (url, date)
	local err_msg = '';															-- start with the error message empty
	local path, timestamp, flag;												-- portions of the archive.org URL
	
	timestamp = url:match ('//archive.today/(%d%d%d%d%d%d%d%d%d%d%d%d%d%d)/');	-- get timestamp from archive.today urls
	if timestamp then															-- if this was an archive.today url ...
		return url, date, timestamp;											-- return ArchiveURL, ArchiveDate, and timestamp from |archive-url=, and done
	end
																				-- here for archive.org urls
	if (not url:match('//web%.archive%.org/')) and (not url:match('//liveweb%.archive%.org/')) then		-- also deprecated liveweb Wayback machine URL
		return url, date;														-- not an archive.org archive, return ArchiveURL and ArchiveDate
	end

	if url:match('//web%.archive%.org/save/') then								-- if a save command URL, we don't want to allow saving of the target page 
		err_msg = cfg.err_msg_supl.save;
		url = url:gsub ('(//web%.archive%.org)/save/', '%1/*/', 1);				-- for preview mode: modify ArchiveURL
	elseif url:match('//liveweb%.archive%.org/') then
		err_msg = cfg.err_msg_supl.liveweb;
	else
		path, timestamp, flag = url:match('//web%.archive%.org/([^%d]*)(%d+)([^/]*)/');	-- split out some of the URL parts for evaluation
		if not path then														-- malformed in some way; pattern did not match
			err_msg = cfg.err_msg_supl.timestamp;
		elseif 14 ~= timestamp:len() then										-- path and flag optional, must have 14-digit timestamp here
			err_msg = cfg.err_msg_supl.timestamp;
			if '*' ~= flag then
				local replacement = timestamp:match ('^%d%d%d%d%d%d') or timestamp:match ('^%d%d%d%d');	-- get the first 6 (YYYYMM) or first 4 digits (YYYY)
				if replacement then												-- nil if there aren't at least 4 digits (year)
					replacement = replacement .. string.rep ('0', 14 - replacement:len());	-- year or yearmo (4 or 6 digits) zero-fill to make 14-digit timestamp
					url=url:gsub ('(//web%.archive%.org/[^%d]*)%d[^/]*', '%1' .. replacement .. '*', 1)	-- for preview, modify ts to 14 digits plus splat for calendar display
				end
			end
		elseif utilities.is_set (path) and 'web/' ~= path then					-- older archive URLs do not have the extra 'web/' path element
			err_msg = cfg.err_msg_supl.path;
		elseif utilities.is_set (flag) and not utilities.is_set (path) then		-- flag not allowed with the old form URL (without the 'web/' path element)
			err_msg = cfg.err_msg_supl.flag;
		elseif utilities.is_set (flag) and not flag:match ('%a%a_') then		-- flag if present must be two alpha characters and underscore (requires 'web/' path element)
			err_msg = cfg.err_msg_supl.flag;
		else
			return url, date, timestamp;										-- return ArchiveURL, ArchiveDate, and timestamp from |archive-url=
		end
	end
																				-- if here, something not right so
	utilities.set_message ('err_archive_url', {err_msg});						-- add error message and

	if is_preview_mode then
		return url, date, timestamp;											-- preview mode so return ArchiveURL, ArchiveDate, and timestamp from |archive-url=
	else
		return '', '';															-- return empty strings for ArchiveURL and ArchiveDate
	end
end


--[[--------------------------&lt; P L A C E _ C H E C K &gt;--------------------------------------------------------

check |place=, |publication-place=, |location= to see if these params include digits.  This function added because
many editors misuse location to specify the in-source location (|page(s)= and |at= are supposed to do that)

returns the original parameter value without modification; added maint cat when parameter value contains digits

]]

local function place_check (param_val)
	if not utilities.is_set (param_val) then									-- parameter empty or omitted
		return param_val;														-- return that empty state
	end
	
	if mw.ustring.find (param_val, '%d') then									-- not empty, are there digits in the parameter value
		utilities.set_message ('maint_location');								-- yep, add maint cat
	end
	
	return param_val;															-- and done
end


--[[--------------------------&lt; I S _ A R C H I V E D _ C O P Y &gt;----------------------------------------------

compares |title= to 'Archived copy' (placeholder added by bots that can't find proper title); if matches, return true; nil else

]]

local function is_archived_copy (title)
	title = mw.ustring.lower(title);											-- switch title to lower case
	if title:find (cfg.special_case_translation.archived_copy.en) then			-- if title is 'Archived copy'
		return true;
	elseif cfg.special_case_translation.archived_copy['local'] then
		if mw.ustring.find (title, cfg.special_case_translation.archived_copy['local']) then	-- mw.ustring() because might not be Latin script
			return true;
		end
	end
end


--[[--------------------------&lt; C I T A T I O N 0 &gt;------------------------------------------------------------

This is the main function doing the majority of the citation formatting.

]]

local function citation0( config, args )
	--[[ 
	Load Input Parameters
	The argument_wrapper facilitates the mapping of multiple aliases to single internal variable.
	]]
	local A = argument_wrapper ( args );
	local i 

	-- Pick out the relevant fields from the arguments.  Different citation templates
	-- define different field names for the same underlying things.	

	local author_etal;
	local a	= {};																-- authors list from |lastn= / |firstn= pairs or |vauthors=
	local Authors;
	local NameListStyle;
		if cfg.global_cs1_config_t['NameListStyle'] then						-- global setting in {{cs1 config}} overrides local |name-list-style= parameter value; nil when empty or assigned value invalid
			NameListStyle = is_valid_parameter_value (cfg.global_cs1_config_t['NameListStyle'], 'cs1 config: name-list-style', cfg.keywords_lists['name-list-style'], '');	-- error messaging 'param' here is a hoax
		else
			NameListStyle = is_valid_parameter_value (A['NameListStyle'], A:ORIGIN('NameListStyle'), cfg.keywords_lists['name-list-style'], '');
		end

		if cfg.global_cs1_config_t['NameListStyle'] and utilities.is_set (A['NameListStyle']) then	-- when template has |name-list-style=&lt;something&gt; which global setting has overridden
			utilities.set_message ('maint_overridden_setting');					-- set a maint message
		end

	local Collaboration = A['Collaboration'];

	do																			-- to limit scope of selected
		local selected = select_author_editor_source (A['Vauthors'], A['Authors'], args, 'AuthorList');
		if 1 == selected then
			a, author_etal = extract_names (args, 'AuthorList');				-- fetch author list from |authorn= / |lastn= / |firstn=, |author-linkn=, and |author-maskn=
		elseif 2 == selected then
			NameListStyle = 'vanc';												-- override whatever |name-list-style= might be
			a, author_etal = parse_vauthors_veditors (args, A['Vauthors'], 'AuthorList');	-- fetch author list from |vauthors=, |author-linkn=, and |author-maskn=
		elseif 3 == selected then
			Authors = A['Authors'];												-- use content of |authors=
			if 'authors' == A:ORIGIN('Authors') then							-- but add a maint cat if the parameter is |authors=
				utilities.set_message ('maint_authors');						-- because use of this parameter is discouraged; what to do about the aliases is a TODO:
			end
		end
		if utilities.is_set (Collaboration) then
			author_etal = true;													-- so that |display-authors=etal not required
		end
	end

	local editor_etal;
	local e	= {};																-- editors list from |editor-lastn= / |editor-firstn= pairs or |veditors=

	do																			-- to limit scope of selected
		local selected = select_author_editor_source (A['Veditors'], nil, args, 'EditorList');	-- support for |editors= withdrawn
		if 1 == selected then
			e, editor_etal = extract_names (args, 'EditorList');				-- fetch editor list from |editorn= / |editor-lastn= / |editor-firstn=, |editor-linkn=, and |editor-maskn=
		elseif 2 == selected then
			NameListStyle = 'vanc';												-- override whatever |name-list-style= might be
			e, editor_etal = parse_vauthors_veditors (args, args.veditors, 'EditorList');	-- fetch editor list from |veditors=, |editor-linkn=, and |editor-maskn=
		end
	end
							
	local Chapter = A['Chapter'];												-- done here so that we have access to |contribution= from |chapter= aliases
	local Chapter_origin = A:ORIGIN ('Chapter');
	local Contribution;															-- because contribution is required for contributor(s)
		if 'contribution' == Chapter_origin then
			Contribution = Chapter;												-- get the name of the contribution
		end
	local c = {};																-- contributors list from |contributor-lastn= / contributor-firstn= pairs
	
	if utilities.in_array (config.CitationClass, {"book", "citation"}) and not utilities.is_set (A['Periodical']) then	-- |contributor= and |contribution= only supported in book cites
		c = extract_names (args, 'ContributorList');							-- fetch contributor list from |contributorn= / |contributor-lastn=, -firstn=, -linkn=, -maskn=
		
		if 0 &lt; #c then
			if not utilities.is_set (Contribution) then							-- |contributor= requires |contribution=
				utilities.set_message ('err_contributor_missing_required_param', 'contribution');	-- add missing contribution error message
				c = {};															-- blank the contributors' table; it is used as a flag later
			end
			if 0 == #a then														-- |contributor= requires |author=
				utilities.set_message ('err_contributor_missing_required_param', 'author');	-- add missing author error message
				c = {};															-- blank the contributors' table; it is used as a flag later
			end
		end
	else																		-- if not a book cite
		if utilities.select_one (args, cfg.aliases['ContributorList-Last'], 'err_redundant_parameters', 1 ) then	-- are there contributor name list parameters?
			utilities.set_message ('err_contributor_ignored');					-- add contributor ignored error message
		end
		Contribution = nil;														-- unset
	end

	local Title = A['Title'];
	local TitleLink = A['TitleLink'];

	local auto_select = '';														-- default is auto
	local accept_link;
	TitleLink, accept_link = utilities.has_accept_as_written (TitleLink, true);	-- test for accept-this-as-written markup
	if (not accept_link) and utilities.in_array (TitleLink, {'none', 'pmc', 'doi'}) then -- check for special keywords
		auto_select = TitleLink;												-- remember selection for later
		TitleLink = '';															-- treat as if |title-link= would have been empty
	end

	TitleLink = link_title_ok (TitleLink, A:ORIGIN ('TitleLink'), Title, 'title');	-- check for wiki-markup in |title-link= or wiki-markup in |title= when |title-link= is set

	local Section = '';															-- {{cite map}} only; preset to empty string for concatenation if not used
	if 'map' == config.CitationClass and 'section' == Chapter_origin then
		Section = A['Chapter'];													-- get |section= from |chapter= alias list; |chapter= and the other aliases not supported in {{cite map}}
		Chapter = '';															-- unset for now; will be reset later from |map= if present
	end

	local Periodical = A['Periodical'];
	local Periodical_origin = A:ORIGIN('Periodical');
	local ScriptPeriodical = A['ScriptPeriodical'];
	local ScriptPeriodical_origin = A:ORIGIN('ScriptPeriodical');
	local TransPeriodical =  A['TransPeriodical'];
	local TransPeriodical_origin =  A:ORIGIN ('TransPeriodical');
	
	if (utilities.in_array (config.CitationClass, {'book', 'encyclopaedia'}) and (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical) or utilities.is_set (ScriptPeriodical))) then
		local param;
		if utilities.is_set (Periodical) then									-- get a parameter name from one of these periodical related meta-parameters
			Periodical = nil;													-- unset because not valid {{cite book}} or {{cite encyclopedia}} parameters 
			param = Periodical_origin											-- get parameter name for error messaging
		elseif utilities.is_set (TransPeriodical) then
			TransPeriodical = nil;												-- unset because not valid {{cite book}} or {{cite encyclopedia}} parameters 
			param = TransPeriodical_origin;										-- get parameter name for error messaging
		elseif utilities.is_set (ScriptPeriodical) then
			ScriptPeriodical = nil;												-- unset because not valid {{cite book}} or {{cite encyclopedia}} parameters 
			param = ScriptPeriodical_origin;									-- get parameter name for error messaging
		end

		if utilities.is_set (param) then										-- if we found one
			utilities.set_message ('err_periodical_ignored', {param});			-- emit an error message
		end
	end

	if utilities.is_set (Periodical) then
		local i;
		Periodical, i = utilities.strip_apostrophe_markup (Periodical);			-- strip apostrophe markup so that metadata isn't contaminated 
		if i then																-- non-zero when markup was stripped so emit an error message
			utilities.set_message ('err_apostrophe_markup', {Periodical_origin});
		end
	end

	if 'mailinglist' == config.CitationClass then								-- special case for {{cite mailing list}}
		if utilities.is_set (Periodical) and utilities.is_set (A ['MailingList']) then	-- both set emit an error TODO: make a function for this and similar?
			utilities.set_message ('err_redundant_parameters', {utilities.wrap_style ('parameter', Periodical_origin) .. cfg.presentation['sep_list_pair'] .. utilities.wrap_style ('parameter', 'mailinglist')});
		end

		Periodical = A ['MailingList'];											-- error or no, set Periodical to |mailinglist= value because this template is {{cite mailing list}}
		Periodical_origin = A:ORIGIN('MailingList');
	end

	-- web and news not tested for now because of 
	-- Wikipedia:Administrators%27_noticeboard#Is_there_a_semi-automated_tool_that_could_fix_these_annoying_"Cite_Web"_errors?
	if not (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)) then	-- 'periodical' templates require periodical parameter
	--	local p = {['journal'] = 'journal', ['magazine'] = 'magazine', ['news'] = 'newspaper', ['web'] = 'website'};	-- for error message
		local p = {['journal'] = 'journal', ['magazine'] = 'magazine'};			-- for error message
		if p[config.CitationClass]  then
			utilities.set_message ('err_missing_periodical', {config.CitationClass, p[config.CitationClass]});
		end
	end
	
	local Volume;
--	local ScriptPeriodical_origin = A:ORIGIN('ScriptPeriodical');
	if 'citation' == config.CitationClass then
		if utilities.is_set (Periodical) then
			if not utilities.in_array (Periodical_origin, cfg.citation_no_volume_t) then	-- {{citation}} does not render |volume= when these parameters are used
				Volume = A['Volume'];											-- but does for all other 'periodicals'
			end
		elseif utilities.is_set (ScriptPeriodical) then
			if 'script-website' ~= ScriptPeriodical_origin then					-- {{citation}} does not render volume for |script-website=
				Volume = A['Volume'];											-- but does for all other 'periodicals'
			end
		else
			Volume = A['Volume'];												-- and does for non-'periodical' cites
		end
	elseif utilities.in_array (config.CitationClass, cfg.templates_using_volume) then	-- render |volume= for cs1 according to the configuration settings
		Volume = A['Volume'];
	end	
	extra_text_in_vol_iss_check (Volume, A:ORIGIN ('Volume'), 'v');	

	local Issue;
	if 'citation' == config.CitationClass then
		if utilities.is_set (Periodical) and utilities.in_array (Periodical_origin, cfg.citation_issue_t) then	-- {{citation}} may render |issue= when these parameters are used
			Issue = utilities.hyphen_to_dash (A['Issue']);
		end
	elseif utilities.in_array (config.CitationClass, cfg.templates_using_issue) then	-- conference &amp; map books do not support issue; {{citation}} listed here because included in settings table
		if not (utilities.in_array (config.CitationClass, {'conference', 'map', 'citation'}) and not (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical))) then
			Issue = utilities.hyphen_to_dash (A['Issue']);
		end
	end
	
	local ArticleNumber;

	if utilities.in_array (config.CitationClass, {'journal', 'conference'}) or ('citation' == config.CitationClass and utilities.is_set (Periodical) and 'journal' == Periodical_origin) then
		ArticleNumber = A['ArticleNumber'];
	end

	extra_text_in_vol_iss_check (Issue, A:ORIGIN ('Issue'), 'i');	

	local Page;
	local Pages;
	local At;
	local QuotePage;
	local QuotePages;
	if not utilities.in_array (config.CitationClass, cfg.templates_not_using_page) then		-- TODO: rewrite to emit ignored parameter error message?
		Page = A['Page'];
		Pages = utilities.hyphen_to_dash (A['Pages']);	
		At = A['At'];
		QuotePage = A['QuotePage'];
		QuotePages = utilities.hyphen_to_dash (A['QuotePages']);
	end

	local Edition = A['Edition'];
	local PublicationPlace = place_check (A['PublicationPlace'], A:ORIGIN('PublicationPlace'));
	local Place = place_check (A['Place'], A:ORIGIN('Place'));
	
	local PublisherName = A['PublisherName'];
	local PublisherName_origin = A:ORIGIN('PublisherName');
	if utilities.is_set (PublisherName) and (cfg.keywords_xlate['none'] ~= PublisherName) then
		local i = 0;
		PublisherName, i = utilities.strip_apostrophe_markup (PublisherName);	-- strip apostrophe markup so that metadata isn't contaminated; publisher is never italicized
		if i and (0 &lt; i) then													-- non-zero when markup was stripped so emit an error message
			utilities.set_message ('err_apostrophe_markup', {PublisherName_origin});
		end
	end
	
	if ('document' == config.CitationClass) and not utilities.is_set (PublisherName) then
		utilities.set_message ('err_missing_publisher', {config.CitationClass, 'publisher'});
	end

	local Newsgroup = A['Newsgroup'];											-- TODO: strip apostrophe markup?
	local Newsgroup_origin = A:ORIGIN('Newsgroup');	

	if 'newsgroup' == config.CitationClass then
		if utilities.is_set (PublisherName) and (cfg.keywords_xlate['none'] ~= PublisherName) then	-- general use parameter |publisher= not allowed in cite newsgroup
			utilities.set_message ('err_parameter_ignored', {PublisherName_origin});
		end

		PublisherName = nil;													-- ensure that this parameter is unset for the time being; will be used again after COinS
	end

	local URL = A['URL'];														-- TODO: better way to do this for URL, ChapterURL, and MapURL?
	local UrlAccess = is_valid_parameter_value (A['UrlAccess'], A:ORIGIN('UrlAccess'), cfg.keywords_lists['url-access'], nil);
	
	if not utilities.is_set (URL) and utilities.is_set (UrlAccess) then
		UrlAccess = nil;
		utilities.set_message ('err_param_access_requires_param', 'url');
	end
	
	local ChapterURL = A['ChapterURL'];
	local ChapterUrlAccess = is_valid_parameter_value (A['ChapterUrlAccess'], A:ORIGIN('ChapterUrlAccess'), cfg.keywords_lists['url-access'], nil);
	if not utilities.is_set (ChapterURL) and utilities.is_set (ChapterUrlAccess) then
		ChapterUrlAccess = nil;
		utilities.set_message ('err_param_access_requires_param', {A:ORIGIN('ChapterUrlAccess'):gsub ('%-access', '')});
	end

	local MapUrlAccess = is_valid_parameter_value (A['MapUrlAccess'], A:ORIGIN('MapUrlAccess'), cfg.keywords_lists['url-access'], nil);
	if not utilities.is_set (A['MapURL']) and utilities.is_set (MapUrlAccess) then
		MapUrlAccess = nil;
		utilities.set_message ('err_param_access_requires_param', {'map-url'});
	end

	local this_page = mw.title.getCurrentTitle();								-- also used for COinS and for language
	local no_tracking_cats = is_valid_parameter_value (A['NoTracking'], A:ORIGIN('NoTracking'), cfg.keywords_lists['yes_true_y'], nil);

	-- check this page to see if it is in one of the namespaces that cs1 is not supposed to add to the error categories
	if not utilities.is_set (no_tracking_cats) then								-- ignore if we are already not going to categorize this page
		if cfg.uncategorized_namespaces[this_page.namespace] then				-- is this page's namespace id one of the uncategorized namespace ids?
			no_tracking_cats = "true";											-- set no_tracking_cats
		end
		for _, v in ipairs (cfg.uncategorized_subpages) do						-- cycle through page name patterns
			if this_page.text:match (v) then									-- test page name against each pattern
				no_tracking_cats = "true";										-- set no_tracking_cats
				break;															-- bail out if one is found
			end
		end
	end
																				-- check for extra |page=, |pages= or |at= parameters. (also sheet and sheets while we're at it)
	utilities.select_one (args, {'page', 'p', 'pp', 'pages', 'at', 'sheet', 'sheets'}, 'err_redundant_parameters');	-- this is a dummy call simply to get the error message and category

	local coins_pages;
	
	Page, Pages, At, coins_pages = insource_loc_get (Page, A:ORIGIN('Page'), Pages, A:ORIGIN('Pages'), At);

	local NoPP = is_valid_parameter_value (A['NoPP'], A:ORIGIN('NoPP'), cfg.keywords_lists['yes_true_y'], nil);

	if utilities.is_set (PublicationPlace) and utilities.is_set (Place) then	-- both |publication-place= and |place= (|location=) allowed if different
		utilities.add_prop_cat ('location-test');								-- add property cat to evaluate how often PublicationPlace and Place are used together
		if PublicationPlace == Place then
			Place = '';															-- unset; don't need both if they are the same
		end
	elseif not utilities.is_set (PublicationPlace) and utilities.is_set (Place) then	-- when only |place= (|location=) is set ...
		PublicationPlace = Place;												-- promote |place= (|location=) to |publication-place
	end

	if PublicationPlace == Place then Place = ''; end							-- don't need both if they are the same

	local URL_origin = A:ORIGIN('URL');											-- get name of parameter that holds URL
	local ChapterURL_origin = A:ORIGIN('ChapterURL');							-- get name of parameter that holds ChapterURL
	local ScriptChapter = A['ScriptChapter'];
	local ScriptChapter_origin = A:ORIGIN ('ScriptChapter');
	local Format = A['Format'];
	local ChapterFormat = A['ChapterFormat'];
	local TransChapter = A['TransChapter'];
	local TransChapter_origin = A:ORIGIN ('TransChapter');
	local TransTitle = A['TransTitle'];
	local ScriptTitle = A['ScriptTitle'];
	
	--[[
	Parameter remapping for cite encyclopedia:
	When the citation has these parameters:
		|encyclopedia= and |title= then map |title= to |article= and |encyclopedia= to |title= for rendering
		|encyclopedia= and |article= then map |encyclopedia= to |title= for rendering

		|trans-title= maps to |trans-chapter= when |title= is re-mapped
		|url= maps to |chapter-url= when |title= is remapped
	
	All other combinations of |encyclopedia=, |title=, and |article= are not modified
	
	]]

	local Encyclopedia = A['Encyclopedia'];										-- used as a flag by this module and by ~/COinS

	if utilities.is_set (Encyclopedia) then										-- emit error message when Encyclopedia set but template is other than {{cite encyclopedia}} or {{citation}}
		if 'encyclopaedia' ~= config.CitationClass and 'citation' ~= config.CitationClass then
			utilities.set_message ('err_parameter_ignored', {A:ORIGIN ('Encyclopedia')});
			Encyclopedia = nil;													-- unset because not supported by this template
		end
	end

	if ('encyclopaedia' == config.CitationClass) or ('citation' == config.CitationClass and utilities.is_set (Encyclopedia)) then
		if utilities.is_set (Periodical) and utilities.is_set (Encyclopedia) then	-- when both parameters set emit an error message; {{citation}} only; Periodical not allowed in {{cite encyclopedia}}
			utilities.set_message ('err_periodical_ignored', {Periodical_origin});
		end

		if utilities.is_set (Encyclopedia) then
			Periodical = Encyclopedia;											-- error or no, set Periodical to Encyclopedia for rendering; {{citation}} could (not legitimately) have both; use Encyclopedia
			Periodical_origin = A:ORIGIN ('Encyclopedia');

			if utilities.is_set (Title) or utilities.is_set (ScriptTitle) then
				if not utilities.is_set (Chapter) then
					Chapter = Title;											-- |encyclopedia= and |title= are set so map |title= to |article= and |encyclopedia= to |title= for rendering
					ScriptChapter = ScriptTitle;
					ScriptChapter_origin = A:ORIGIN('ScriptTitle')
					TransChapter = TransTitle;
					ChapterURL = URL;
					ChapterURL_origin = URL_origin;

					ChapterUrlAccess = UrlAccess;

					if not utilities.is_set (ChapterURL) and utilities.is_set (TitleLink) then
						Chapter = utilities.make_wikilink (TitleLink, Chapter);
					end
					Title = Periodical;
					ChapterFormat = Format;
					Periodical = '';											-- redundant so unset
					TransTitle = '';
					URL = '';
					Format = '';
					TitleLink = '';
					ScriptTitle = '';
				end
			elseif utilities.is_set (Chapter) or utilities.is_set (ScriptChapter) then								-- |title= not set
				Title = Periodical;												-- |encyclopedia= set and |article= set so map |encyclopedia= to |title= for rendering
				Periodical = '';												-- redundant so unset
			end
		end
	end

	-- special case for cite techreport.
	local ID = A['ID'];
	if (config.CitationClass == "techreport") then								-- special case for cite techreport
		if utilities.is_set (A['Number']) then									-- cite techreport uses 'number', which other citations alias to 'issue'
			if not utilities.is_set (ID) then									-- can we use ID for the "number"?
				ID = A['Number'];												-- yes, use it
			else																-- ID has a value so emit error message
				utilities.set_message ('err_redundant_parameters', {utilities.wrap_style ('parameter', 'id') .. cfg.presentation['sep_list_pair'] .. utilities.wrap_style ('parameter', 'number')});
			end
		end	
	end

	-- Account for the oddity that is {{cite conference}}, before generation of COinS data.
	local ChapterLink -- = A['ChapterLink'];									-- deprecated as a parameter but still used internally by cite episode
	local Conference = A['Conference'];
	local BookTitle = A['BookTitle'];
	local TransTitle_origin = A:ORIGIN ('TransTitle');
	if 'conference' == config.CitationClass then
		if utilities.is_set (BookTitle) then
			Chapter = Title;
			Chapter_origin = 'title';
	--		ChapterLink = TitleLink;											-- |chapter-link= is deprecated
			ChapterURL = URL;
			ChapterUrlAccess = UrlAccess;
			ChapterURL_origin = URL_origin;
			URL_origin = '';
			ChapterFormat = Format;
			TransChapter = TransTitle;
			TransChapter_origin = TransTitle_origin;
			Title = BookTitle;
			Format = '';
	--		TitleLink = '';
			TransTitle = '';
			URL = '';
		end
	elseif 'speech' ~= config.CitationClass then
		Conference = '';														-- not cite conference or cite speech so make sure this is empty string
	end
	
	-- CS1/2 mode
	local Mode;
		if cfg.global_cs1_config_t['Mode'] then									-- global setting in {{cs1 config}} overrides local |mode= parameter value; nil when empty or assigned value invalid
			Mode = is_valid_parameter_value (cfg.global_cs1_config_t['Mode'], 'cs1 config: mode', cfg.keywords_lists['mode'], '');	-- error messaging 'param' here is a hoax
		else
			Mode = is_valid_parameter_value (A['Mode'], A:ORIGIN('Mode'), cfg.keywords_lists['mode'], '');
		end

		if cfg.global_cs1_config_t['Mode'] and utilities.is_set (A['Mode']) then	-- when template has |mode=&lt;something&gt; which global setting has overridden
			utilities.set_message ('maint_overridden_setting');					-- set a maint message
		end

	-- separator character and postscript
	local sepc, PostScript = set_style (Mode:lower(), A['PostScript'], config.CitationClass);
	-- controls capitalization of certain static text
	local use_lowercase = ( sepc == ',' );
	
	-- cite map oddities
	local Cartography = "";
	local Scale = "";
	local Sheet = A['Sheet'] or '';
	local Sheets = A['Sheets'] or '';
	if config.CitationClass == "map" then
		if utilities.is_set (Chapter) then										--TODO: make a function for this and similar?
			utilities.set_message ('err_redundant_parameters', {utilities.wrap_style ('parameter', 'map') .. cfg.presentation['sep_list_pair'] .. utilities.wrap_style ('parameter', Chapter_origin)});	-- add error message
		end
		Chapter = A['Map'];
		Chapter_origin = A:ORIGIN('Map');
		ChapterURL = A['MapURL'];
		ChapterURL_origin = A:ORIGIN('MapURL');
		TransChapter = A['TransMap'];
		ScriptChapter = A['ScriptMap']
		ScriptChapter_origin = A:ORIGIN('ScriptMap')

		ChapterUrlAccess = MapUrlAccess;
		ChapterFormat = A['MapFormat'];

		Cartography = A['Cartography'];
		if utilities.is_set ( Cartography ) then
			Cartography = sepc .. " " .. wrap_msg ('cartography', Cartography, use_lowercase);
		end		
		Scale = A['Scale'];
		if utilities.is_set ( Scale ) then
			Scale = sepc .. " " .. Scale;
		end
	end

	-- Account for the oddities that are {{cite episode}} and {{cite serial}}, before generation of COinS data.
	local Series = A['Series'];
	if 'episode' == config.CitationClass or 'serial' == config.CitationClass then
		local SeriesLink = A['SeriesLink'];

		SeriesLink = link_title_ok (SeriesLink, A:ORIGIN ('SeriesLink'), Series, 'series');	-- check for wiki-markup in |series-link= or wiki-markup in |series= when |series-link= is set

		local Network = A['Network'];
		local Station = A['Station'];
		local s, n = {}, {};
																				-- do common parameters first
		if utilities.is_set (Network) then table.insert(n, Network); end
		if utilities.is_set (Station) then table.insert(n, Station); end
		ID = table.concat(n, sepc .. ' ');
		
		if 'episode' == config.CitationClass then								-- handle the oddities that are strictly {{cite episode}}
			local Season = A['Season'];
			local SeriesNumber = A['SeriesNumber'];

			if utilities.is_set (Season) and utilities.is_set (SeriesNumber) then	-- these are mutually exclusive so if both are set TODO: make a function for this and similar?
				utilities.set_message ('err_redundant_parameters', {utilities.wrap_style ('parameter', 'season') .. cfg.presentation['sep_list_pair'] .. utilities.wrap_style ('parameter', 'seriesno')});		-- add error message
				SeriesNumber = '';												-- unset; prefer |season= over |seriesno=
			end
																				-- assemble a table of parts concatenated later into Series
			if utilities.is_set (Season) then table.insert(s, wrap_msg ('season', Season, use_lowercase)); end
			if utilities.is_set (SeriesNumber) then table.insert(s, wrap_msg ('seriesnum', SeriesNumber, use_lowercase)); end
			if utilities.is_set (Issue) then table.insert(s, wrap_msg ('episode', Issue, use_lowercase)); end
			Issue = '';															-- unset because this is not a unique parameter
	
			Chapter = Title;													-- promote title parameters to chapter
			ScriptChapter = ScriptTitle;
			ScriptChapter_origin = A:ORIGIN('ScriptTitle');
			ChapterLink = TitleLink;											-- alias |episode-link=
			TransChapter = TransTitle;
			ChapterURL = URL;
			ChapterUrlAccess = UrlAccess;
			ChapterURL_origin = URL_origin;
			ChapterFormat = Format;

			Title = Series;														-- promote series to title
			TitleLink = SeriesLink;
			Series = table.concat(s, sepc .. ' ');								-- this is concatenation of season, seriesno, episode number

			if utilities.is_set (ChapterLink) and not utilities.is_set (ChapterURL) then	-- link but not URL
				Chapter = utilities.make_wikilink (ChapterLink, Chapter);
			elseif utilities.is_set (ChapterLink) and utilities.is_set (ChapterURL) then	-- if both are set, URL links episode;
				Series = utilities.make_wikilink (ChapterLink, Series);
			end
			URL = '';															-- unset
			TransTitle = '';
			ScriptTitle = '';
			Format = '';
			
		else																	-- now oddities that are cite serial
			Issue = '';															-- unset because this parameter no longer supported by the citation/core version of cite serial
			Chapter = A['Episode'];												-- TODO: make |episode= available to cite episode someday?
			if utilities.is_set (Series) and utilities.is_set (SeriesLink) then
				Series = utilities.make_wikilink (SeriesLink, Series);
			end
			Series = utilities.wrap_style ('italic-title', Series);				-- series is italicized
		end	
	end
	-- end of {{cite episode}} stuff

	-- handle type parameter for those CS1 citations that have default values
	local TitleType = A['TitleType'];
	local Degree = A['Degree'];
	if utilities.in_array (config.CitationClass, {'AV-media-notes', 'document', 'interview', 'mailinglist', 'map', 'podcast', 'pressrelease', 'report', 'speech', 'techreport', 'thesis'}) then
		TitleType = set_titletype (config.CitationClass, TitleType);
		if utilities.is_set (Degree) and "Thesis" == TitleType then				-- special case for cite thesis
			TitleType = Degree .. ' ' .. cfg.title_types ['thesis']:lower();
		end
	end

	if utilities.is_set (TitleType) then										-- if type parameter is specified
		TitleType = utilities.substitute ( cfg.messages['type'], TitleType);	-- display it in parentheses
	-- TODO: Hack on TitleType to fix bunched parentheses problem
	end

	-- legacy: promote PublicationDate to Date if neither Date nor Year are set.
	local Date = A['Date'];
 	local Date_origin;															-- to hold the name of parameter promoted to Date; required for date error messaging
	local PublicationDate = A['PublicationDate'];
	local Year = A['Year'];

	if not utilities.is_set (Date) then
		Date = Year;															-- promote Year to Date
		Year = nil;																-- make nil so Year as empty string isn't used for CITEREF
		if not utilities.is_set (Date) and utilities.is_set (PublicationDate) then	-- use PublicationDate when |date= and |year= are not set
			Date = PublicationDate;												-- promote PublicationDate to Date
			PublicationDate = '';												-- unset, no longer needed
			Date_origin = A:ORIGIN('PublicationDate');							-- save the name of the promoted parameter
		else
			Date_origin = A:ORIGIN('Year');										-- save the name of the promoted parameter
		end
	else
		Date_origin = A:ORIGIN('Date');											-- not a promotion; name required for error messaging
	end

	if PublicationDate == Date then PublicationDate = ''; end					-- if PublicationDate is same as Date, don't display in rendered citation

	--[[
	Go test all of the date-holding parameters for valid MOS:DATE format and make sure that dates are real dates. This must be done before we do COinS because here is where
	we get the date used in the metadata.
	
	Date validation supporting code is in Module:Citation/CS1/Date_validation
	]]

	local DF = is_valid_parameter_value (A['DF'], A:ORIGIN('DF'), cfg.keywords_lists['df'], '');
	if not utilities.is_set (DF) then
		DF = cfg.global_df;														-- local |df= if present overrides global df set by {{use xxx date}} template
	end

	local ArchiveURL;
	local ArchiveDate;
	local ArchiveFormat = A['ArchiveFormat'];
	local archive_url_timestamp;												-- timestamp from wayback machine url
	
	ArchiveURL, ArchiveDate, archive_url_timestamp = archive_url_check (A['ArchiveURL'], A['ArchiveDate'])
	ArchiveFormat = style_format (ArchiveFormat, ArchiveURL, 'archive-format', 'archive-url');
	
	ArchiveURL, ArchiveDate = is_unique_archive_url (ArchiveURL, URL, ChapterURL, A:ORIGIN('ArchiveURL'), ArchiveDate);		-- add error message when URL or ChapterURL == ArchiveURL

	local AccessDate = A['AccessDate'];
--	local LayDate = A['LayDate'];
	local COinS_date = {};														-- holds date info extracted from |date= for the COinS metadata by Module:Date verification
	local DoiBroken = A['DoiBroken'];
	local Embargo = A['Embargo'];
	local anchor_year;															-- used in the CITEREF identifier
	do	-- create defined block to contain local variables error_message, date_parameters_list, mismatch
		local error_message = '';
																				-- AirDate has been promoted to Date so not necessary to check it
		local date_parameters_list = {
			['access-date'] = {val = AccessDate, name = A:ORIGIN ('AccessDate')},
			['archive-date'] = {val = ArchiveDate, name = A:ORIGIN ('ArchiveDate')},
			['date'] = {val = Date, name = Date_origin},
			['doi-broken-date'] = {val = DoiBroken, name = A:ORIGIN ('DoiBroken')},
			['pmc-embargo-date'] = {val = Embargo, name = A:ORIGIN ('Embargo')},
--			['lay-date'] = {val = LayDate, name = A:ORIGIN ('LayDate')},
			['publication-date'] = {val = PublicationDate, name = A:ORIGIN ('PublicationDate')},
			['year'] = {val = Year, name = A:ORIGIN ('Year')},
			};

		local error_list = {};
		anchor_year, Embargo = validation.dates(date_parameters_list, COinS_date, error_list);

-- start temporary Julian / Gregorian calendar uncertainty categorization
		if COinS_date.inter_cal_cat then
			utilities.add_prop_cat ('jul-greg-uncertainty');
		end
-- end temporary Julian / Gregorian calendar uncertainty categorization

		if utilities.is_set (Year) and utilities.is_set (Date) then				-- both |date= and |year= not normally needed; 
			validation.year_date_check (Year, A:ORIGIN ('Year'), Date, A:ORIGIN ('Date'), error_list);
		end
		
		if 0 == #error_list then												-- error free dates only; 0 when error_list is empty
			local modified = false;												-- flag
			
			if utilities.is_set (DF) then										-- if we need to reformat dates
				modified = validation.reformat_dates (date_parameters_list, DF);	-- reformat to DF format, use long month names if appropriate
			end

			if true == validation.date_hyphen_to_dash (date_parameters_list) then	-- convert hyphens to dashes where appropriate
				modified = true;
				utilities.set_message ('maint_date_format');					-- hyphens were converted so add maint category
			end
			
	-- for those wikis that can and want to have English date names translated to the local language; not supported at en.wiki
			if cfg.date_name_auto_xlate_enable and validation.date_name_xlate (date_parameters_list, cfg.date_digit_auto_xlate_enable ) then
				utilities.set_message ('maint_date_auto_xlated');				-- add maint cat
				modified = true;
			end

			if modified then													-- if the date_parameters_list values were modified
				AccessDate = date_parameters_list['access-date'].val;			-- overwrite date holding parameters with modified values
				ArchiveDate = date_parameters_list['archive-date'].val;
				Date = date_parameters_list['date'].val;
				DoiBroken = date_parameters_list['doi-broken-date'].val;
--				LayDate = date_parameters_list['lay-date'].val;
				PublicationDate = date_parameters_list['publication-date'].val;
			end

			if archive_url_timestamp and utilities.is_set (ArchiveDate) then
				validation.archive_date_check (ArchiveDate, archive_url_timestamp);	-- does YYYYMMDD in archive_url_timestamp match date in ArchiveDate
			end
		else
			utilities.set_message ('err_bad_date', {utilities.make_sep_list (#error_list, error_list)});	-- add this error message
		end
	end	-- end of do

	if utilities.in_array (config.CitationClass, {'book', 'encyclopaedia'}) or	-- {{cite book}}, {{cite encyclopedia}}; TODO: {{cite conference}} and others?
		('citation' == config.CitationClass and utilities.is_set (Encyclopedia)) or			-- {{citation}} as an encylopedia citation
		('citation' == config.CitationClass and not utilities.is_set (Periodical)) then		-- {{citation}} as a book citation
			if utilities.is_set (PublicationPlace) then
				if not utilities.is_set (PublisherName) then
					local date = COinS_date.rftdate and tonumber (COinS_date.rftdate:match ('%d%d%d%d'));	-- get year portion of COinS date (because in Arabic numerals); convert string to number
					if date and (1850 &lt;= date) then								-- location has no publisher; if date is 1850 or later
						utilities.set_message ('maint_location_no_publisher');	-- add maint cat
					end
				else															-- PublisherName has a value
					if cfg.keywords_xlate['none'] == PublisherName then			-- if that value is 'none' (only for book and encyclopedia citations)
						PublisherName = '';										-- unset
					end
				end
			end
	end

	local ID_list = {};															-- sequence table of rendered identifiers
	local ID_list_coins = {};													-- table of identifiers and their values from args; key is same as cfg.id_handlers's key
	local Class = A['Class'];													-- arxiv class identifier
	
	local ID_support = {
		{A['ASINTLD'], 'ASIN', 'err_asintld_missing_asin', A:ORIGIN ('ASINTLD')},				
		{DoiBroken, 'DOI', 'err_doibroken_missing_doi', A:ORIGIN ('DoiBroken')},
		{Embargo, 'PMC', 'err_embargo_missing_pmc', A:ORIGIN ('Embargo')},
		}

	ID_list, ID_list_coins = identifiers.identifier_lists_get (args, {DoiBroken = DoiBroken, ASINTLD = A['ASINTLD'], Embargo = Embargo, Class = Class}, ID_support);

	-- Account for the oddities that are {{cite arxiv}}, {{cite biorxiv}}, {{cite citeseerx}}, {{cite medrxiv}}, {{cite ssrn}}, before generation of COinS data.
	if utilities.in_array (config.CitationClass, whitelist.preprint_template_list_t) then	-- |arxiv= or |eprint= required for cite arxiv; |biorxiv=, |citeseerx=, |medrxiv=, |ssrn= required for their templates
		if not (args[cfg.id_handlers[config.CitationClass:upper()].parameters[1]] or 		-- can't use ID_list_coins k/v table here because invalid parameters omitted
			args[cfg.id_handlers[config.CitationClass:upper()].parameters[2]]) then			-- which causes unexpected parameter missing error message
				utilities.set_message ('err_' .. config.CitationClass .. '_missing');		-- add error message
		end

		Periodical = ({['arxiv'] = 'arXiv', ['biorxiv'] = 'bioRxiv', ['citeseerx'] = 'CiteSeerX', ['medrxiv'] = 'medRxiv', ['ssrn'] = 'Social Science Research Network'})[config.CitationClass];
	end

	-- Link the title of the work if no |url= was provided, but we have a |pmc= or a |doi= with |doi-access=free

	if config.CitationClass == "journal" and not utilities.is_set (URL) and not utilities.is_set (TitleLink) and not utilities.in_array (cfg.keywords_xlate[Title], {'off', 'none'}) then -- TODO: remove 'none' once existing citations have been switched to 'off', so 'none' can be used as token for "no title" instead
		if 'none' ~= cfg.keywords_xlate[auto_select] then						-- if auto-linking not disabled
 	 		if identifiers.auto_link_urls[auto_select] then						-- manual selection
		 		URL = identifiers.auto_link_urls[auto_select];					-- set URL to be the same as identifier's external link
 				URL_origin = cfg.id_handlers[auto_select:upper()].parameters[1];	-- set URL_origin to parameter name for use in error message if citation is missing a |title=
			elseif identifiers.auto_link_urls['pmc'] then						-- auto-select PMC
				URL = identifiers.auto_link_urls['pmc'];						-- set URL to be the same as the PMC external link if not embargoed
				URL_origin = cfg.id_handlers['PMC'].parameters[1];				-- set URL_origin to parameter name for use in error message if citation is missing a |title=
			elseif identifiers.auto_link_urls['doi'] then						-- auto-select DOI
				URL = identifiers.auto_link_urls['doi'];
				URL_origin = cfg.id_handlers['DOI'].parameters[1];
			end
 	 	end

		if utilities.is_set (URL) then											-- set when using an identifier-created URL
			if utilities.is_set (AccessDate) then								-- |access-date= requires |url=; identifier-created URL is not |url=
				utilities.set_message ('err_accessdate_missing_url');			-- add an error message
				AccessDate = '';												-- unset
			end

			if utilities.is_set (ArchiveURL) then								-- |archive-url= requires |url=; identifier-created URL is not |url=
				utilities.set_message ('err_archive_missing_url');				-- add an error message
				ArchiveURL = '';												-- unset
			end
		end
	end

	-- At this point fields may be nil if they weren't specified in the template use.  We can use that fact.
	-- Test if citation has no title
	if	not utilities.is_set (Title) and not utilities.is_set (TransTitle) and not utilities.is_set (ScriptTitle) then	-- has special case for cite episode
		utilities.set_message ('err_citation_missing_title', {'episode' == config.CitationClass and 'series' or 'title'});
	end

	if utilities.in_array (cfg.keywords_xlate[Title], {'off', 'none'}) and
			utilities.in_array (config.CitationClass, {'journal', 'citation'}) and
			(utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)) and
			('journal' == Periodical_origin or 'script-journal' == ScriptPeriodical_origin) then	-- special case for journal cites
				Title = '';														-- set title to empty string
				utilities.set_message ('maint_untitled');						-- add maint cat
	end

	-- COinS metadata (see &lt;http://ocoins.info/&gt;) for automated parsing of citation information.
	-- handle the oddity that is cite encyclopedia and {{citation |encyclopedia=something}}. Here we presume that
	-- when Periodical, Title, and Chapter are all set, then Periodical is the book (encyclopedia) title, Title
	-- is the article title, and Chapter is a section within the article.  So, we remap 
	
	local coins_chapter = Chapter;												-- default assuming that remapping not required
	local coins_title = Title;													-- et tu
	if 'encyclopaedia' == config.CitationClass or ('citation' == config.CitationClass and utilities.is_set (Encyclopedia)) then
		if utilities.is_set (Chapter) and utilities.is_set (Title) and utilities.is_set (Periodical) then		-- if all are used then
			coins_chapter = Title;												-- remap
			coins_title = Periodical;
		end
	end
	local coins_author = a;														-- default for coins rft.au 
	if 0 &lt; #c then																-- but if contributor list
		coins_author = c;														-- use that instead
	end
	
	-- this is the function call to COinS()
	local OCinSoutput = metadata.COinS({
		['Periodical'] = utilities.strip_apostrophe_markup (Periodical),		-- no markup in the metadata
		['Encyclopedia'] = Encyclopedia,										-- just a flag; content ignored by ~/COinS
		['Chapter'] = metadata.make_coins_title (coins_chapter, ScriptChapter),	-- Chapter and ScriptChapter stripped of bold / italic / accept-as-written markup
		['Degree'] = Degree;													-- cite thesis only
		['Title'] = metadata.make_coins_title (coins_title, ScriptTitle),		-- Title and ScriptTitle stripped of bold / italic / accept-as-written markup
		['PublicationPlace'] = PublicationPlace,
		['Date'] = COinS_date.rftdate,											-- COinS_date.* has correctly formatted date values if Date is valid;
		['Season'] = COinS_date.rftssn,
		['Quarter'] = COinS_date.rftquarter,
		['Chron'] =  COinS_date.rftchron,
		['Series'] = Series,
		['Volume'] = Volume,
		['Issue'] = Issue,
		['ArticleNumber'] = ArticleNumber,
		['Pages'] = coins_pages or metadata.get_coins_pages (first_set ({Sheet, Sheets, Page, Pages, At, QuotePage, QuotePages}, 7)),	-- pages stripped of external links
		['Edition'] = Edition,
		['PublisherName'] = PublisherName or Newsgroup,							-- any apostrophe markup already removed from PublisherName
		['URL'] = first_set ({ChapterURL, URL}, 2),
		['Authors'] = coins_author,
		['ID_list'] = ID_list_coins,
		['RawPage'] = this_page.prefixedText,
	}, config.CitationClass);

	-- Account for the oddities that are {{cite arxiv}}, {{cite biorxiv}}, {{cite citeseerx}}, {{cite medrxiv}}, and {{cite ssrn}} AFTER generation of COinS data.
	if utilities.in_array (config.CitationClass, whitelist.preprint_template_list_t) then	-- we have set rft.jtitle in COinS to arXiv, bioRxiv, CiteSeerX, medRxiv, or ssrn now unset so it isn't displayed
		Periodical = '';														-- periodical not allowed in these templates; if article has been published, use cite journal
	end

	-- special case for cite newsgroup.  Do this after COinS because we are modifying Publishername to include some static text
	if 'newsgroup' == config.CitationClass and utilities.is_set (Newsgroup) then
		PublisherName = utilities.substitute (cfg.messages['newsgroup'], external_link( 'news:' .. Newsgroup, Newsgroup, Newsgroup_origin, nil ));
	end

	local Editors;
	local EditorCount;															-- used only for choosing {ed.) or (eds.) annotation at end of editor name-list
	local Contributors;															-- assembled contributors name list
	local contributor_etal;
	local Translators;															-- assembled translators name list
	local translator_etal;
	local t = {};																-- translators list from |translator-lastn= / translator-firstn= pairs
	t = extract_names (args, 'TranslatorList');									-- fetch translator list from |translatorn= / |translator-lastn=, -firstn=, -linkn=, -maskn=
	local Interviewers;															
	local interviewers_list = {};					
	interviewers_list = extract_names (args, 'InterviewerList');				-- process preferred interviewers parameters
	local interviewer_etal;
	
	-- Now perform various field substitutions.
	-- We also add leading spaces and surrounding markup and punctuation to the
	-- various parts of the citation, but only when they are non-nil.
	do
		local last_first_list;
		local control = { 
			format = NameListStyle,												-- empty string, '&amp;', 'amp', 'and', or 'vanc'
			maximum = nil,														-- as if display-authors or display-editors not set
			mode = Mode
		};

		do																		-- do editor name list first because the now unsupported coauthors used to modify control table
			if cfg.global_cs1_config_t['DisplayEditors'] then					-- global setting from {{cs1 config}} overrides local setting
				control.maximum , editor_etal = get_display_names (cfg.global_cs1_config_t['DisplayEditors'], #e, 'editors', editor_etal, 'cs1 config');
			else
				control.maximum , editor_etal = get_display_names (A['DisplayEditors'], #e, 'editors', editor_etal, A:ORIGIN ('DisplayEditors'));
			end

			if cfg.global_cs1_config_t['DisplayEditors'] and utilities.is_set (A['DisplayEditors']) then	-- when template has |display-editors=&lt;something&gt; which global setting has overridden
				utilities.set_message ('maint_overridden_setting');				-- set a maint message
			end

			Editors, EditorCount = list_people (control, e, editor_etal);

			if 1 == EditorCount and (true == editor_etal or 1 &lt; #e) then		-- only one editor displayed but includes etal then 
				EditorCount = 2;												-- spoof to display (eds.) annotation
			end
		end
		do																		-- now do interviewers
			if cfg.global_cs1_config_t['DisplayInterviewers'] then				-- global setting from {{cs1 config}} overrides local setting
				control.maximum, interviewer_etal = get_display_names (cfg.global_cs1_config_t['DisplayInterviewers'], #interviewers_list, 'interviewers', interviewer_etal, 'cs1 config');
			else
				control.maximum, interviewer_etal = get_display_names (A['DisplayInterviewers'], #interviewers_list, 'interviewers', interviewer_etal, A:ORIGIN ('DisplayInterviewers'));
			end

			if cfg.global_cs1_config_t['DisplayInterviewers'] and utilities.is_set (A['DisplayInterviewers']) then	-- when template has |display-interviewers=&lt;something&gt; which global setting has overridden
				utilities.set_message ('maint_overridden_setting');				-- set a maint message
			end

			Interviewers = list_people (control, interviewers_list, interviewer_etal);
		end
		do																		-- now do translators
			if cfg.global_cs1_config_t['DisplayTranslators'] then				-- global setting from {{cs1 config}} overrides local setting
				control.maximum, translator_etal = get_display_names (cfg.global_cs1_config_t['DisplayTranslators'], #t, 'translators', 'cs1 config');
			else
				control.maximum, translator_etal = get_display_names (A['DisplayTranslators'], #t, 'translators', translator_etal, A:ORIGIN ('DisplayTranslators'));
			end

			if cfg.global_cs1_config_t['DisplayTranslators'] and utilities.is_set (A['DisplayTranslators']) then	-- when template has |display-translators=&lt;something&gt; which global setting has overridden
				utilities.set_message ('maint_overridden_setting');				-- set a maint message
			end

			Translators = list_people (control, t, translator_etal);
		end
		do																		-- now do contributors
			if cfg.global_cs1_config_t['DisplayContributors'] then				-- global setting from {{cs1 config}} overrides local setting
				control.maximum, contributor_etal = get_display_names (cfg.global_cs1_config_t['DisplayContributors'], #c, 'contributors', contributor_etal, 'cs1 config');
			else
				control.maximum, contributor_etal = get_display_names (A['DisplayContributors'], #c, 'contributors', contributor_etal, A:ORIGIN ('DisplayContributors'));
			end

			if cfg.global_cs1_config_t['DisplayContributors'] and utilities.is_set (A['DisplayContributors']) then	-- when template has |display-contributors=&lt;something&gt; which global setting has overridden
				utilities.set_message ('maint_overridden_setting');				-- set a maint message
			end

			Contributors = list_people (control, c, contributor_etal);
		end
		do																		-- now do authors
			if cfg.global_cs1_config_t['DisplayAuthors'] then					-- global setting from {{cs1 config}} overrides local setting
				control.maximum, author_etal = get_display_names (cfg.global_cs1_config_t['DisplayAuthors'], #a, 'authors', author_etal, 'cs1 config');
			else
				control.maximum, author_etal = get_display_names (A['DisplayAuthors'], #a, 'authors', author_etal, A:ORIGIN ('DisplayAuthors'));
			end

			if cfg.global_cs1_config_t['DisplayAuthors'] and utilities.is_set (A['DisplayAuthors']) then	-- when template has |display-authors=&lt;something&gt; which global setting has overridden
				utilities.set_message ('maint_overridden_setting');				-- set a maint message
			end

			last_first_list = list_people (control, a, author_etal);

			if utilities.is_set (Authors) then
				Authors, author_etal = name_has_etal (Authors, author_etal, false, 'authors');	-- find and remove variations on et al.
				if author_etal then
					Authors = Authors .. ' ' .. cfg.messages['et al'];			-- add et al. to authors parameter
				end
			else
				Authors = last_first_list;										-- either an author name list or an empty string
			end
		end																		-- end of do
	
		if utilities.is_set (Authors) and utilities.is_set (Collaboration) then
			Authors = Authors .. ' (' .. Collaboration .. ')';					-- add collaboration after et al.
		end

	end

	local ConferenceFormat = A['ConferenceFormat'];
	local ConferenceURL = A['ConferenceURL'];
	ConferenceFormat = style_format (ConferenceFormat, ConferenceURL, 'conference-format', 'conference-url');
	Format = style_format (Format, URL, 'format', 'url');

	-- special case for chapter format so no error message or cat when chapter not supported
	if not (utilities.in_array (config.CitationClass, {'web', 'news', 'journal', 'magazine', 'pressrelease', 'podcast', 'newsgroup', 'arxiv', 'biorxiv', 'citeseerx', 'medrxiv', 'ssrn'}) or
		('citation' == config.CitationClass and (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)) and not utilities.is_set (Encyclopedia))) then
			ChapterFormat = style_format (ChapterFormat, ChapterURL, 'chapter-format', 'chapter-url');
	end

	if not utilities.is_set (URL) then
		if utilities.in_array (config.CitationClass, {"web", "podcast", "mailinglist"}) or		-- |url= required for cite web, cite podcast, and cite mailinglist
			('citation' == config.CitationClass and ('website' == Periodical_origin or 'script-website' == ScriptPeriodical_origin)) then	-- and required for {{citation}} with |website= or |script-website=
				utilities.set_message ('err_cite_web_url');
		end
		
		-- do we have |accessdate= without either |url= or |chapter-url=?
		if utilities.is_set (AccessDate) and not utilities.is_set (ChapterURL) then		-- ChapterURL may be set when URL is not set;
			utilities.set_message ('err_accessdate_missing_url');
			AccessDate = '';
		end
	end

	local UrlStatus = is_valid_parameter_value (A['UrlStatus'], A:ORIGIN('UrlStatus'), cfg.keywords_lists['url-status'], '');
	local OriginalURL
	local OriginalURL_origin
	local OriginalFormat
	local OriginalAccess;
	UrlStatus = UrlStatus:lower();												-- used later when assembling archived text
	if utilities.is_set ( ArchiveURL ) then
		if utilities.is_set (ChapterURL) then 									-- if chapter-url= is set apply archive url to it
			OriginalURL = ChapterURL;											-- save copy of source chapter's url for archive text
			OriginalURL_origin = ChapterURL_origin;								-- name of |chapter-url= parameter for error messages
			OriginalFormat = ChapterFormat;										-- and original |chapter-format=

			if 'live' ~= UrlStatus then
				ChapterURL = ArchiveURL											-- swap-in the archive's URL
				ChapterURL_origin = A:ORIGIN('ArchiveURL')						-- name of |archive-url= parameter for error messages
				ChapterFormat = ArchiveFormat or '';							-- swap in archive's format
				ChapterUrlAccess = nil;											-- restricted access levels do not make sense for archived URLs
			end
		elseif utilities.is_set (URL) then
			OriginalURL = URL;													-- save copy of original source URL
			OriginalURL_origin = URL_origin;									-- name of URL parameter for error messages
			OriginalFormat = Format; 											-- and original |format=
			OriginalAccess = UrlAccess;

			if 'live' ~= UrlStatus then											-- if URL set then |archive-url= applies to it
				URL = ArchiveURL												-- swap-in the archive's URL
				URL_origin = A:ORIGIN('ArchiveURL')								-- name of archive URL parameter for error messages
				Format = ArchiveFormat or '';									-- swap in archive's format
				UrlAccess = nil;												-- restricted access levels do not make sense for archived URLs
			end
		end
	elseif utilities.is_set (UrlStatus) then									-- if |url-status= is set when |archive-url= is not set
 		utilities.set_message ('maint_url_status');								-- add maint cat
	end

	if utilities.in_array (config.CitationClass, {'web', 'news', 'journal', 'magazine', 'pressrelease', 'podcast', 'newsgroup', 'arxiv', 'biorxiv', 'citeseerx', 'medrxiv', 'ssrn'}) or	-- if any of the 'periodical' cites except encyclopedia
		('citation' == config.CitationClass and (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)) and not utilities.is_set (Encyclopedia)) then
			local chap_param;
			if utilities.is_set (Chapter) then									-- get a parameter name from one of these chapter related meta-parameters
				chap_param = A:ORIGIN ('Chapter')
			elseif utilities.is_set (TransChapter) then
				chap_param = A:ORIGIN ('TransChapter')
			elseif utilities.is_set (ChapterURL) then
				chap_param = A:ORIGIN ('ChapterURL')
			elseif utilities.is_set (ScriptChapter) then
				chap_param = ScriptChapter_origin;
			else utilities.is_set (ChapterFormat)
				chap_param = A:ORIGIN ('ChapterFormat')
			end

			if utilities.is_set (chap_param) then								-- if we found one
				utilities.set_message ('err_chapter_ignored', {chap_param});	-- add error message
				Chapter = '';													-- and set them to empty string to be safe with concatenation
				TransChapter = '';
				ChapterURL = '';
				ScriptChapter = '';
				ChapterFormat = '';
			end
	else																		-- otherwise, format chapter / article title
		local no_quotes = false;												-- default assume that we will be quoting the chapter parameter value
		if utilities.is_set (Contribution) and 0 &lt; #c then						-- if this is a contribution with contributor(s)
			if utilities.in_array (Contribution:lower(), cfg.keywords_lists.contribution) then	-- and a generic contribution title
				no_quotes = true;												-- then render it unquoted
			end
		end

		Chapter = format_chapter_title (ScriptChapter, ScriptChapter_origin, Chapter, Chapter_origin, TransChapter, TransChapter_origin, ChapterURL, ChapterURL_origin, no_quotes, ChapterUrlAccess);		-- Contribution is also in Chapter
		if utilities.is_set (Chapter) then
			Chapter = Chapter .. ChapterFormat ;
			if 'map' == config.CitationClass and utilities.is_set (TitleType) then
				Chapter = Chapter .. ' ' .. TitleType;							-- map annotation here; not after title
			end
			Chapter = Chapter .. sepc .. ' ';
		elseif utilities.is_set (ChapterFormat) then							-- |chapter= not set but |chapter-format= is so ...
			Chapter = ChapterFormat .. sepc .. ' ';								-- ... ChapterFormat has error message, we want to see it
		end
	end

	-- Format main title
	local plain_title = false;
	local accept_title;
	Title, accept_title = utilities.has_accept_as_written (Title, true);		-- remove accept-this-as-written markup when it wraps all of &lt;Title&gt;
	if accept_title and ('' == Title) then										-- only support forced empty for now "(())"
		Title = cfg.messages['notitle'];										-- replace by predefined "No title" message
			-- TODO: utilities.set_message ( 'err_redundant_parameters', ...);	-- issue proper error message instead of muting	 
			ScriptTitle = '';													-- just mute for now	 
			TransTitle = '';													-- just mute for now
 		plain_title = true;														-- suppress text decoration for descriptive title
		utilities.set_message ('maint_untitled');								-- add maint cat
	end

	if not accept_title then													-- &lt;Title&gt; not wrapped in accept-as-written markup
		if '...' == Title:sub (-3) then											-- if ellipsis is the last three characters of |title=
			Title = Title:gsub ('(%.%.%.)%.+$', '%1');							-- limit the number of dots to three
		elseif not mw.ustring.find (Title, '%.%s*%a%.$') and					-- end of title is not a 'dot-(optional space-)letter-dot' initialism ...
			not mw.ustring.find (Title, '%s+%a%.$') then						-- ...and not a 'space-letter-dot' initial (''Allium canadense'' L.)
				Title = mw.ustring.gsub(Title, '%' .. sepc .. '$', '');			-- remove any trailing separator character; sepc and ms.ustring() here for languages that use multibyte separator characters
		end

		if utilities.is_set (ArchiveURL) and is_archived_copy (Title) then
			utilities.set_message ('maint_archived_copy');						-- add maintenance category before we modify the content of Title
		end

		if is_generic ('generic_titles', Title) then
			utilities.set_message ('err_generic_title');						-- set an error message
		end
	end

	if (not plain_title) and (utilities.in_array (config.CitationClass, {'web', 'news', 'journal', 'magazine', 'document', 'pressrelease', 'podcast', 'newsgroup', 'mailinglist', 'interview', 'arxiv', 'biorxiv', 'citeseerx', 'medrxiv', 'ssrn'}) or
		('citation' == config.CitationClass and (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)) and not utilities.is_set (Encyclopedia)) or
		('map' == config.CitationClass and (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical)))) then		-- special case for cite map when the map is in a periodical treat as an article
			Title = kern_quotes (Title);										-- if necessary, separate title's leading and trailing quote marks from module provided quote marks
			Title = utilities.wrap_style ('quoted-title', Title);
			Title = script_concatenate (Title, ScriptTitle, 'script-title');	-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after title is wrapped
			TransTitle = utilities.wrap_style ('trans-quoted-title', TransTitle );
	elseif plain_title or ('report' == config.CitationClass) then				-- no styling for cite report and descriptive titles (otherwise same as above)
		Title = script_concatenate (Title, ScriptTitle, 'script-title');		-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after title is wrapped
		TransTitle = utilities.wrap_style ('trans-quoted-title', TransTitle );	-- for cite report, use this form for trans-title
	else
		Title = utilities.wrap_style ('italic-title', Title);
		Title = script_concatenate (Title, ScriptTitle, 'script-title');		-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after title is wrapped
		TransTitle = utilities.wrap_style ('trans-italic-title', TransTitle);
	end

	if utilities.is_set (TransTitle) then
		if utilities.is_set (Title) then
			TransTitle = " " .. TransTitle;
		else
			utilities.set_message ('err_trans_missing_title', {'title'});
		end
	end

	if utilities.is_set (Title) then											-- TODO: is this the right place to be making Wikisource URLs?
		if utilities.is_set (TitleLink) and utilities.is_set (URL) then
			utilities.set_message ('err_wikilink_in_url');						-- set an error message because we can't have both
			TitleLink = '';														-- unset
		end
	
		if not utilities.is_set (TitleLink) and utilities.is_set (URL) then
			Title = external_link (URL, Title, URL_origin, UrlAccess) .. TransTitle .. Format;
			URL = '';															-- unset these because no longer needed
			Format = "";
		elseif utilities.is_set (TitleLink) and not utilities.is_set (URL) then
			local ws_url;
			ws_url = wikisource_url_make (TitleLink);							-- ignore ws_label return; not used here
			if ws_url then
				Title = external_link (ws_url, Title .. '&amp;nbsp;', 'ws link in title-link');	-- space char after Title to move icon away from italic text; TODO: a better way to do this?
				Title = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], TitleLink, Title});				
				Title = Title .. TransTitle;
			else
				Title = utilities.make_wikilink (TitleLink, Title) .. TransTitle;
			end
		else
			local ws_url, ws_label, L;											-- Title has italic or quote markup by the time we get here which causes is_wikilink() to return 0 (not a wikilink)
			ws_url, ws_label, L = wikisource_url_make (Title:gsub('^[\'"]*(.-)[\'"]*$', '%1'));	-- make ws URL from |title= interwiki link (strip italic or quote markup); link portion L becomes tooltip label
			if ws_url then
				Title = Title:gsub ('%b[]', ws_label);							-- replace interwiki link with ws_label to retain markup
				Title = external_link (ws_url, Title .. '&amp;nbsp;', 'ws link in title');	-- space char after Title to move icon away from italic text; TODO: a better way to do this?
				Title = utilities.substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, Title});				
				Title = Title .. TransTitle;
			else
				Title = Title .. TransTitle;
			end
		end
	else
		Title = TransTitle;
	end

	if utilities.is_set (Place) then
		Place = " " .. wrap_msg ('written', Place, use_lowercase) .. sepc .. " ";
	end

	local ConferenceURL_origin = A:ORIGIN('ConferenceURL');						-- get name of parameter that holds ConferenceURL
	if utilities.is_set (Conference) then
		if utilities.is_set (ConferenceURL) then
			Conference = external_link( ConferenceURL, Conference, ConferenceURL_origin, nil );
		end
		Conference = sepc .. " " .. Conference .. ConferenceFormat;
	elseif utilities.is_set (ConferenceURL) then
		Conference = sepc .. " " .. external_link( ConferenceURL, nil, ConferenceURL_origin, nil );
	end

	local Position = '';
	if not utilities.is_set (Position) then
		local Minutes = A['Minutes'];
		local Time = A['Time'];

		if utilities.is_set (Minutes) then
			if utilities.is_set (Time) then		--TODO: make a function for this and similar?
				utilities.set_message ('err_redundant_parameters', {utilities.wrap_style ('parameter', 'minutes') .. cfg.presentation['sep_list_pair'] .. utilities.wrap_style ('parameter', 'time')});
			end
			Position = " " .. Minutes .. " " .. cfg.messages['minutes'];
		else
			if utilities.is_set (Time) then
				local TimeCaption = A['TimeCaption']
				if not utilities.is_set (TimeCaption) then
					TimeCaption = cfg.messages['event'];
					if sepc ~= '.' then
						TimeCaption = TimeCaption:lower();
					end
				end
				Position = " " .. TimeCaption .. " " .. Time;
			end
		end
	else
		Position = " " .. Position;
		At = '';
	end

	Page, Pages, Sheet, Sheets = format_pages_sheets (Page, Pages, Sheet, Sheets, config.CitationClass, Periodical_origin, sepc, NoPP, use_lowercase);

	At = utilities.is_set (At) and (sepc .. " " .. At) or "";
	Position = utilities.is_set (Position) and (sepc .. " " .. Position) or "";
	if config.CitationClass == 'map' then
		local Sections = A['Sections'];											-- Section (singular) is an alias of Chapter so set earlier
		local Inset = A['Inset'];
		
		if utilities.is_set ( Inset ) then
			Inset = sepc .. " " .. wrap_msg ('inset', Inset, use_lowercase);
		end			

		if utilities.is_set ( Sections ) then
			Section = sepc .. " " .. wrap_msg ('sections', Sections, use_lowercase);
		elseif utilities.is_set ( Section ) then
			Section = sepc .. " " .. wrap_msg ('section', Section, use_lowercase);
		end
		At = At .. Inset .. Section;		
	end	

	local Others = A['Others'];
	if utilities.is_set (Others) and 0 == #a and 0 == #e then					-- add maint cat when |others= has value and used without |author=, |editor=
		if config.CitationClass == "AV-media-notes"
		or config.CitationClass == "audio-visual" then							-- special maint for AV/M which has a lot of 'false' positives right now
			utilities.set_message ('maint_others_avm')
		else
			utilities.set_message ('maint_others');
		end
	end
	Others = utilities.is_set (Others) and (sepc .. " " .. Others) or "";
	
	if utilities.is_set (Translators) then
		Others = safe_join ({sepc .. ' ', wrap_msg ('translated', Translators, use_lowercase), Others}, sepc);
	end
	if utilities.is_set (Interviewers) then
		Others = safe_join ({sepc .. ' ', wrap_msg ('interview', Interviewers, use_lowercase), Others}, sepc);
	end
	
	local TitleNote = A['TitleNote'];
	TitleNote = utilities.is_set (TitleNote) and (sepc .. " " .. TitleNote) or "";
	if utilities.is_set (Edition) then
		if Edition:match ('%f[%a][Ee]d%n?%.?$') or Edition:match ('%f[%a][Ee]dition$') then -- Ed, ed, Ed., ed., Edn, edn, Edn., edn.
			utilities.set_message ('err_extra_text_edition');					 -- add error message
		end
		Edition = " " .. wrap_msg ('edition', Edition);
	else
		Edition = '';
	end

	Series = utilities.is_set (Series) and wrap_msg ('series', {sepc, Series}) or "";	-- not the same as SeriesNum
	local Agency = A['Agency'];
	Agency = utilities.is_set (Agency) and wrap_msg ('agency', {sepc, Agency}) or "";
	Volume = format_volume_issue (Volume, Issue, ArticleNumber, config.CitationClass, Periodical_origin, sepc, use_lowercase);

	if utilities.is_set (AccessDate) then
		local retrv_text = " " .. cfg.messages['retrieved']

		AccessDate = nowrap_date (AccessDate);									-- wrap in nowrap span if date in appropriate format
		if (sepc ~= ".") then retrv_text = retrv_text:lower() end				-- if mode is cs2, lower case
		AccessDate = utilities.substitute (retrv_text, AccessDate);				-- add retrieved text

		AccessDate = utilities.substitute (cfg.presentation['accessdate'], {sepc, AccessDate});	-- allow editors to hide accessdates
	end
	
	if utilities.is_set (ID) then ID = sepc .. " " .. ID; end
	
	local Docket = A['Docket'];
   	if "thesis" == config.CitationClass and utilities.is_set (Docket) then
		ID = sepc .. " Docket " .. Docket .. ID;
	end
   	if "report" == config.CitationClass and utilities.is_set (Docket) then		-- for cite report when |docket= is set
		ID = sepc .. ' ' .. Docket;												-- overwrite ID even if |id= is set
	end

	if utilities.is_set (URL) then
		URL = " " .. external_link( URL, nil, URL_origin, UrlAccess );
	end

	local Quote = A['Quote'];
	local TransQuote = A['TransQuote'];
	local ScriptQuote = A['ScriptQuote'];
	if utilities.is_set (Quote) or utilities.is_set (TransQuote) or utilities.is_set (ScriptQuote) then

		if utilities.is_set (Quote) then
			if Quote:sub(1, 1) == '"' and Quote:sub(-1, -1) == '"' then			-- if first and last characters of quote are quote marks
				Quote = Quote:sub(2, -2);										-- strip them off
			end
		end
		
		Quote = kern_quotes (Quote);											-- kern if needed
		Quote = utilities.wrap_style ('quoted-text', Quote );					-- wrap in &lt;q&gt;...&lt;/q&gt; tags
	
		if utilities.is_set (ScriptQuote) then
			Quote = script_concatenate (Quote, ScriptQuote, 'script-quote');	-- &lt;bdi&gt; tags, lang attribute, categorization, etc.; must be done after quote is wrapped
		end

		if utilities.is_set (TransQuote) then
			if TransQuote:sub(1, 1) == '"' and TransQuote:sub(-1, -1) == '"' then -- if first and last characters of |trans-quote are quote marks
				TransQuote = TransQuote:sub(2, -2); -- strip them off
			end
			Quote = Quote .. " " .. utilities.wrap_style ('trans-quoted-title', TransQuote );
		end

		if utilities.is_set (QuotePage) or utilities.is_set (QuotePages) then	-- add page prefix
			local quote_prefix = '';
			if utilities.is_set (QuotePage) then
				extra_text_in_page_check (QuotePage, 'quote-page');				-- add to maint cat if |quote-page= value begins with what looks like p., pp., etc.
				if not NoPP then
					quote_prefix = utilities.substitute (cfg.messages['p-prefix'], {sepc, QuotePage}), '', '', '';
				else
					quote_prefix = utilities.substitute (cfg.messages['nopp'], {sepc, QuotePage}), '', '', '';
				end
			elseif utilities.is_set (QuotePages) then
				extra_text_in_page_check (QuotePages, 'quote-pages');			-- add to maint cat if |quote-pages= value begins with what looks like p., pp., etc.
				if tonumber(QuotePages) ~= nil and not NoPP then				-- if only digits, assume single page
					quote_prefix = utilities.substitute (cfg.messages['p-prefix'], {sepc, QuotePages}), '', '';
				elseif not NoPP then
					quote_prefix = utilities.substitute (cfg.messages['pp-prefix'], {sepc, QuotePages}), '', '';
				else
					quote_prefix = utilities.substitute (cfg.messages['nopp'], {sepc, QuotePages}), '', '';
				end
			end
                        
			Quote = quote_prefix .. ": " .. Quote;
		else
			Quote = sepc .. " " .. Quote;
		end

		PostScript = "";														-- cs1|2 does not supply terminal punctuation when |quote= is set
	end
	
	-- We check length of PostScript here because it will have been nuked by
	-- the quote parameters. We'd otherwise emit a message even if there wasn't
	-- a displayed postscript.
	-- TODO: Should the max size (1) be configurable?
	-- TODO: Should we check a specific pattern?
	if utilities.is_set(PostScript) and mw.ustring.len(PostScript) &gt; 1 then
		utilities.set_message ('maint_postscript')
	end
	
	local Archived;
	if utilities.is_set (ArchiveURL) then
		if not utilities.is_set (ArchiveDate) then								-- ArchiveURL set but ArchiveDate not set
			utilities.set_message ('err_archive_missing_date');					-- emit an error message
			ArchiveURL = '';													-- empty string for concatenation
			ArchiveDate = '';													-- empty string for concatenation
		end
	else														
		if utilities.is_set (ArchiveDate) then									-- ArchiveURL not set but ArchiveDate is set
			utilities.set_message ('err_archive_date_missing_url');				-- emit an error message
			ArchiveURL = '';													-- empty string for concatenation
			ArchiveDate = '';													-- empty string for concatenation
		end
	end

	if utilities.is_set (ArchiveURL) then
		local arch_text;
--		if not utilities.is_set (ArchiveDate) then
--			utilities.set_message ('err_archive_missing_date');
--			ArchiveDate = '';													-- empty string for concatenation
--		end
		if "live" == UrlStatus then
			arch_text = cfg.messages['archived'];
			if sepc ~= "." then arch_text = arch_text:lower() end
			if utilities.is_set (ArchiveDate) then
				Archived = sepc .. ' ' .. utilities.substitute ( cfg.messages['archived-live'],
					{external_link( ArchiveURL, arch_text, A:ORIGIN('ArchiveURL'), nil) .. ArchiveFormat, ArchiveDate } );
			else
				Archived = '';
			end
			if not utilities.is_set (OriginalURL) then
				utilities.set_message ('err_archive_missing_url');
				Archived = '';													-- empty string for concatenation
			end
		elseif utilities.is_set (OriginalURL) then								-- UrlStatus is empty, 'dead', 'unfit', 'usurped', 'bot: unknown'
			if utilities.in_array (UrlStatus, {'unfit', 'usurped', 'bot: unknown'}) then
				arch_text = cfg.messages['archived-unfit'];
				if sepc ~= "." then arch_text = arch_text:lower() end
				Archived = sepc .. ' ' .. arch_text .. ArchiveDate;				-- format already styled
				if 'bot: unknown' == UrlStatus then
					utilities.set_message ('maint_bot_unknown');				-- and add a category if not already added
				else
					utilities.set_message ('maint_unfit');						-- and add a category if not already added
				end
			else																-- UrlStatus is empty, 'dead'
				arch_text = cfg.messages['archived-dead'];
				if sepc ~= "." then arch_text = arch_text:lower() end
				if utilities.is_set (ArchiveDate) then
					Archived = sepc .. " " .. utilities.substitute ( arch_text,
						{ external_link( OriginalURL, cfg.messages['original'], OriginalURL_origin, OriginalAccess ) .. OriginalFormat, ArchiveDate } );	-- format already styled
				else
					Archived = '';												-- unset for concatenation
				end
			end	
		else																	-- OriginalUrl not set
			utilities.set_message ('err_archive_missing_url');
			Archived = '';														-- empty string for concatenation
		end
	elseif utilities.is_set (ArchiveFormat) then
		Archived = ArchiveFormat;												-- if set and ArchiveURL not set ArchiveFormat has error message
	else
		Archived = '';
	end
	
--	local Lay = '';
--	local LaySource = A['LaySource'];
--	local LayURL = A['LayURL'];
--	local LayFormat = A['LayFormat'];
--	LayFormat = style_format (LayFormat, LayURL, 'lay-format', 'lay-url');
--	if utilities.is_set (LayURL) then
--		if utilities.is_set (LayDate) then LayDate = " (" .. LayDate .. ")" end
--		if utilities.is_set (LaySource) then 
--			LaySource = " &amp;ndash; ''" .. utilities.safe_for_italics (LaySource) .. "''";
--		else
--			LaySource = "";
--		end
--		if sepc == '.' then
--			Lay = sepc .. " " .. external_link( LayURL, cfg.messages['lay summary'], A:ORIGIN('LayURL'), nil ) .. LayFormat .. LaySource .. LayDate
--		else
--			Lay = sepc .. " " .. external_link( LayURL, cfg.messages['lay summary']:lower(), A:ORIGIN('LayURL'), nil ) .. LayFormat .. LaySource .. LayDate
--		end			
--	elseif utilities.is_set (LayFormat) then									-- Test if |lay-format= is given without giving a |lay-url=
--		Lay = sepc .. LayFormat;												-- if set and LayURL not set, then LayFormat has error message
--	end

	local TranscriptURL = A['TranscriptURL']
	local TranscriptFormat = A['TranscriptFormat'];
	TranscriptFormat = style_format (TranscriptFormat, TranscriptURL, 'transcript-format', 'transcripturl');
	local Transcript = A['Transcript'];
	local TranscriptURL_origin = A:ORIGIN('TranscriptURL');						-- get name of parameter that holds TranscriptURL
	if utilities.is_set (Transcript) then
		if utilities.is_set (TranscriptURL) then
			Transcript = external_link( TranscriptURL, Transcript, TranscriptURL_origin, nil );
		end
		Transcript = sepc .. ' ' .. Transcript .. TranscriptFormat;
	elseif utilities.is_set (TranscriptURL) then
		Transcript = external_link( TranscriptURL, nil, TranscriptURL_origin, nil );
	end

	local Publisher;
	if utilities.is_set (PublicationDate) then
		PublicationDate = wrap_msg ('published', PublicationDate);
	end
	if utilities.is_set (PublisherName) then
		if utilities.is_set (PublicationPlace) then
			Publisher = sepc .. " " .. PublicationPlace .. ": " .. PublisherName .. PublicationDate;
		else
			Publisher = sepc .. " " .. PublisherName .. PublicationDate;  
		end			
	elseif utilities.is_set (PublicationPlace) then 
		Publisher= sepc .. " " .. PublicationPlace .. PublicationDate;
	else 
		Publisher = PublicationDate;
	end
	
	-- Several of the above rely upon detecting this as nil, so do it last.
	if (utilities.is_set (Periodical) or utilities.is_set (ScriptPeriodical) or utilities.is_set (TransPeriodical)) then
		if utilities.is_set (Title) or utilities.is_set (TitleNote) then 
			Periodical = sepc .. " " .. format_periodical (ScriptPeriodical, ScriptPeriodical_origin, Periodical, TransPeriodical, TransPeriodical_origin);
		else 
			Periodical = format_periodical (ScriptPeriodical, ScriptPeriodical_origin, Periodical, TransPeriodical, TransPeriodical_origin);
		end
	end
	
	local Language = A['Language'];
	if utilities.is_set (Language) then
		Language = language_parameter (Language);								-- format, categories, name from ISO639-1, etc.
	else
		Language='';															-- language not specified so make sure this is an empty string;
	--[[ TODO: need to extract the wrap_msg from language_parameter
	so that we can solve parentheses bunching problem with Format/Language/TitleType
	]]
	end

	--[[
	Handle the oddity that is cite speech.  This code overrides whatever may be the value assigned to TitleNote (through |department=) and forces it to be " (Speech)" so that
	the annotation directly follows the |title= parameter value in the citation rather than the |event= parameter value (if provided).
	]]
	if "speech" == config.CitationClass then									-- cite speech only
		TitleNote = TitleType;													-- move TitleType to TitleNote so that it renders ahead of |event=
		TitleType = '';															-- and unset

		if utilities.is_set (Periodical) then									-- if Periodical, perhaps because of an included |website= or |journal= parameter 
			if utilities.is_set (Conference) then								-- and if |event= is set
				Conference = Conference .. sepc .. " ";							-- then add appropriate punctuation to the end of the Conference variable before rendering
			end
		end
	end

	-- Piece all bits together at last.  Here, all should be non-nil.
	-- We build things this way because it is more efficient in LUA
	-- not to keep reassigning to the same string variable over and over.

	local tcommon;
	local tcommon2;																-- used for book cite when |contributor= is set
	
	if utilities.in_array (config.CitationClass, {"journal", "citation"}) and utilities.is_set (Periodical) then
		if not (utilities.is_set (Authors) or utilities.is_set (Editors)) then
			Others = Others:gsub ('^' .. sepc .. ' ', '');						-- when no authors and no editors, strip leading sepc and space
		end
		if utilities.is_set (Others) then Others = safe_join ({Others, sepc .. " "}, sepc) end		-- add terminal punctuation &amp; space; check for dup sepc; TODO why do we need to do this here?
		tcommon = safe_join( {Others, Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Language, Edition, Publisher, Agency, Volume}, sepc );
	elseif utilities.in_array (config.CitationClass, {"book", "citation"}) and not utilities.is_set (Periodical) then		-- special cases for book cites
		if utilities.is_set (Contributors) then									-- when we are citing foreword, preface, introduction, etc.
			tcommon = safe_join( {Title, TitleNote}, sepc );					-- author and other stuff will come after this and before tcommon2
			tcommon2 = safe_join( {Conference, Periodical, Format, TitleType, Series, Language, Volume, Others, Edition, Publisher, Agency}, sepc );
		else
			tcommon = safe_join( {Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Language, Volume, Others, Edition, Publisher, Agency}, sepc );
		end

	elseif 'map' == config.CitationClass then									-- special cases for cite map
		if utilities.is_set (Chapter) then										-- map in a book; TitleType is part of Chapter
			tcommon = safe_join( {Title, Format, Edition, Scale, Series, Language, Cartography, Others, Publisher, Volume}, sepc );
		elseif utilities.is_set (Periodical) then								-- map in a periodical
			tcommon = safe_join( {Title, TitleType, Format, Periodical, Scale, Series, Language, Cartography, Others, Publisher, Volume}, sepc );
		else																	-- a sheet or stand-alone map
			tcommon = safe_join( {Title, TitleType, Format, Edition, Scale, Series, Language, Cartography, Others, Publisher}, sepc );
		end
		
	elseif 'episode' == config.CitationClass then								-- special case for cite episode
		tcommon = safe_join( {Title, TitleNote, TitleType, Series, Language, Edition, Publisher}, sepc );

	else																		-- all other CS1 templates
		tcommon = safe_join( {Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Language, 
			Volume, Others, Edition, Publisher, Agency}, sepc );
	end
	
	if #ID_list &gt; 0 then
		ID_list = safe_join( { sepc .. " ",  table.concat( ID_list, sepc .. " " ), ID }, sepc );
	else
		ID_list = ID;
	end
	
	local Via = A['Via'];
	Via = utilities.is_set (Via) and  wrap_msg ('via', Via) or '';
	local idcommon;
	if 'audio-visual' == config.CitationClass or 'episode' == config.CitationClass then	-- special case for cite AV media &amp; cite episode position transcript
--		idcommon = safe_join( { ID_list, URL, Archived, Transcript, AccessDate, Via, Lay, Quote }, sepc );
		idcommon = safe_join( { ID_list, URL, Archived, Transcript, AccessDate, Via, Quote }, sepc );
	else
--		idcommon = safe_join( { ID_list, URL, Archived, AccessDate, Via, Lay, Quote }, sepc );
		idcommon = safe_join( { ID_list, URL, Archived, AccessDate, Via, Quote }, sepc );
	end
	
	local text;
	local pgtext = Position .. Sheet .. Sheets .. Page .. Pages .. At;

	local OrigDate = A['OrigDate'];
	OrigDate = utilities.is_set (OrigDate) and wrap_msg ('origdate', OrigDate) or '';
	if utilities.is_set (Date) then
		if utilities.is_set (Authors) or utilities.is_set (Editors) then		-- date follows authors or editors when authors not set
			Date = " (" .. Date .. ")" .. OrigDate .. sepc .. " ";				-- in parentheses
		else																	-- neither of authors and editors set
			if (string.sub(tcommon, -1, -1) == sepc) then						-- if the last character of tcommon is sepc
				Date = " " .. Date .. OrigDate;									-- Date does not begin with sepc
			else
				Date = sepc .. " " .. Date .. OrigDate;							-- Date begins with sepc
			end
		end
	end	
	if utilities.is_set (Authors) then
		if (not utilities.is_set (Date)) then									-- when date is set it's in parentheses; no Authors termination
			Authors = terminate_name_list (Authors, sepc);						-- when no date, terminate with 0 or 1 sepc and a space
		end
		if utilities.is_set (Editors) then
			local in_text = '';
			local post_text = '';
			if utilities.is_set (Chapter) and 0 == #c then
				in_text = cfg.messages['in'] .. ' ';
				if (sepc ~= '.') then
					in_text = in_text:lower();									-- lowercase for cs2
				end
			end
			if EditorCount &lt;= 1 then
				post_text = ' (' .. cfg.messages['editor'] .. ')';				-- be consistent with no-author, no-date case
			else
				post_text = ' (' .. cfg.messages['editors'] .. ')';
			end
			Editors = terminate_name_list (in_text .. Editors .. post_text, sepc);	-- terminate with 0 or 1 sepc and a space
		end
		if utilities.is_set (Contributors) then									-- book cite and we're citing the intro, preface, etc.
			local by_text = sepc .. ' ' .. cfg.messages['by'] .. ' ';
			if (sepc ~= '.') then by_text = by_text:lower() end					-- lowercase for cs2
			Authors = by_text .. Authors;										-- author follows title so tweak it here
			if utilities.is_set (Editors) and utilities.is_set (Date) then		-- when Editors make sure that Authors gets terminated
				Authors = terminate_name_list (Authors, sepc);					-- terminate with 0 or 1 sepc and a space
			end
			if (not utilities.is_set (Date)) then								-- when date is set it's in parentheses; no Contributors termination
				Contributors = terminate_name_list (Contributors, sepc);		-- terminate with 0 or 1 sepc and a space
			end
			text = safe_join( {Contributors, Date, Chapter, tcommon, Authors, Place, Editors, tcommon2, pgtext, idcommon }, sepc );
		else
			text = safe_join( {Authors, Date, Chapter, Place, Editors, tcommon, pgtext, idcommon }, sepc );
		end
	elseif utilities.is_set (Editors) then
		if utilities.is_set (Date) then
			if EditorCount &lt;= 1 then
				Editors = Editors .. cfg.presentation['sep_name'] .. cfg.messages['editor'];
			else
				Editors = Editors .. cfg.presentation['sep_name'] .. cfg.messages['editors'];
			end
		else
			if EditorCount &lt;= 1 then
				Editors = Editors .. " (" .. cfg.messages['editor'] .. ")" .. sepc .. " "
			else
				Editors = Editors .. " (" .. cfg.messages['editors'] .. ")" .. sepc .. " "
			end
		end
		text = safe_join( {Editors, Date, Chapter, Place, tcommon, pgtext, idcommon}, sepc );
	else
		if utilities.in_array (config.CitationClass, {"journal", "citation"}) and utilities.is_set (Periodical) then
			text = safe_join( {Chapter, Place, tcommon, pgtext, Date, idcommon}, sepc );
		else
			text = safe_join( {Chapter, Place, tcommon, Date, pgtext, idcommon}, sepc );
		end
	end
	
	if utilities.is_set (PostScript) and PostScript ~= sepc then
		text = safe_join( {text, sepc}, sepc ); 								-- Deals with italics, spaces, etc.
		text = text:sub(1, -sepc:len() - 1);
	end	
	
	text = safe_join( {text, PostScript}, sepc );

	-- Now enclose the whole thing in a &lt;cite&gt; element
	local options_t = {};
	options_t.class = cite_class_attribute_make (config.CitationClass, Mode);

	local Ref = is_valid_parameter_value (A['Ref'], A:ORIGIN('Ref'), cfg.keywords_lists['ref'], nil, true);	-- nil when |ref=harv; A['Ref'] else

	if 'none' ~= cfg.keywords_xlate[(Ref and Ref:lower()) or ''] then
		local namelist_t = {};													-- holds selected contributor, author, editor name list
		local year = first_set ({Year, anchor_year}, 2);						-- Year first for legacy citations and for YMD dates that require disambiguation

		if #c &gt; 0 then															-- if there is a contributor list
			namelist_t = c;														-- select it
		elseif #a &gt; 0 then														-- or an author list
			namelist_t = a;
		elseif #e &gt; 0 then														-- or an editor list
			namelist_t = e;
		end
		local citeref_id;
		if #namelist_t &gt; 0 then													-- if there are names in namelist_t
			citeref_id = make_citeref_id (namelist_t, year);					-- go make the CITEREF anchor
			if mw.uri.anchorEncode (citeref_id) == ((Ref and mw.uri.anchorEncode (Ref)) or '') then	-- Ref may already be encoded (by {{sfnref}}) so citeref_id must be encoded before comparison
				utilities.set_message ('maint_ref_duplicates_default');
			end
		else
			citeref_id = '';													-- unset
		end
		options_t.id = Ref or citeref_id;
	end

	if string.len (text:gsub('%b&lt;&gt;', '')) &lt;= 2 then								-- remove html and html-like tags; then get length of what remains; 
		z.error_cats_t = {};													-- blank the categories list
		z.error_msgs_t = {};													-- blank the error messages list
		OCinSoutput = nil;														-- blank the metadata string
		text = '';																-- blank the the citation
		utilities.set_message ('err_empty_citation');							-- set empty citation message and category
	end
	
	local render_t = {};														-- here we collect the final bits for concatenation into the rendered citation

	if utilities.is_set (options_t.id) then										-- here we wrap the rendered citation in &lt;cite ...&gt;...&lt;/cite&gt; tags
		table.insert (render_t, utilities.substitute (cfg.presentation['cite-id'], {mw.uri.anchorEncode(options_t.id), mw.text.nowiki(options_t.class), text}));	-- when |ref= is set or when there is a namelist
	else
		table.insert (render_t, utilities.substitute (cfg.presentation['cite'], {mw.text.nowiki(options_t.class), text}));	-- when |ref=none or when namelist_t empty and |ref= is missing or is empty
	end		

	if OCinSoutput then															-- blanked when citation is 'empty' so don't bother to add boilerplate metadata span
		table.insert (render_t, utilities.substitute (cfg.presentation['ocins'], OCinSoutput));	-- format and append metadata to the citation
	end

	local template_name = ('citation' == config.CitationClass) and 'citation' or 'cite ' .. (cfg.citation_class_map_t[config.CitationClass] or config.CitationClass);
	local template_link = '[[Template:' .. template_name .. '|' .. template_name .. ']]';
	local msg_prefix = '&lt;code class="cs1-code"&gt;{{' .. template_link .. '}}&lt;/code&gt;: ';

	if 0 ~= #z.error_msgs_t then
		mw.addWarning (utilities.substitute (cfg.messages.warning_msg_e, template_link));

		table.insert (render_t, ' ');											-- insert a space between citation and its error messages
		table.sort (z.error_msgs_t);											-- sort the error messages list; sorting includes wrapping &lt;span&gt; and &lt;code&gt; tags; hidden-error sorts ahead of visible-error

		local hidden = true;													-- presume that the only error messages emited by this template are hidden
		for _, v in ipairs (z.error_msgs_t) do									-- spin through the list of error messages
			if v:find ('cs1-visible-error', 1, true) then						-- look for the visible error class name
				hidden = false;													-- found one; so don't hide the error message prefix
				break;															-- and done because no need to look further
			end
		end

		z.error_msgs_t[1] = table.concat ({utilities.error_comment (msg_prefix, hidden), z.error_msgs_t[1]});	-- add error message prefix to first error message to prevent extraneous punctuation
		table.insert (render_t, table.concat (z.error_msgs_t, '; '));			-- make a big string of error messages and add it to the rendering
	end

	if 0 ~= #z.maint_cats_t then
		mw.addWarning (utilities.substitute (cfg.messages.warning_msg_m, template_link));

		table.sort (z.maint_cats_t);											-- sort the maintenance messages list

		local maint_msgs_t = {};												-- here we collect all of the maint messages

		if 0 == #z.error_msgs_t then											-- if no error messages
			table.insert (maint_msgs_t, msg_prefix);							-- insert message prefix in maint message livery
		end
		
		for _, v in ipairs( z.maint_cats_t ) do									-- append maintenance categories
			table.insert (maint_msgs_t, 										-- assemble new maint message and add it to the maint_msgs_t table
				table.concat ({v, ' (', utilities.substitute (cfg.messages[':cat wikilink'], v), ')'})
				);
		end
		table.insert (render_t, utilities.substitute (cfg.presentation['hidden-maint'], table.concat (maint_msgs_t, ' ')));	-- wrap the group of maint messages with proper presentation and save
	end

	if not no_tracking_cats then
		for _, v in ipairs (z.error_cats_t) do									-- append error categories
			table.insert (render_t, utilities.substitute (cfg.messages['cat wikilink'], v));
		end
		for _, v in ipairs (z.maint_cats_t) do									-- append maintenance categories
			table.insert (render_t, utilities.substitute (cfg.messages['cat wikilink'], v));
		end
		for _, v in ipairs (z.prop_cats_t) do									-- append properties categories
			table.insert (render_t, utilities.substitute (cfg.messages['cat wikilink'], v));
		end
	end

	return table.concat (render_t);												-- make a big string and done
end


--[[--------------------------&lt; V A L I D A T E &gt;--------------------------------------------------------------

Looks for a parameter's name in one of several whitelists.

Parameters in the whitelist can have three values:
	true - active, supported parameters
	false - deprecated, supported parameters
	nil - unsupported parameters
	
]]

local function validate (name, cite_class, empty)
	local name = tostring (name);
	local enum_name;															-- parameter name with enumerator (if any) replaced with '#'
	local state;
	local function state_test (state, name)										-- local function to do testing of state values
		if true == state then return true; end									-- valid actively supported parameter
		if false == state then
			if empty then return nil; end										-- empty deprecated parameters are treated as unknowns
			deprecated_parameter (name);										-- parameter is deprecated but still supported
			return true;
		end
		if 'tracked' == state then
			local base_name = name:gsub ('%d', '');								-- strip enumerators from parameter names that have them to get the base name
			utilities.add_prop_cat ('tracked-param', {base_name}, base_name);	-- add a properties category; &lt;base_name&gt; modifies &lt;key&gt;
			return true;
		end
		return nil;
	end		

	if name:find ('#') then														-- # is a cs1|2 reserved character so parameters with # not permitted
		return nil;
	end
																				-- replace wnumerator digit(s) with # (|last25= becomes |last#=) (mw.ustring because non-Western 'local' digits)
	enum_name = mw.ustring.gsub (name, '%d+$', '#');							-- where enumerator is last charaters in parameter name (these to protect |s2cid=)
	enum_name = mw.ustring.gsub (enum_name, '%d+([%-l])', '#%1');				-- where enumerator is in the middle of the parameter name; |author#link= is the oddity

	if 'document' == cite_class then											-- special case for {{cite document}}
		state = whitelist.document_parameters_t[enum_name];						-- this list holds enumerated and nonenumerated parameters
		if true == state_test (state, name) then return true; end
		
		return false;
	end

	if utilities.in_array (cite_class, whitelist.preprint_template_list_t) then	-- limited parameter sets allowed for these templates
		state = whitelist.limited_parameters_t[enum_name];						-- this list holds enumerated and nonenumerated parameters
		if true == state_test (state, name) then return true; end

		state = whitelist.preprint_arguments_t[cite_class][name];				-- look in the parameter-list for the template identified by cite_class
		if true == state_test (state, name) then return true; end

		return false;															-- not supported because not found or name is set to nil
	end																			-- end limited parameter-set templates

	if utilities.in_array (cite_class, whitelist.unique_param_template_list_t) then 	-- template-specific parameters for templates that accept parameters from the basic argument list
		state = whitelist.unique_arguments_t[cite_class][name];					-- look in the template-specific parameter-lists for the template identified by cite_class
		if true == state_test (state, name) then return true; end
	end																			-- if here, fall into general validation

	state = whitelist.common_parameters_t[enum_name];							-- all other templates; all normal parameters allowed; this list holds enumerated and nonenumerated parameters
	if true == state_test (state, name) then return true; end

	return false;																-- not supported because not found or name is set to nil
end


--[=[-------------------------&lt; I N T E R _ W I K I _ C H E C K &gt;----------------------------------------------

check &lt;value&gt; for inter-language interwiki-link markup.  &lt;prefix&gt; must be a MediaWiki-recognized language
code.  when these values have the form (without leading colon):
	[[&lt;prefix&gt;:link|label]] return label as plain-text
	[[&lt;prefix&gt;:link]] return &lt;prefix&gt;:link as plain-text

return value as is else

]=]

local function inter_wiki_check (parameter, value)
	local prefix = value:match ('%[%[(%a+):');									-- get an interwiki prefix if one exists
	local _;
	
	if prefix and cfg.inter_wiki_map[prefix:lower()] then						-- if prefix is in the map, needs preceding colon so
		utilities.set_message ('err_bad_paramlink', parameter);					-- emit an error message
		_, value, _ = utilities.is_wikilink (value);							-- extract label portion from wikilink
	end
	return value;
end


--[[--------------------------&lt; M I S S I N G _ P I P E _ C H E C K &gt;------------------------------------------

Look at the contents of a parameter. If the content has a string of characters and digits followed by an equal
sign, compare the alphanumeric string to the list of cs1|2 parameters.  If found, then the string is possibly a
parameter that is missing its pipe.  There are two tests made:
	{{cite ... |title=Title access-date=2016-03-17}}	-- the first parameter has a value and whitespace separates that value from the missing pipe parameter name
	{{cite ... |title=access-date=2016-03-17}}			-- the first parameter has no value (whitespace after the first = is trimmed by MediaWiki)
cs1|2 shares some parameter names with XML/HTML attributes: class=, title=, etc.  To prevent false positives XML/HTML
tags are removed before the search.

If a missing pipe is detected, this function adds the missing pipe maintenance category.

]]

local function missing_pipe_check (parameter, value)
	local capture;
	value = value:gsub ('%b&lt;&gt;', '');											-- remove XML/HTML tags because attributes: class=, title=, etc.

	capture = value:match ('%s+(%a[%w%-]+)%s*=') or value:match ('^(%a[%w%-]+)%s*=');	-- find and categorize parameters with possible missing pipes
	if capture and validate (capture) then										-- if the capture is a valid parameter name
		utilities.set_message ('err_missing_pipe', parameter);
	end
end


--[[--------------------------&lt; H A S _ E X T R A N E O U S _ P U N C T &gt;--------------------------------------

look for extraneous terminal punctuation in most parameter values; parameters listed in skip table are not checked

]]

local function has_extraneous_punc (param, value)
	if 'number' == type (param) then
		return;
	end
	
	param = param:gsub ('%d+', '#');											-- enumerated name-list mask params allow terminal punct; normalize 
	if cfg.punct_skip[param] then
		return;																	-- parameter name found in the skip table so done
	end
	
	if value:match ('[,;:]$') then
		utilities.set_message ('maint_extra_punct');							-- has extraneous punctuation; add maint cat
	end
	if value:match ('^=') then													-- sometimes an extraneous '=' character appears ...
		utilities.set_message ('maint_extra_punct');							-- has extraneous punctuation; add maint cat
	end
end


--[[--------------------------&lt; H A S _ E X T R A N E O U S _ U R L &gt;------------------------------------------

look for extraneous url parameter values; parameters listed in skip table are not checked

]]

local function has_extraneous_url (url_param_t)
	local url_error_t = {};
	
	check_for_url (url_param_t, url_error_t);									-- extraneous url check
	if 0 ~= #url_error_t then													-- non-zero when there are errors
		table.sort (url_error_t);
		utilities.set_message ('err_param_has_ext_link', {utilities.make_sep_list (#url_error_t, url_error_t)});	-- add this error message
	end
end


--[[--------------------------&lt; C I T A T I O N &gt;--------------------------------------------------------------

This is used by templates such as {{cite book}} to create the actual citation text.

]]

local function citation(frame)
	Frame = frame;																-- save a copy in case we need to display an error message in preview mode

	local config = {};															-- table to store parameters from the module {{#invoke:}}
	for k, v in pairs( frame.args ) do											-- get parameters from the {{#invoke}} frame
		config[k] = v;
	--	args[k] = v;															-- crude debug support that allows us to render a citation from module {{#invoke:}}; skips parameter validation; TODO: keep?
	end	
																				-- i18n: set the name that your wiki uses to identify sandbox subpages from sandbox template invoke (or can be set here)
	local sandbox = ((config.SandboxPath and '' ~= config.SandboxPath) and config.SandboxPath) or '/sandbox';	-- sandbox path from {{#invoke:Citation/CS1/sandbox|citation|SandboxPath=/...}}
	is_sandbox = nil ~= string.find (frame:getTitle(), sandbox, 1, true);		-- is this invoke the sandbox module?
	sandbox = is_sandbox and sandbox or '';										-- use i18n sandbox to load sandbox modules when this module is the sandox; live modules else

	local pframe = frame:getParent()
	local styles;
	
	cfg = mw.loadData ('Module:Citation/CS1/Configuration' .. sandbox);			-- load sandbox versions of support modules when {{#invoke:Citation/CS1/sandbox|...}}; live modules else
	whitelist = mw.loadData ('Module:Citation/CS1/Whitelist' .. sandbox);
	utilities = require ('Module:Citation/CS1/Utilities' .. sandbox);
	validation = require ('Module:Citation/CS1/Date_validation' .. sandbox);
	identifiers = require ('Module:Citation/CS1/Identifiers' .. sandbox);
	metadata = require ('Module:Citation/CS1/COinS' .. sandbox);
	styles = 'Module:Citation/CS1' .. sandbox .. '/styles.css';

	utilities.set_selected_modules (cfg);										-- so that functions in Utilities can see the selected cfg tables
	identifiers.set_selected_modules (cfg, utilities);							-- so that functions in Identifiers can see the selected cfg tables and selected Utilities module
	validation.set_selected_modules (cfg, utilities);							-- so that functions in Date validataion can see selected cfg tables and the selected Utilities module
	metadata.set_selected_modules (cfg, utilities);								-- so that functions in COinS can see the selected cfg tables and selected Utilities module

	z = utilities.z;															-- table of error and category tables in Module:Citation/CS1/Utilities

	is_preview_mode = not utilities.is_set (frame:preprocess ('{{REVISIONID}}'));

	local args = {};															-- table where we store all of the template's arguments
	local suggestions = {};														-- table where we store suggestions if we need to loadData them
	local error_text;															-- used as a flag

	local capture;																-- the single supported capture when matching unknown parameters using patterns
	local empty_unknowns = {};													-- sequence table to hold empty unknown params for error message listing
	for k, v in pairs( pframe.args ) do											-- get parameters from the parent (template) frame
		v = mw.ustring.gsub (v, '^%s*(.-)%s*$', '%1');							-- trim leading/trailing whitespace; when v is only whitespace, becomes empty string
		if v ~= '' then
			if ('string' == type (k)) then
				k = mw.ustring.gsub (k, '%d', cfg.date_names.local_digits);		-- for enumerated parameters, translate 'local' digits to Western 0-9
			end
			if not validate( k, config.CitationClass ) then			
				if type (k) ~= 'string' then									-- exclude empty numbered parameters
					if v:match("%S+") ~= nil then
						error_text = utilities.set_message ('err_text_ignored', {v});
					end
				elseif validate (k:lower(), config.CitationClass) then 
					error_text = utilities.set_message ('err_parameter_ignored_suggest', {k, k:lower()});	-- suggest the lowercase version of the parameter
				else
					if nil == suggestions.suggestions then						-- if this table is nil then we need to load it
						suggestions = mw.loadData ('Module:Citation/CS1/Suggestions' .. sandbox);	--load sandbox version of suggestion module when {{#invoke:Citation/CS1/sandbox|...}}; live module else
					end
					for pattern, param in pairs (suggestions.patterns) do		-- loop through the patterns to see if we can suggest a proper parameter
						capture = k:match (pattern);							-- the whole match if no capture in pattern else the capture if a match
						if capture then											-- if the pattern matches 
							param = utilities.substitute (param, capture);		-- add the capture to the suggested parameter (typically the enumerator)
							if validate (param, config.CitationClass) then		-- validate the suggestion to make sure that the suggestion is supported by this template (necessary for limited parameter lists)
								error_text = utilities.set_message ('err_parameter_ignored_suggest', {k, param});	-- set the suggestion error message
							else
								error_text = utilities.set_message ('err_parameter_ignored', {k});	-- suggested param not supported by this template
								v = '';											-- unset
							end
						end
					end
					if not utilities.is_set (error_text) then					-- couldn't match with a pattern, is there an explicit suggestion?						
						if (suggestions.suggestions[ k:lower() ] ~= nil) and validate (suggestions.suggestions[ k:lower() ], config.CitationClass) then
							utilities.set_message ('err_parameter_ignored_suggest', {k, suggestions.suggestions[ k:lower() ]});
						else
							utilities.set_message ('err_parameter_ignored', {k});
							v = '';												-- unset value assigned to unrecognized parameters (this for the limited parameter lists)
						end
					end
				end				  
			end

			args[k] = v;														-- save this parameter and its value

		elseif not utilities.is_set (v) then									-- for empty parameters
			if not validate (k, config.CitationClass, true) then				-- is this empty parameter a valid parameter
				k = ('' == k) and '(empty string)' or k;						-- when k is empty string (or was space(s) trimmed to empty string), replace with descriptive text
				table.insert (empty_unknowns, utilities.wrap_style ('parameter', k));	-- format for error message and add to the list
			end
																				-- crude debug support that allows us to render a citation from module {{#invoke:}} TODO: keep?
	--	elseif args[k] ~= nil or (k == 'postscript') then						-- when args[k] has a value from {{#invoke}} frame (we don't normally do that)
	--		args[k] = v;														-- overwrite args[k] with empty string from pframe.args[k] (template frame); v is empty string here
		end																		-- not sure about the postscript bit; that gets handled in parameter validation; historical artifact?
	end	

	if 0 ~= #empty_unknowns then												-- create empty unknown error message
		utilities.set_message ('err_param_unknown_empty', {
			1 == #empty_unknowns and '' or 's',
			utilities.make_sep_list (#empty_unknowns, empty_unknowns)
			});
	end

	local url_param_t = {};

	for k, v in pairs( args ) do
		if 'string' == type (k) then											-- don't evaluate positional parameters
			has_invisible_chars (k, v);											-- look for invisible characters
		end
		has_extraneous_punc (k, v);												-- look for extraneous terminal punctuation in parameter values
		missing_pipe_check (k, v);												-- do we think that there is a parameter that is missing a pipe?
		args[k] = inter_wiki_check (k, v);										-- when language interwiki-linked parameter missing leading colon replace with wiki-link label

		if 'string' == type (k) and not cfg.url_skip[k] then					-- when parameter k is not positional and not in url skip table
			url_param_t[k] = v;													-- make a parameter/value list for extraneous url check
		end
	end

	has_extraneous_url (url_param_t);											-- look for url in parameter values where a url does not belong

	return table.concat ({
		frame:extensionTag ('templatestyles', '', {src=styles}),
		citation0( config, args)
	});
end


--[[--------------------------&lt; E X P O R T E D   F U N C T I O N S &gt;------------------------------------------
]]

return {citation = citation};</text>
      <sha1>tdu8ggjbxwo5jmdozqbp8w94qat411d</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Configuration</title>
    <ns>828</ns>
    <id>9</id>
    <revision>
      <id>13</id>
      <timestamp>2023-08-20T12:31:44Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "local lang_obj = mw.language.getContentLanguage();								-- make a language object for the local language; used here for languages and dates    --[[--------------------------&lt; S E T T I N G S &gt;--------------------------------------------------------------  boolean settings used to control various things.  these setting located here to make them easy to find  ]] 																				-- these settings local to this module only local local_digits_from_mediawiki = false;..."</comment>
      <origin>13</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="106085" sha1="lopfli8cik5okotztmvlgtvbe0066io" xml:space="preserve">local lang_obj = mw.language.getContentLanguage();								-- make a language object for the local language; used here for languages and dates 


--[[--------------------------&lt; S E T T I N G S &gt;--------------------------------------------------------------

boolean settings used to control various things.  these setting located here to make them easy to find

]]
																				-- these settings local to this module only
local local_digits_from_mediawiki = false;										-- for i18n; when true, module fills date_names['local_digits'] from MediaWiki; manual fill required else; always false at en.wiki
local local_date_names_from_mediawiki = false;									-- for i18n; when true, module fills date_names['local']['long'] and date_names['local']['short'] from MediaWiki;
																				-- manual translation required else; ; always false at en.wiki

																				-- these settings exported to other modules
local use_identifier_redirects = true;											-- when true use redirect name for identifier label links; always true at en.wiki
local local_lang_cat_enable = false;											-- when true categorizes pages where |language=&lt;local wiki's language&gt;; always false at en.wiki
local date_name_auto_xlate_enable = false;										-- when true translates English month-names to the local-wiki's language month names; always false at en.wiki
local date_digit_auto_xlate_enable = false;										-- when true translates Western date digit to the local-wiki's language digits (date_names['local_digits']); always false at en.wiki


--[[--------------------------&lt; U N C A T E G O R I Z E D _ N A M E S P A C E S &gt;------------------------------

List of namespaces identifiers for namespaces that will not be included in citation error categories.
Same as setting notracking = true by default.

For wikis that have a current version of Module:cs1 documentation support, this #invoke will return an unordered
list of namespace names and their associated identifiers:
	{{#invoke:cs1 documentation support|uncategorized_namespace_lister|all=&lt;anything&gt;}}

]]

uncategorized_namespaces_t = {[2]=true};										-- init with user namespace id
for k, _ in pairs (mw.site.talkNamespaces) do									-- add all talk namespace ids
	uncategorized_namespaces_t[k] = true;
end

local uncategorized_subpages = {'/[Ss]andbox', '/[Tt]estcases', '/[^/]*[Ll]og', '/[Aa]rchive'};		-- list of Lua patterns found in page names of pages we should not categorize


--[[--------------------------&lt; M E S S A G E S &gt;--------------------------------------------------------------

Translation table

The following contains fixed text that may be output as part of a citation.
This is separated from the main body to aid in future translations of this
module.

]]

local messages = {
	['agency'] = '$1 $2',														-- $1 is sepc, $2 is agency
	['archived-dead'] = 'Archived from $1 on $2',
	['archived-live'] = '$1 from the original on $2',
	['archived-unfit'] = 'Archived from the original on ',
	['archived'] = 'Archived',
	['by'] = 'By',																-- contributions to authored works: introduction, foreword, afterword
	['cartography'] = 'Cartography by $1',
	['editor'] = 'ed.',
	['editors'] = 'eds.',
	['edition'] = '($1&amp;nbsp;ed.)',
	['episode'] = 'Episode $1',
	['et al'] = 'et&amp;nbsp;al.',
	['in'] = 'In',																-- edited works
	['inactive'] = 'inactive',
	['inset'] = '$1 inset',
	['interview'] = 'Interviewed by $1',										
	['mismatch'] = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; / &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt; mismatch',	-- $1 is year param name; $2 is date param name
	['newsgroup'] = '[[Usenet newsgroup|Newsgroup]]:&amp;nbsp;$1',
	['notitle'] = 'No title',													-- for |title=(()) and (in the future) |title=none
	['original'] = 'the original',
	['origdate'] = ' [$1]',
	['published'] = ' (published $1)',
	['retrieved'] = 'Retrieved $1',
	['season'] = 'Season $1',
	['section'] = '§&amp;nbsp;$1',
	['sections'] = '§§&amp;nbsp;$1',
	['series'] = '$1 $2',														-- $1 is sepc, $2 is series
	['seriesnum'] = 'Series $1',
	['translated'] = 'Translated by $1',
	['type'] = ' ($1)',															-- for titletype
	['written'] = 'Written at $1',

	['vol'] = '$1 Vol.&amp;nbsp;$2',												-- $1 is sepc; bold journal style volume is in presentation{}
	['vol-no'] = '$1 Vol.&amp;nbsp;$2, no.&amp;nbsp;$3',								-- sepc, volume, issue (alternatively insert $1 after $2, but then we'd also have to change capitalization)
	['issue'] = '$1 No.&amp;nbsp;$2',												-- $1 is sepc

	['art'] = '$1 Art.&amp;nbsp;$2',												-- $1 is sepc; for {{cite conference}} only
	['vol-art'] = '$1 Vol.&amp;nbsp;$2, art.&amp;nbsp;$3',								-- sepc, volume, article-number; for {{cite conference}} only

	['j-vol'] = '$1 $2',														-- sepc, volume; bold journal volume is in presentation{}
	['j-issue'] = ' ($1)',
	['j-article-num'] = ' $1',													-- TODO: any punctuation here? static text?

	['nopp'] = '$1 $2';															-- page(s) without prefix; $1 is sepc

	['p-prefix'] = "$1 p.&amp;nbsp;$2",												-- $1 is sepc
	['pp-prefix'] = "$1 pp.&amp;nbsp;$2",											-- $1 is sepc
	['j-page(s)'] = ': $1',														-- same for page and pages

	['sheet'] = '$1 Sheet&amp;nbsp;$2',												-- $1 is sepc
	['sheets'] = '$1 Sheets&amp;nbsp;$2',											-- $1 is sepc
	['j-sheet'] = ': Sheet&amp;nbsp;$1',
	['j-sheets'] = ': Sheets&amp;nbsp;$1',
	
	['language'] = '(in $1)',
	['via'] = " &amp;ndash; via $1",
	['event'] = 'Event occurs at',
	['minutes'] = 'minutes in',
	
	-- Determines the location of the help page
	['help page link'] = 'Help:CS1 errors',
	['help page label'] = 'help',
	
	-- categories
	['cat wikilink'] = '[[Category:$1]]',										-- $1 is the category name
	[':cat wikilink'] = '[[:Category:$1|link]]',								-- category name as maintenance message wikilink; $1 is the category name

	-- Internal errors (should only occur if configuration is bad)
	['undefined_error'] = 'Called with an undefined error condition',
	['unknown_ID_key'] = 'Unrecognized ID key: ',								-- an ID key in id_handlers not found in ~/Identifiers func_map{}
	['unknown_ID_access'] = 'Unrecognized ID access keyword: ',					-- an ID access keyword in id_handlers not found in keywords_lists['id-access']{}
	['unknown_argument_map'] = 'Argument map not defined for this variable',
	['bare_url_no_origin'] = 'Bare URL found but origin indicator is nil or empty',
	
	['warning_msg_e'] = '&lt;span style="color:#d33"&gt;One or more &lt;code style="color: inherit; background: inherit; border: none; padding: inherit;"&gt;&amp;#123;{$1}}&lt;/code&gt; templates have errors&lt;/span&gt;; messages may be hidden ([[Help:CS1_errors#Controlling_error_message_display|help]]).';	-- $1 is template link
	['warning_msg_m'] = '&lt;span style="color:#3a3"&gt;One or more &lt;code style="color: inherit; background: inherit; border: none; padding: inherit;"&gt;&amp;#123;{$1}}&lt;/code&gt; templates have maintenance messages&lt;/span&gt;; messages may be hidden ([[Help:CS1_errors#Controlling_error_message_display|help]]).';	-- $1 is template link
	}


--[[--------------------------&lt; C I T A T I O N _ C L A S S _ M A P &gt;------------------------------------------

this table maps the value assigned to |CitationClass= in the cs1|2 templates to the canonical template name when
the value assigned to |CitationClass= is different from the canonical template name.  |CitationClass= values are
used as class attributes in the &lt;cite&gt; tag that encloses the citation so these names may not contain spaces while
the canonical template name may.  These names are used in warning_msg_e and warning_msg_m to create links to the
template's documentation when an article is displayed in preview mode.

Most cs1|2 template |CitationClass= values at en.wiki match their canonical template names so are not listed here.

]]

	local citation_class_map_t = {												-- TODO: if kept, these and all other config.CitationClass 'names' require some sort of i18n
		['arxiv'] = 'arXiv',
		['audio-visual'] = 'AV media',
		['AV-media-notes'] = 'AV media notes',
		['biorxiv'] = 'bioRxiv',
		['citeseerx'] = 'CiteSeerX',
		['encyclopaedia'] = 'encyclopedia',
		['mailinglist'] = 'mailing list',
		['medrxiv'] = 'medRxiv',
		['pressrelease'] = 'press release',
		['ssrn'] = 'SSRN',
		['techreport'] = 'tech report',
		}


--[=[-------------------------&lt; E T _ A L _ P A T T E R N S &gt;--------------------------------------------------

This table provides Lua patterns for the phrase "et al" and variants in name text
(author, editor, etc.). The main module uses these to identify and emit the 'etal' message.

]=]

local et_al_patterns = {
	"[;,]? *[\"']*%f[%a][Ee][Tt]%.? *[Aa][Ll][%.;,\"']*$",						-- variations on the 'et al' theme
	"[;,]? *[\"']*%f[%a][Ee][Tt]%.? *[Aa][Ll][Ii][AaIi][Ee]?[%.;,\"']*$",		-- variations on the 'et alia', 'et alii' and 'et aliae' themes (false positive 'et aliie' unlikely to match)
	"[;,]? *%f[%a]and [Oo]thers",												-- an alternative to et al.
	"%[%[ *[Ee][Tt]%.? *[Aa][Ll]%.? *%]%]",										-- a wikilinked form
	"%(%( *[Ee][Tt]%.? *[Aa][Ll]%.? *%)%)",										-- a double-bracketed form (to counter partial removal of ((...)) syntax)
	"[%(%[] *[Ee][Tt]%.? *[Aa][Ll]%.? *[%)%]]",									-- a bracketed form
	}


--[[--------------------------&lt; P R E S E N T A T I O N &gt;------------------------

Fixed presentation markup.  Originally part of citation_config.messages it has
been moved into its own, more semantically correct place.

]]

local presentation = 
	{
	-- .citation-comment class is specified at Help:CS1_errors#Controlling_error_message_display
	['hidden-error'] = '&lt;span class="cs1-hidden-error citation-comment"&gt;$1&lt;/span&gt;',
	['visible-error'] = '&lt;span class="cs1-visible-error citation-comment"&gt;$1&lt;/span&gt;',
	['hidden-maint'] = '&lt;span class="cs1-maint citation-comment"&gt;$1&lt;/span&gt;',
	
	['accessdate'] = '&lt;span class="reference-accessdate"&gt;$1$2&lt;/span&gt;',			-- to allow editors to hide accessdate using personal CSS

	['bdi'] = '&lt;bdi$1&gt;$2&lt;/bdi&gt;',												-- bidirectional isolation used with |script-title= and the like

	['cite'] = '&lt;cite class="$1"&gt;$2&lt;/cite&gt;';									-- for use when citation does not have a namelist and |ref= not set so no id="..." attribute
	['cite-id'] = '&lt;cite id="$1" class="$2"&gt;$3&lt;/cite&gt;';							-- for use when when |ref= is set or when citation has a namelist

	['format'] = ' &lt;span class="cs1-format"&gt;($1)&lt;/span&gt;',						-- for |format=, |chapter-format=, etc.
	['interwiki'] = ' &lt;span class="cs1-format"&gt;[in $1]&lt;/span&gt;',					-- for interwiki-language-linked author, editor, etc
	['interproj'] = ' &lt;span class="cs1-format"&gt;[at $1]&lt;/span&gt;',					-- for interwiki-project-linked author, editor, etc (:d: and :s: supported; :w: ignored)

	-- various access levels, for |access=, |doi-access=, |arxiv=, ...
	-- narrow no-break space &amp;#8239; may work better than nowrap CSS. Or not? Browser support?

	['ext-link-access-signal'] = '&lt;span class="$1" title="$2"&gt;$3&lt;/span&gt;',		-- external link with appropriate lock icon
		['free'] = {class='cs1-lock-free', title='Freely accessible'},			-- classes defined in Module:Citation/CS1/styles.css
		['registration'] = {class='cs1-lock-registration', title='Free registration required'},
		['limited'] = {class='cs1-lock-limited', title='Free access subject to limited trial, subscription normally required'},
		['subscription'] = {class='cs1-lock-subscription', title='Paid subscription required'},

	['interwiki-icon'] = '&lt;span class="$1" title="$2"&gt;$3&lt;/span&gt;',
		['class-wikisource'] = 'cs1-ws-icon',

	['italic-title'] = "''$1''",

	['kern-left'] = '&lt;span class="cs1-kern-left"&gt;&lt;/span&gt;$1',					-- spacing to use when title contains leading single or double quote mark
	['kern-right'] = '$1&lt;span class="cs1-kern-right"&gt;&lt;/span&gt;',					-- spacing to use when title contains trailing single or double quote mark

	['nowrap1'] = '&lt;span class="nowrap"&gt;$1&lt;/span&gt;',								-- for nowrapping an item: &lt;span ...&gt;yyyy-mm-dd&lt;/span&gt;
	['nowrap2'] = '&lt;span class="nowrap"&gt;$1&lt;/span&gt; $2',							-- for nowrapping portions of an item: &lt;span ...&gt;dd mmmm&lt;/span&gt; yyyy (note white space)

	['ocins'] = '&lt;span title="$1" class="Z3988"&gt;&lt;/span&gt;',
	
	['parameter'] = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',
	
	['ps_cs1'] = '.';															-- CS1 style postscript (terminal) character
	['ps_cs2'] = '';															-- CS2 style postscript (terminal) character (empty string)

	['quoted-text'] = '&lt;q&gt;$1&lt;/q&gt;',												-- for wrapping |quote= content
	['quoted-title'] = '"$1"',

	['sep_cs1'] = '.',															-- CS1 element separator
	['sep_cs2'] = ',',															-- CS2 separator
	['sep_nl'] = ';',															-- CS1|2 style name-list separator between names is a semicolon
	['sep_nl_and'] = ' and ',													-- used as last nl sep when |name-list-style=and and list has 2 items
	['sep_nl_end'] = '; and ',													-- used as last nl sep when |name-list-style=and and list has 3+ names
	['sep_name'] = ', ',														-- CS1|2 style last/first separator is &lt;comma&gt;&lt;space&gt;
	['sep_nl_vanc'] = ',',														-- Vancouver style name-list separator between authors is a comma
	['sep_name_vanc'] = ' ',													-- Vancouver style last/first separator is a space

	['sep_list'] = ', ',														-- used for |language= when list has 3+ items except for last sep which uses sep_list_end
	['sep_list_pair'] = ' and ',												-- used for |language= when list has 2 items
	['sep_list_end'] = ', and ',												-- used as last list sep for |language= when list has 3+ items
	
	['trans-italic-title'] = "&amp;#91;''$1''&amp;#93;",
	['trans-quoted-title'] = "&amp;#91;$1&amp;#93;",									-- for |trans-title= and |trans-quote=
	['vol-bold'] = '$1 &lt;b&gt;$2&lt;/b&gt;',												-- sepc, volume; for bold journal cites; for other cites ['vol'] in messages{}
	}

	
--[[--------------------------&lt; A L I A S E S &gt;---------------------------------

Aliases table for commonly passed parameters.

Parameter names on the right side in the assignments in this table must have been
defined in the Whitelist before they will be recognized as valid parameter names

]]

local aliases = {
	['AccessDate'] = {'access-date', 'accessdate'},								-- Used by InternetArchiveBot
	['Agency'] = 'agency',
	['ArchiveDate'] = {'archive-date', 'archivedate'},							-- Used by InternetArchiveBot
	['ArchiveFormat'] = 'archive-format',
	['ArchiveURL'] = {'archive-url', 'archiveurl'},								-- Used by InternetArchiveBot
	['ArticleNumber'] = 'article-number',
	['ASINTLD'] = 'asin-tld',
	['At'] = 'at',																-- Used by InternetArchiveBot
	['Authors'] = {'authors', 'people', 'credits'},
	['BookTitle'] = {'book-title', 'booktitle'},
	['Cartography'] = 'cartography',
	['Chapter'] = {'chapter', 'contribution', 'entry', 'article', 'section'},
	['ChapterFormat'] = {'chapter-format', 'contribution-format', 'entry-format',
		'article-format', 'section-format'};
	['ChapterURL'] = {'chapter-url', 'contribution-url', 'entry-url', 'article-url', 'section-url', 'chapterurl'},	-- Used by InternetArchiveBot
	['ChapterUrlAccess'] = {'chapter-url-access', 'contribution-url-access',
		'entry-url-access', 'article-url-access', 'section-url-access'},		-- Used by InternetArchiveBot
	['Class'] = 'class',														-- cite arxiv and arxiv identifier
	['Collaboration'] = 'collaboration',
	['Conference'] = {'conference', 'event'},
	['ConferenceFormat'] = 'conference-format',
	['ConferenceURL'] = 'conference-url',										-- Used by InternetArchiveBot
	['Date'] = {'date', 'air-date', 'airdate'},									-- air-date and airdate for cite episode and cite serial only
	['Degree'] = 'degree',
	['DF'] = 'df',
	['DisplayAuthors'] = {'display-authors', 'display-subjects'},
	['DisplayContributors'] = 'display-contributors',
	['DisplayEditors'] = 'display-editors',
	['DisplayInterviewers'] = 'display-interviewers',
	['DisplayTranslators'] = 'display-translators',
	['Docket'] = 'docket',
	['DoiBroken'] = 'doi-broken-date',
	['Edition'] = 'edition',
	['Embargo'] = 'pmc-embargo-date',
	['Encyclopedia'] = {'encyclopedia', 'encyclopaedia', 'dictionary'},			-- cite encyclopedia only
	['Episode'] = 'episode',													-- cite serial only TODO: make available to cite episode?
	['Format'] = 'format',
	['ID'] = {'id', 'ID'},
	['Inset'] = 'inset',
	['Issue'] = {'issue', 'number'},
	['Language'] = {'language', 'lang'},
	['MailingList'] = {'mailing-list', 'mailinglist'},							-- cite mailing list only
	['Map'] = 'map',															-- cite map only
	['MapFormat'] = 'map-format',												-- cite map only
	['MapURL'] = {'map-url', 'mapurl'},											-- cite map only -- Used by InternetArchiveBot
	['MapUrlAccess'] = 'map-url-access',										-- cite map only -- Used by InternetArchiveBot
	['Minutes'] = 'minutes',
	['Mode'] = 'mode',
	['NameListStyle'] = 'name-list-style',
	['Network'] = 'network',
	['Newsgroup'] = 'newsgroup',												-- cite newsgroup only
	['NoPP'] = {'no-pp', 'nopp'},
	['NoTracking'] = {'no-tracking', 'template-doc-demo'},
	['Number'] = 'number',														-- this case only for cite techreport
	['OrigDate'] = {'orig-date', 'orig-year', 'origyear'},
	['Others'] = 'others',
	['Page'] = {'page', 'p'},													-- Used by InternetArchiveBot
	['Pages'] = {'pages', 'pp'},												-- Used by InternetArchiveBot
	['Periodical'] = {'journal', 'magazine', 'newspaper', 'periodical', 'website', 'work'},
	['Place'] = {'place', 'location'},
	['PostScript'] = 'postscript',
	['PublicationDate'] = {'publication-date', 'publicationdate'},
	['PublicationPlace'] = {'publication-place', 'publicationplace'},
	['PublisherName'] = {'publisher', 'institution'},
	['Quote'] = {'quote', 'quotation'},
	['QuotePage'] = 'quote-page',
	['QuotePages'] = 'quote-pages',
	['Ref'] = 'ref',
	['Scale'] = 'scale',
	['ScriptChapter'] = {'script-chapter', 'script-contribution', 'script-entry',
		'script-article', 'script-section'},
	['ScriptMap'] = 'script-map',
	['ScriptPeriodical'] = {'script-journal', 'script-magazine', 'script-newspaper',
		'script-periodical', 'script-website', 'script-work'},
	['ScriptQuote'] = 'script-quote',
	['ScriptTitle'] = 'script-title',											-- Used by InternetArchiveBot
	['Season'] = 'season',
	['Sections'] = 'sections',													-- cite map only
	['Series'] = {'series', 'version'},
	['SeriesLink'] = {'series-link', 'serieslink'},
	['SeriesNumber'] = {'series-number', 'series-no'},
	['Sheet'] = 'sheet',														-- cite map only
	['Sheets'] = 'sheets',														-- cite map only
	['Station'] = 'station',
	['Time'] = 'time',
	['TimeCaption'] = 'time-caption',
	['Title'] = 'title',														-- Used by InternetArchiveBot
	['TitleLink'] = {'title-link', 'episode-link', 'episodelink'},				-- Used by InternetArchiveBot
	['TitleNote'] = {'title-note', 'department'},
	['TitleType'] = {'type', 'medium'},
	['TransChapter'] = {'trans-article', 'trans-chapter', 'trans-contribution',
		'trans-entry', 'trans-section'},
	['Transcript'] = 'transcript',
	['TranscriptFormat'] = 'transcript-format',	
	['TranscriptURL'] = 'transcript-url',										-- Used by InternetArchiveBot
	['TransMap'] = 'trans-map',													-- cite map only
	['TransPeriodical'] = {'trans-journal', 'trans-magazine', 'trans-newspaper',
		'trans-periodical', 'trans-website', 'trans-work'},
	['TransQuote'] = 'trans-quote',
	['TransTitle'] = 'trans-title',												-- Used by InternetArchiveBot
	['URL'] = {'url', 'URL'},													-- Used by InternetArchiveBot
	['UrlAccess'] = 'url-access',												-- Used by InternetArchiveBot
	['UrlStatus'] = 'url-status',												-- Used by InternetArchiveBot
	['Vauthors'] = 'vauthors',
	['Veditors'] = 'veditors',
	['Via'] = 'via',
	['Volume'] = 'volume',
	['Year'] = 'year',

	['AuthorList-First'] = {"first#", "author-first#", "author#-first", "author-given#", "author#-given",
		"subject-first#", "subject#-first", "subject-given#", "subject#-given",
		"given#"},
	['AuthorList-Last'] = {"last#", "author-last#", "author#-last", "author-surname#", "author#-surname",
		"subject-last#", "subject#-last", "subject-surname#", "subject#-surname",
		"author#", 'host#', "subject#", "surname#"},
	['AuthorList-Link'] = {"author-link#", "author#-link", "subject-link#",
		"subject#-link", "authorlink#", "author#link"},
	['AuthorList-Mask'] = {"author-mask#", "author#-mask", "subject-mask#", "subject#-mask"},

	['ContributorList-First'] = {'contributor-first#', 'contributor#-first',
		'contributor-given#', 'contributor#-given'},
	['ContributorList-Last'] = {'contributor-last#', 'contributor#-last',
		'contributor-surname#', 'contributor#-surname', 'contributor#'},
	['ContributorList-Link'] = {'contributor-link#', 'contributor#-link'},
	['ContributorList-Mask'] = {'contributor-mask#', 'contributor#-mask'},

	['EditorList-First'] = {"editor-first#", "editor#-first", "editor-given#", "editor#-given"},
	['EditorList-Last'] = {"editor-last#", "editor#-last", "editor-surname#",
		"editor#-surname", "editor#"},
	['EditorList-Link'] = {"editor-link#", "editor#-link"},
	['EditorList-Mask'] = {"editor-mask#", "editor#-mask"},
	
	['InterviewerList-First'] = {'interviewer-first#', 'interviewer#-first',
		'interviewer-given#', 'interviewer#-given'},
	['InterviewerList-Last'] = {'interviewer-last#', 'interviewer#-last',
		'interviewer-surname#', 'interviewer#-surname', 'interviewer#'},
	['InterviewerList-Link'] = {'interviewer-link#', 'interviewer#-link'},
	['InterviewerList-Mask'] = {'interviewer-mask#', 'interviewer#-mask'},

	['TranslatorList-First'] = {'translator-first#', 'translator#-first',
		'translator-given#', 'translator#-given'},
	['TranslatorList-Last'] = {'translator-last#', 'translator#-last',
		'translator-surname#', 'translator#-surname', 'translator#'},
	['TranslatorList-Link'] = {'translator-link#', 'translator#-link'},
	['TranslatorList-Mask'] = {'translator-mask#', 'translator#-mask'},
	}


--[[--------------------------&lt; P U N C T _ S K I P &gt;---------------------------

builds a table of parameter names that the extraneous terminal punctuation check should not check.

]]

local punct_meta_params = {														-- table of aliases[] keys (meta parameters); each key has a table of parameter names for a value
	'BookTitle', 'Chapter', 'ScriptChapter', 'ScriptTitle', 'Title', 'TransChapter', 'Transcript', 'TransMap',	'TransTitle',	-- title-holding parameters
	'AuthorList-Mask', 'ContributorList-Mask', 'EditorList-Mask', 'InterviewerList-Mask', 'TranslatorList-Mask',	-- name-list mask may have name separators
	'PostScript', 'Quote', 'ScriptQuote', 'TransQuote', 'Ref',											-- miscellaneous
	'ArchiveURL', 'ChapterURL', 'ConferenceURL', 'MapURL', 'TranscriptURL', 'URL',						-- URL-holding parameters
	}

local url_meta_params = {														-- table of aliases[] keys (meta parameters); each key has a table of parameter names for a value
	'ArchiveURL', 'ChapterURL', 'ConferenceURL', 'ID', 'MapURL', 'TranscriptURL', 'URL',		-- parameters allowed to hold urls
	'Page', 'Pages', 'At', 'QuotePage', 'QuotePages',							-- insource locators allowed to hold urls
	}

local function build_skip_table (skip_t, meta_params)
	for _, meta_param in ipairs (meta_params) do								-- for each meta parameter key
		local params = aliases[meta_param];										-- get the parameter or the table of parameters associated with the meta parameter name
		if 'string' == type (params) then
			skip_t[params] = 1;													-- just a single parameter
		else
			for _, param in ipairs (params) do									-- get the parameter name
				skip_t[param] = 1;												-- add the parameter name to the skip table
				local count;
				param, count = param:gsub ('#', '');							-- remove enumerator marker from enumerated parameters
				if 0 ~= count then												-- if removed
					skip_t[param] = 1;											-- add param name without enumerator marker
				end
			end
		end
	end
	return skip_t;
end

local punct_skip = {};
local url_skip = {};


--[[--------------------------&lt; S I N G L E - L E T T E R   S E C O N D - L E V E L   D O M A I N S &gt;----------

this is a list of tlds that are known to have single-letter second-level domain names.  This list does not include
ccTLDs which are accepted in is_domain_name().

]]

local single_letter_2nd_lvl_domains_t = {'cash', 'company', 'foundation', 'org', 'today'};


--[[-----------&lt; S P E C I A L   C A S E   T R A N S L A T I O N S &gt;------------

This table is primarily here to support internationalization.  Translations in
this table are used, for example, when an error message, category name, etc.,
is extracted from the English alias key.  There may be other cases where
this translation table may be useful.

]]
local is_Latn = 'A-Za-z\195\128-\195\150\195\152-\195\182\195\184-\198\191\199\132-\201\143';
local special_case_translation = {
	['AuthorList'] = 'authors list',											-- used to assemble maintenance category names
	['ContributorList'] = 'contributors list',									-- translation of these names plus translation of the base maintenance category names in maint_cats{} table below
	['EditorList'] = 'editors list',											-- must match the names of the actual categories
	['InterviewerList'] = 'interviewers list',									-- this group or translations used by name_has_ed_markup() and name_has_mult_names()
	['TranslatorList'] = 'translators list',
	
																				-- Lua patterns to match pseudo-titles used by InternetArchiveBot and others as placeholder for unknown |title= value
	['archived_copy'] = {														-- used with CS1 maint: Archive[d] copy as title
		['en'] = '^archived?%s+copy$',											-- for English; translators: keep this because templates imported from en.wiki
		['local'] = nil,														-- translators: replace ['local'] = nil with lowercase translation only when bots or tools create generic titles in your language
		},

																				-- Lua patterns to match generic titles; usually created by bots or reference filling tools
																				-- translators: replace ['local'] = nil with lowercase translation only when bots or tools create generic titles in your language
		-- generic titles and patterns in this table should be lowercase only
		-- leave ['local'] nil except when there is a matching generic title in your language
		-- boolean 'true' for plain-text searches; 'false' for pattern searches

	['generic_titles'] = {
		['accept'] = {
			},
		['reject'] = {
			{['en'] = {'^wayback%s+machine$', false},				['local'] = nil},
			{['en'] = {'are you a robot', true},					['local'] = nil},
			{['en'] = {'hugedomains.com', true},					['local'] = nil},
			{['en'] = {'^[%(%[{&lt;]?no +title[&gt;}%]%)]?$', false},		['local'] = nil},
			{['en'] = {'page not found', true},						['local'] = nil},
			{['en'] = {'subscribe to read', true},					['local'] = nil},
			{['en'] = {'^[%(%[{&lt;]?unknown[&gt;}%]%)]?$', false},		['local'] = nil},
			{['en'] = {'website is for sale', true},				['local'] = nil},
			{['en'] = {'^404', false},								['local'] = nil},
			{['en'] = {'internet archive wayback machine', true},	['local'] = nil},
			{['en'] = {'log into facebook', true},					['local'] = nil},
			{['en'] = {'login • instagram', true},					['local'] = nil},
			{['en'] = {'redirecting...', true},						['local'] = nil},
			{['en'] = {'usurped title', true},						['local'] = nil},	-- added by a GreenC bot
			{['en'] = {'webcite query result', true},				['local'] = nil},
			{['en'] = {'wikiwix\'s cache', true},					['local'] = nil},
			}
		},

		-- boolean 'true' for plain-text searches, search string must be lowercase only
		-- boolean 'false' for pattern searches
		-- leave ['local'] nil except when there is a matching generic name in your language

	['generic_names'] = {
		['accept'] = {
			{['en'] = {'%[%[[^|]*%(author%) *|[^%]]*%]%]', false},				['local'] = nil},
			},
		['reject'] = {
			{['en'] = {'about us', true},										['local'] = nil},
			{['en'] = {'%f[%a][Aa]dvisor%f[%A]', false},						['local'] = nil},
			{['en'] = {'allmusic', true},										['local'] = nil},
			{['en'] = {'%f[%a][Aa]uthor%f[%A]', false},							['local'] = nil},
			{['en'] = {'business', true},										['local'] = nil},
			{['en'] = {'cnn', true},											['local'] = nil},
			{['en'] = {'collaborator', true},									['local'] = nil},
			{['en'] = {'contributor', true},									['local'] = nil},
			{['en'] = {'contact us', true},										['local'] = nil},
			{['en'] = {'directory', true},										['local'] = nil},
			{['en'] = {'%f[%(%[][%(%[]%s*eds?%.?%s*[%)%]]?$', false},			['local'] = nil},
			{['en'] = {'[,%.%s]%f[e]eds?%.?$', false},							['local'] = nil},
			{['en'] = {'^eds?[%.,;]', false},									['local'] = nil},
			{['en'] = {'^[%(%[]%s*[Ee][Dd][Ss]?%.?%s*[%)%]]', false},			['local'] = nil},
			{['en'] = {'%f[%a][Ee]dited%f[%A]', false},							['local'] = nil},
			{['en'] = {'%f[%a][Ee]ditors?%f[%A]', false},						['local'] = nil},
			{['en'] = {'%f[%a]]Ee]mail%f[%A]', false},							['local'] = nil},
			{['en'] = {'facebook', true},										['local'] = nil},
			{['en'] = {'google', true},											['local'] = nil},
			{['en'] = {'home page', true},										['local'] = nil},
			{['en'] = {'^[Ii]nc%.?$', false},									['local'] = nil},
			{['en'] = {'instagram', true},										['local'] = nil},
			{['en'] = {'interviewer', true},									['local'] = nil},
			{['en'] = {'linkedIn', true},										['local'] = nil},
			{['en'] = {'^[Nn]ews$', false},										['local'] = nil},
			{['en'] = {'pinterest', true},										['local'] = nil},
			{['en'] = {'policy', true},											['local'] = nil},
			{['en'] = {'privacy', true},										['local'] = nil},
			{['en'] = {'reuters', true},										['local'] = nil},
			{['en'] = {'translator', true},										['local'] = nil},
			{['en'] = {'tumblr', true},											['local'] = nil},
			{['en'] = {'twitter', true},										['local'] = nil},
			{['en'] = {'site name', true},										['local'] = nil},
			{['en'] = {'statement', true},										['local'] = nil},
			{['en'] = {'submitted', true},										['local'] = nil},
			{['en'] = {'super.?user', false},									['local'] = nil},
			{['en'] = {'%f['..is_Latn..'][Uu]ser%f[^'..is_Latn..']', false},	['local'] = nil},
			{['en'] = {'verfasser', true},										['local'] = nil},
			}
	}
	}


--[[--------------------------&lt; D A T E _ N A M E S &gt;----------------------------------------------------------

This table of tables lists local language date names and fallback English date names.
The code in Date_validation will look first in the local table for valid date names.
If date names are not found in the local table, the code will look in the English table.

Because citations can be copied to the local wiki from en.wiki, the English is
required when the date-name translation function date_name_xlate() is used.

In these tables, season numbering is defined by
Extended Date/Time Format (EDTF) Specification (https://www.loc.gov/standards/datetime/)
which became part of ISO 8601 in 2019.  See '§Sub-year groupings'. The standard
defines various divisions using numbers 21-41. CS1|2 only supports generic seasons.
EDTF does support the distinction between north and south hemisphere seasons
but CS1|2 has no way to make that distinction.

33-36 = Quarter 1, Quarter 2, Quarter 3, Quarter 4 (3 months each)

The standard does not address 'named' dates so, for the purposes of CS1|2,
Easter and Christmas are defined here as 98 and 99, which should be out of the
ISO 8601 (EDTF) range of uses for a while.

local_date_names_from_mediawiki is a boolean.  When set to:
	true – module will fetch local month names from MediaWiki for both date_names['local']['long'] and date_names['local']['short']
	false – module will *not* fetch local month names from MediaWiki

Caveat lector:  There is no guarantee that MediaWiki will provide short month names.  At your wiki you can test
the results of the MediaWiki fetch in the debug console with this command (the result is alpha sorted):
	=mw.dumpObject (p.date_names['local'])

While the module can fetch month names from MediaWiki, it cannot fetch the quarter, season, and named date names
from MediaWiki.  Those must be translated manually.

]]

local local_date_names_from_mediawiki = true;									-- when false, manual translation required for date_names['local']['long'] and date_names['local']['short']
																				-- when true, module fetches long and short month names from MediaWiki
local date_names = {
	['en'] = {																	-- English
		['long']	= {['January'] = 1, ['February'] = 2, ['March'] = 3, ['April'] = 4, ['May'] = 5, ['June'] = 6, ['July'] = 7, ['August'] = 8, ['September'] = 9, ['October'] = 10, ['November'] = 11, ['December'] = 12},
		['short']	= {['Jan'] = 1, ['Feb'] = 2, ['Mar'] = 3, ['Apr'] = 4, ['May'] = 5, ['Jun'] = 6, ['Jul'] = 7, ['Aug'] = 8, ['Sep'] = 9, ['Oct'] = 10, ['Nov'] = 11, ['Dec'] = 12},
		['quarter'] = {['First Quarter'] = 33, ['Second Quarter'] = 34, ['Third Quarter'] = 35, ['Fourth Quarter'] = 36},
		['season']	= {['Winter'] = 24, ['Spring'] = 21, ['Summer'] = 22, ['Fall'] = 23, ['Autumn'] = 23},
		['named']	= {['Easter'] = 98, ['Christmas'] = 99},
		},
																				-- when local_date_names_from_mediawiki = false
	['local'] = {																-- replace these English date names with the local language equivalents
		['long']	= {['January'] = 1, ['February'] = 2, ['March'] = 3, ['April'] = 4, ['May'] = 5, ['June'] = 6, ['July'] = 7, ['August'] = 8, ['September'] = 9, ['October'] = 10, ['November'] = 11, ['December'] = 12},
		['short']	= {['Jan'] = 1, ['Feb'] = 2, ['Mar'] = 3, ['Apr'] = 4, ['May'] = 5, ['Jun'] = 6, ['Jul'] = 7, ['Aug'] = 8, ['Sep'] = 9, ['Oct'] = 10, ['Nov'] = 11, ['Dec'] = 12},
		['quarter'] = {['First Quarter'] = 33, ['Second Quarter'] = 34, ['Third Quarter'] = 35, ['Fourth Quarter'] = 36},
		['season']	= {['Winter'] = 24, ['Spring'] = 21, ['Summer'] = 22, ['Fall'] = 23, ['Autumn'] = 23},
		['named']	= {['Easter'] = 98, ['Christmas'] = 99},
		},
	['inv_local_long'] = {},													-- used in date reformatting &amp; translation; copy of date_names['local'].long where k/v are inverted: [1]='&lt;local name&gt;' etc.
	['inv_local_short'] = {},													-- used in date reformatting &amp; translation; copy of date_names['local'].short where k/v are inverted: [1]='&lt;local name&gt;' etc.
	['inv_local_quarter'] = {},													-- used in date translation; copy of date_names['local'].quarter where k/v are inverted: [1]='&lt;local name&gt;' etc.
	['inv_local_season'] = {},													-- used in date translation; copy of date_names['local'].season where k/v are inverted: [1]='&lt;local name&gt;' etc.
	['inv_local_named'] = {},													-- used in date translation; copy of date_names['local'].named where k/v are inverted: [1]='&lt;local name&gt;' etc.
	['local_digits'] = {['0'] = '0', ['1'] = '1', ['2'] = '2', ['3'] = '3', ['4'] = '4', ['5'] = '5', ['6'] = '6', ['7'] = '7', ['8'] = '8', ['9'] = '9'},	-- used to convert local language digits to Western 0-9
	['xlate_digits'] = {},
	}

if local_date_names_from_mediawiki then											-- if fetching local month names from MediaWiki is enabled
	local long_t = {};
	local short_t = {};
	for i=1, 12 do																-- loop 12x and 
		local name = lang_obj:formatDate('F', '2022-' .. i .. '-1');			-- get long month name for each i
		long_t[name] = i;														-- save it
		name = lang_obj:formatDate('M', '2022-' .. i .. '-1');					-- get short month name for each i
		short_t[name] = i;														-- save it
	end
	date_names['local']['long'] = long_t;										-- write the long table – overwrites manual translation
	date_names['local']['short'] = short_t;										-- write the short table – overwrites manual translation
end
																				-- create inverted date-name tables for reformatting and/or translation
for _, invert_t in pairs {{'long', 'inv_local_long'}, {'short', 'inv_local_short'}, {'quarter', 'inv_local_quarter'}, {'season', 'inv_local_season'}, {'named', 'inv_local_named'}} do
	for name, i in pairs (date_names['local'][invert_t[1]]) do					-- this table is ['name'] = i
		date_names[invert_t[2]][i] = name;										-- invert to get [i] = 'name' for conversions from ymd
	end
end

if local_digits_from_mediawiki then												-- if fetching local digits from MediaWiki is enabled
	local digits_t = {};
	for i=0, 9 do																-- loop 10x and 
		digits_t [lang_obj:formatNum (i)] = tostring (i);						-- format the loop indexer as local lang table index and assign loop indexer (a string) as the value
	end
	date_names['local_digits'] = digits_t;
end

for ld, ed in pairs (date_names.local_digits) do								-- make a digit translation table for simple date translation from en to local language using local_digits table
	date_names.xlate_digits [ed] = ld;											-- en digit becomes index with local digit as the value
end

local df_template_patterns = {													-- table of redirects to {{Use dmy dates}} and {{Use mdy dates}}
	'{{ *[Uu]se +(dmy) +dates *[|}]',	-- 1159k								-- sorted by approximate transclusion count
	'{{ *[Uu]se +(mdy) +dates *[|}]',	-- 212k
	'{{ *[Uu]se +(MDY) +dates *[|}]',	-- 788
	'{{ *[Uu]se +(DMY) +dates *[|}]',	-- 343
	'{{ *([Mm]dy) *[|}]',				-- 176
	'{{ *[Uu]se *(dmy) *[|}]',			-- 156 + 18
	'{{ *[Uu]se *(mdy) *[|}]',			-- 149 + 11
	'{{ *([Dd]my) *[|}]',				-- 56
	'{{ *[Uu]se +(MDY) *[|}]',			-- 5
	'{{ *([Dd]MY) *[|}]',				-- 3
	'{{ *[Uu]se(mdy)dates *[|}]',		-- 1
	'{{ *[Uu]se +(DMY) *[|}]',			-- 0
	'{{ *([Mm]DY) *[|}]',				-- 0
	}

local title_object = mw.title.getCurrentTitle();
local content;																	-- done this way  so that unused templates appear in unused-template-reports; self-transcluded makes them look like they are used
if 10 ~= title_object.namespace then											-- all namespaces except Template
	content = title_object:getContent() or '';									-- get the content of the article or ''; new pages edited w/ve do not have 'content' until saved; ve does not preview; phab:T221625
end

local function get_date_format ()
--	if title_object.namespace == 10 then										-- not in template space so that unused templates appear in unused-template-reports; 
	if not content then															-- nil content when we're in template
		return nil;																-- auto-formatting does not work in Template space so don't set global_df
	end
	for _, pattern in ipairs (df_template_patterns) do							-- loop through the patterns looking for {{Use dmy dates}} or {{Use mdy dates}} or any of their redirects
		local start, _, match = content:find(pattern);							-- match is the three letters indicating desired date format
		if match then
			local use_dates_template = content:match ('%b{}', start);							-- get the whole template
			if use_dates_template:match ('| *cs1%-dates *= *[lsy][sy]?') then				-- look for |cs1-dates=publication date length access-/archive-date length
				return match:lower() .. '-' .. use_dates_template:match ('| *cs1%-dates *= *([lsy][sy]?)');
			else
				return match:lower() .. '-all';									-- no |cs1-dates= k/v pair; return value appropriate for use in |df=
			end
		end
	end
end

local global_df;																-- TODO: add this to &lt;global_cs1_config_t&gt;?


--[[-----------------&lt; V O L U M E ,  I S S U E ,  P A G E S &gt;------------------

These tables hold cite class values (from the template invocation) and identify those templates that support
|volume=, |issue=, and |page(s)= parameters.  Cite conference and cite map require further qualification which
is handled in the main module.

]]

local templates_using_volume = {'citation', 'audio-visual', 'book', 'conference', 'encyclopaedia', 'interview', 'journal', 'magazine', 'map', 'news', 'report', 'techreport', 'thesis'}
local templates_using_issue = {'citation', 'conference', 'episode', 'interview', 'journal', 'magazine', 'map', 'news', 'podcast'}
local templates_not_using_page = {'audio-visual', 'episode', 'mailinglist', 'newsgroup', 'podcast', 'serial', 'sign', 'speech'}

--[[

These tables control when it is appropriate for {{citation}} to render |volume= and/or |issue=.  The parameter
names in the tables constrain {{citation}} so that its renderings match the renderings of the equivalent cs1
templates.  For example, {{cite web}} does not support |volume= so the equivalent {{citation |website=...}} must
not support |volume=.

]]

local citation_no_volume_t = {													-- {{citation}} does not render |volume= when these parameters are used
	'website', 'mailinglist', 'script-website',
	}
local citation_issue_t = {														-- {{citation}} may render |issue= when these parameters are used
	'journal', 'magazine', 'newspaper', 'periodical', 'work',
	'script-journal', 'script-magazine', 'script-newspaper', 'script-periodical', 'script-work',
	}

--[[

Patterns for finding extra text in |volume=, |issue=, |page=, |pages=

]]

local vol_iss_pg_patterns = {
	good_ppattern = '^P[^%.PpGg]',												-- OK to begin with uppercase P: P7 (page 7 of section P), but not p123 (page 123); TODO: this allows 'Pages' which it should not
	bad_ppatterns = {															-- patterns for |page= and |pages=
		'^[Pp][PpGg]?%.?[ %d]',
		'^[Pp][Pp]?%.&amp;nbsp;',													-- from {{p.}} and {{pp.}} templates
		'^[Pp]ages?',
		'^[Pp]gs.?',
		},
	vpatterns = {																-- patterns for |volume=
		'^volumes?',
		'^vols?[%.:=]?'
		},
	ipatterns = {																-- patterns for |issue=
		'^issues?',
		'^iss[%.:=]?',
		'^numbers?',
		'^nos?%A',																-- don't match 'november' or 'nostradamus'
		'^nr[%.:=]?',
		'^n[%.:= ]'																-- might be a valid issue without separator (space char is sep char here)
		}
	}

--[[--------------------------&lt; K E Y W O R D S &gt;-------------------------------

These tables hold keywords for those parameters that have defined sets of acceptable keywords.

]]

--[[-------------------&lt; K E Y W O R D S   T A B L E &gt;--------------------------

this is a list of keywords; each key in the list is associated with a table of
synonymous keywords possibly from different languages.

for I18N: add local-language keywords to value table; do not change the key.
For example, adding the German keyword 'ja':
	['affirmative'] = {'yes', 'true', 'y', 'ja'},

Because CS1|2 templates from en.wiki articles are often copied to other local wikis,
it is recommended that the English keywords remain in these tables.

]]

local keywords = {
	['amp'] = {'&amp;', 'amp', 'ampersand'}, 										-- |name-list-style=
	['and'] = {'and', 'serial'},												-- |name-list-style=
	['affirmative'] = {'yes', 'true', 'y'},										-- |no-tracking=, |no-pp= -- Used by InternetArchiveBot
	['afterword'] = {'afterword'},												-- |contribution=
	['bot: unknown'] = {'bot: unknown'},										-- |url-status= -- Used by InternetArchiveBot
	['cs1'] = {'cs1'},															-- |mode=
	['cs2'] = {'cs2'},															-- |mode=
	['dead'] = {'dead', 'deviated'},											-- |url-status= -- Used by InternetArchiveBot
	['dmy'] = {'dmy'},															-- |df=
	['dmy-all'] = {'dmy-all'},													-- |df=
	['foreword'] = {'foreword'},												-- |contribution=
	['free'] = {'free'},														-- |&lt;id&gt;-access= -- Used by InternetArchiveBot
	['harv'] = {'harv'},														-- |ref=; this no longer supported; is_valid_parameter_value() called with &lt;invert&gt; = true
	['introduction'] = {'introduction'},										-- |contribution=
	['limited'] = {'limited'},													-- |url-access= -- Used by InternetArchiveBot
	['live'] = {'live'},														-- |url-status= -- Used by InternetArchiveBot
	['mdy'] = {'mdy'},															-- |df=
	['mdy-all'] = {'mdy-all'},													-- |df=
	['none'] = {'none'},														-- |postscript=, |ref=, |title=, |type= -- Used by InternetArchiveBot
	['off'] = {'off'},															-- |title= (potentially also: |title-link=, |postscript=, |ref=, |type=)
	['preface'] = {'preface'},													-- |contribution=
	['registration'] = {'registration'},										-- |url-access= -- Used by InternetArchiveBot
	['subscription'] = {'subscription'},										-- |url-access= -- Used by InternetArchiveBot
	['unfit'] = {'unfit'},														-- |url-status= -- Used by InternetArchiveBot
	['usurped'] = {'usurped'},													-- |url-status= -- Used by InternetArchiveBot
	['vanc'] = {'vanc'},														-- |name-list-style=
	['ymd'] = {'ymd'},															-- |df=
	['ymd-all'] = {'ymd-all'},													-- |df=
	--	['yMd'] = {'yMd'},														-- |df=; not supported at en.wiki
	--	['yMd-all'] = {'yMd-all'},												-- |df=; not supported at en.wiki
	}


--[[------------------------&lt; X L A T E _ K E Y W O R D S &gt;---------------------

this function builds a list, keywords_xlate{}, of the keywords found in keywords{} where the values from keywords{}
become the keys in keywords_xlate{} and the keys from keywords{} become the values in keywords_xlate{}:
	['affirmative'] = {'yes', 'true', 'y'},		-- in keywords{}
becomes
	['yes'] = 'affirmative',					-- in keywords_xlate{}
	['true'] = 'affirmative',
	['y'] = 'affirmative',

the purpose of this function is to act as a translator between a non-English keyword and its English equivalent
that may be used in other modules of this suite

]]

local function xlate_keywords ()
	local out_table = {};														-- output goes here
	for k, keywords_t in pairs (keywords) do									-- spin through the keywords table
		for _, keyword in ipairs (keywords_t) do								-- for each keyword
			out_table[keyword] = k;												-- create an entry in the output table where keyword is the key
		end
	end
	
	return out_table;
end

local keywords_xlate = xlate_keywords ();										-- the list of translated keywords


--[[----------------&lt; M A K E _ K E Y W O R D S _ L I S T &gt;---------------------

this function assembles, for parameter-value validation, the list of keywords appropriate to that parameter.

keywords_lists{}, is a table of tables from keywords{}

]]

local function make_keywords_list (keywords_lists)
	local out_table = {};														-- output goes here
	
	for _, keyword_list in ipairs (keywords_lists) do							-- spin through keywords_lists{} and get a table of keywords
		for _, keyword in ipairs (keyword_list) do								-- spin through keyword_list{} and add each keyword, ...
			table.insert (out_table, keyword);									-- ... as plain text, to the output list
		end
	end
	return out_table;
end


--[[----------------&lt; K E Y W O R D S _ L I S T S &gt;-----------------------------

this is a list of lists of valid keywords for the various parameters in [key].
Generally the keys in this table are the canonical en.wiki parameter names though
some are contrived because of use in multiple differently named parameters:
['yes_true_y'], ['id-access'].

The function make_keywords_list() extracts the individual keywords from the
appropriate list in keywords{}.

The lists in this table are used to validate the keyword assignment for the
parameters named in this table's keys.

]]

local keywords_lists = {
	['yes_true_y'] = make_keywords_list ({keywords.affirmative}),
	['contribution'] = make_keywords_list ({keywords.afterword, keywords.foreword, keywords.introduction, keywords.preface}),
	['df'] = make_keywords_list ({keywords.dmy, keywords['dmy-all'], keywords.mdy, keywords['mdy-all'], keywords.ymd, keywords['ymd-all']}),
	--	['df'] = make_keywords_list ({keywords.dmy, keywords['dmy-all'], keywords.mdy, keywords['mdy-all'], keywords.ymd, keywords['ymd-all'], keywords.yMd, keywords['yMd-all']}),	-- not supported at en.wiki
	['mode'] = make_keywords_list ({keywords.cs1, keywords.cs2}),
	['name-list-style'] = make_keywords_list ({keywords.amp, keywords['and'], keywords.vanc}),
	['ref'] = make_keywords_list ({keywords.harv}),								-- inverted check; |ref=harv no longer supported
	['url-access'] = make_keywords_list ({keywords.subscription, keywords.limited, keywords.registration}),
	['url-status'] = make_keywords_list ({keywords.dead, keywords.live, keywords.unfit, keywords.usurped, keywords['bot: unknown']}),
	['id-access'] = make_keywords_list ({keywords.free}),
	}


--[[--------------------------&lt; C S 1 _ C O N F I G _ G E T &gt;--------------------------------------------------

fetch and validate values from {{cs1 config}} template to fill &lt;global_cs1_config_t&gt;

no error messages; when errors are detected, the parameter value from {{cs1 config}} is blanked.

Supports all parameters and aliases associated with the metaparameters: DisplayAuthors, DisplayContributors,
DisplayEditors, DisplayInterviewers, DisplayTranslators, NameListStyle, and Mode.  The DisplayWhatever metaparameters
accept numeric values only (|display-authors=etal and the like is not supported).

]]

local global_cs1_config_t = {};													-- TODO: add value returned from get_date_format() to this table?

local function get_cs1_config ()
--	if title_object.namespace == 10 then										-- not in template space so that unused templates appear in unused-template-reports; 
	if not content then															-- nil content when we're in template
		return nil;																-- auto-formatting does not work in Template space so don't set global_df
	end

	local start = content:find('{{ *[Cc][Ss]1 config *[|}]');					-- &lt;start&gt; is offset into &lt;content&gt; when {{cs1 config}} found; nil else
	if start then
		local cs1_config_template = content:match ('%b{}', start);				-- get the whole template

		if not cs1_config_template then
			return nil;
		end

		local params_t = mw.text.split (cs1_config_template:gsub ('[{}]', ''), '%s*|%s*');	-- remove '{{' and '}}'; make a sequence of parameter/value pairs (split on the pipe)
		table.remove (params_t, 1);												-- remove the template name because it isn't a parameter/value pair

		local config_meta_params_t = {'DisplayAuthors', 'DisplayContributors', 'DisplayEditors', 'DisplayInterviewers', 'DisplayTranslators', 'NameListStyle', 'Mode'};
		local meta_param_map_t = {};											-- list of accepted parameter names usable in {{cs1 config}} goes here
		
		for _, meta_param in ipairs (config_meta_params_t) do					-- for i18n using &lt;config_meta_params_t&gt;, map template parameter names to their metaparameter equivalents
			if 'table' == type (aliases[meta_param]) then						-- if &lt;meta_param&gt; is a sequence, 
				for _, param in ipairs (aliases[meta_param]) do					-- extract its contents
					meta_param_map_t[param] = meta_param;						-- and add to &lt;meta_param_map_t&gt;
				end
			else
				meta_param_map_t[aliases[meta_param]] = meta_param;				-- not a sequence so just add the parameter to &lt;meta_param_map_t&gt;
			end
		end

		local keywords_t = {};													-- map valid keywords to their associate metaparameter; reverse form of &lt;keyword_lists[key] for these metaparameters
		for _, metaparam_t in ipairs ({{'NameListStyle', 'name-list-style'}, {'Mode', 'mode'}}) do	-- only these metaparameter / keywords_lists key pairs
			for _, keyword in ipairs (keywords_lists[metaparam_t[2]]) do		-- spin through the list of keywords
				keywords_t[keyword] = metaparam_t[1];							-- add [keyword] = metaparameter to the map
			end
		end

		for _, param in ipairs (params_t) do									-- spin through the {{cs1 config}} parameters and fill &lt;global_cs1_config_t&gt;
			local k, v = param:match ('([^=]-)%s*=%s*(.+)');					-- &lt;k&gt; is the parameter name; &lt;v&gt; is parameter's assigned value
			if k then
				if k:find ('^display') then										-- if &lt;k&gt; is one of the |display-&lt;namelist&gt;= parameters
					if v:match ('%d+') then										-- the assigned value must be digits; doesn't accept 'etal'
						global_cs1_config_t[meta_param_map_t[k]]=v;				-- add the display param and its value to globals table
					end
				else
					if keywords_t[v] == meta_param_map_t[k] then				-- keywords_t[v] returns nil or the metaparam name; these must be the same
						global_cs1_config_t[meta_param_map_t[k]]=v;				-- add the parameter and its value to globals table
					end
				end
			end
		end
	end
end

get_cs1_config ();																-- fill &lt;global_cs1_config_t&gt;


--[[---------------------&lt; S T R I P M A R K E R S &gt;----------------------------

Common pattern definition location for stripmarkers so that we don't have to go
hunting for them if (when) MediaWiki changes their form.

]]

local stripmarkers = {
	['any'] = '\127[^\127]*UNIQ%-%-(%a+)%-[%a%d]+%-QINU[^\127]*\127',			-- capture returns name of stripmarker
	['math'] = '\127[^\127]*UNIQ%-%-math%-[%a%d]+%-QINU[^\127]*\127'			-- math stripmarkers used in coins_cleanup() and coins_replace_math_stripmarker()
	}


--[[------------&lt; I N V I S I B L E _ C H A R A C T E R S &gt;---------------------

This table holds non-printing or invisible characters indexed either by name or
by Unicode group. Values are decimal representations of UTF-8 codes.  The table
is organized as a table of tables because the Lua pairs keyword returns table
data in an arbitrary order.  Here, we want to process the table from top to bottom
because the entries at the top of the table are also found in the ranges specified
by the entries at the bottom of the table.

Also here is a pattern that recognizes stripmarkers that begin and end with the
delete characters.  The nowiki stripmarker is not an error but some others are
because the parameter values that include them become part of the template's
metadata before stripmarker replacement.

]]

local invisible_defs = {
	del = '\127',																-- used to distinguish between stripmarker and del char
	zwj = '\226\128\141',														-- used with capture because zwj may be allowed
	}

local invisible_chars = {
	{'replacement', '\239\191\189'},											-- U+FFFD, EF BF BD
	{'zero width joiner', '('.. invisible_defs.zwj .. ')'},						-- U+200D, E2 80 8D; capture because zwj may be allowed
	{'zero width space', '\226\128\139'},										-- U+200B, E2 80 8B
	{'hair space', '\226\128\138'},												-- U+200A, E2 80 8A
	{'soft hyphen', '\194\173'},												-- U+00AD, C2 AD
	{'horizontal tab', '\009'},													-- U+0009 (HT), 09
	{'line feed', '\010'},														-- U+000A (LF), 0A
	{'no-break space', '\194\160'},												-- U+00A0 (NBSP), C2 A0
	{'carriage return', '\013'},												-- U+000D (CR), 0D
	{'stripmarker', stripmarkers.any},											-- stripmarker; may or may not be an error; capture returns the stripmaker type
	{'delete', '('.. invisible_defs.del .. ')'},								-- U+007F (DEL), 7F; must be done after stripmarker test; capture to distinguish isolated del chars not part of stripmarker
	{'C0 control', '[\000-\008\011\012\014-\031]'},								-- U+0000–U+001F (NULL–US), 00–1F (except HT, LF, CR (09, 0A, 0D))
	{'C1 control', '[\194\128-\194\159]'},										-- U+0080–U+009F (XXX–APC), C2 80 – C2 9F
	--	{'Specials', '[\239\191\185-\239\191\191]'},								-- U+FFF9-U+FFFF, EF BF B9 – EF BF BF
	--	{'Private use area', '[\238\128\128-\239\163\191]'},						-- U+E000–U+F8FF, EE 80 80 – EF A3 BF
	--	{'Supplementary Private Use Area-A', '[\243\176\128\128-\243\191\191\189]'},	-- U+F0000–U+FFFFD, F3 B0 80 80 – F3 BF BF BD
	--	{'Supplementary Private Use Area-B', '[\244\128\128\128-\244\143\191\189]'},	-- U+100000–U+10FFFD, F4 80 80 80 – F4 8F BF BD
	}

--[[

Indic script makes use of zero width joiner as a character modifier so zwj
characters must be left in.  This pattern covers all of the unicode characters
for these languages:
	Devanagari					0900–097F – https://unicode.org/charts/PDF/U0900.pdf
		Devanagari extended		A8E0–A8FF – https://unicode.org/charts/PDF/UA8E0.pdf
	Bengali						0980–09FF – https://unicode.org/charts/PDF/U0980.pdf
	Gurmukhi					0A00–0A7F – https://unicode.org/charts/PDF/U0A00.pdf
	Gujarati					0A80–0AFF – https://unicode.org/charts/PDF/U0A80.pdf
	Oriya						0B00–0B7F – https://unicode.org/charts/PDF/U0B00.pdf
	Tamil						0B80–0BFF – https://unicode.org/charts/PDF/U0B80.pdf
	Telugu						0C00–0C7F – https://unicode.org/charts/PDF/U0C00.pdf
	Kannada						0C80–0CFF – https://unicode.org/charts/PDF/U0C80.pdf
	Malayalam					0D00–0D7F – https://unicode.org/charts/PDF/U0D00.pdf
plus the not-necessarily Indic scripts for Sinhala and Burmese:
	Sinhala						0D80-0DFF - https://unicode.org/charts/PDF/U0D80.pdf
	Myanmar						1000-109F - https://unicode.org/charts/PDF/U1000.pdf
		Myanmar extended A		AA60-AA7F - https://unicode.org/charts/PDF/UAA60.pdf
		Myanmar extended B		A9E0-A9FF - https://unicode.org/charts/PDF/UA9E0.pdf
the pattern is used by has_invisible_chars() and coins_cleanup()

]]

local indic_script = '[\224\164\128-\224\181\191\224\163\160-\224\183\191\225\128\128-\225\130\159\234\167\160-\234\167\191\234\169\160-\234\169\191]';

-- list of emoji that use a zwj character (U+200D) to combine with another emoji
-- from: https://unicode.org/Public/emoji/15.0/emoji-zwj-sequences.txt; version: 15.0; 2022-05-06
-- table created by: [[:en:Module:Make emoji zwj table]]
local emoji_t = {																-- indexes are decimal forms of the hex values in U+xxxx
	[9760] = true,																-- U+2620 ☠ skull and crossbones
	[9792] = true,																-- U+2640 ♀ female sign
	[9794] = true,																-- U+2642 ♂ male sign
	[9877] = true,																-- U+2695 ⚕ staff of aesculapius
	[9878] = true,																-- U+2696 ⚖ scales
	[9895] = true,																-- U+26A7 ⚧ male with stroke and male and female sign
	[9992] = true,																-- U+2708 ✈ airplane
	[10052] = true,																-- U+2744 ❄ snowflake
	[10084] = true,																-- U+2764 ❤ heavy black heart
	[11035] = true,																-- U+2B1B ⬛ black large square
	[127752] = true,															-- U+1F308 🌈 rainbow
	[127787] = true,															-- U+1F32B 🌫 fog
	[127806] = true,															-- U+1F33E 🌾 ear of rice
	[127859] = true,															-- U+1F373 🍳 cooking
	[127868] = true,															-- U+1F37C 🍼 baby bottle
	[127876] = true,															-- U+1F384 🎄 christmas tree
	[127891] = true,															-- U+1F393 🎓 graduation cap
	[127908] = true,															-- U+1F3A4 🎤 microphone
	[127912] = true,															-- U+1F3A8 🎨 artist palette
	[127979] = true,															-- U+1F3EB 🏫 school
	[127981] = true,															-- U+1F3ED 🏭 factory
	[128102] = true,															-- U+1F466 👦 boy
	[128103] = true,															-- U+1F467 👧 girl
	[128104] = true,															-- U+1F468 👨 man
	[128105] = true,															-- U+1F469 👩 woman
	[128139] = true,															-- U+1F48B 💋 kiss mark
	[128168] = true,															-- U+1F4A8 💨 dash symbol
	[128171] = true,															-- U+1F4AB 💫 dizzy symbol
	[128187] = true,															-- U+1F4BB 💻 personal computer
	[128188] = true,															-- U+1F4BC 💼 brief case
	[128293] = true,															-- U+1F525 🔥 fire
	[128295] = true,															-- U+1F527 🔧 wrench
	[128300] = true,															-- U+1F52C 🔬 microscope
	[128488] = true,															-- U+1F5E8 🗨 left speech bubble
	[128640] = true,															-- U+1F680 🚀 rocket
	[128658] = true,															-- U+1F692 🚒 fire engine
	[129309] = true,															-- U+1F91D 🤝 handshake
	[129455] = true,															-- U+1F9AF 🦯 probing cane
	[129456] = true,															-- U+1F9B0 🦰 emoji component red hair
	[129457] = true,															-- U+1F9B1 🦱 emoji component curly hair
	[129458] = true,															-- U+1F9B2 🦲 emoji component bald
	[129459] = true,															-- U+1F9B3 🦳 emoji component white hair
	[129466] = true,															-- U+1F9BA 🦺 safety vest
	[129468] = true,															-- U+1F9BC 🦼 motorized wheelchair
	[129469] = true,															-- U+1F9BD 🦽 manual wheelchair
	[129489] = true,															-- U+1F9D1 🧑 adult
	[129657] = true,															-- U+1FA79 🩹 adhesive bandage
	[129778] = true,															-- U+1FAF2 🫲 leftwards hand
	}


--[[----------------------&lt; L A N G U A G E   S U P P O R T &gt;-------------------

These tables and constants support various language-specific functionality.

]]

--local this_wiki_code = mw.getContentLanguage():getCode();						-- get this wiki's language code
local this_wiki_code = lang_obj:getCode();										-- get this wiki's language code
if string.match (mw.site.server, 'wikidata') then
		this_wiki_code = mw.getCurrentFrame():callParserFunction('int', {'lang'}); -- on Wikidata so use interface language setting instead
	end

local mw_languages_by_tag_t = mw.language.fetchLanguageNames (this_wiki_code, 'all');	-- get a table of language tag/name pairs known to Wikimedia; used for interwiki tests
local mw_languages_by_name_t = {};
	for k, v in pairs (mw_languages_by_tag_t) do								-- build a 'reversed' table name/tag language pairs know to MediaWiki; used for |language=
		v = mw.ustring.lower (v);												-- lowercase for tag fetch; get name's proper case from mw_languages_by_tag_t[&lt;tag&gt;]
		if mw_languages_by_name_t[v] then										-- when name already in the table
			if 2 == #k or 3 == #k then											-- if tag does not have subtags
				mw_languages_by_name_t[v] = k;									-- prefer the shortest tag for this name
			end
		else																	-- here when name not in the table
			mw_languages_by_name_t[v] = k;										-- so add name and matching tag
		end
	end

local inter_wiki_map = {};														-- map of interwiki prefixes that are language-code prefixes
	for k, v in pairs (mw.site.interwikiMap ('local')) do						-- spin through the base interwiki map (limited to local)
		if mw_languages_by_tag_t[v["prefix"]] then								-- if the prefix matches a known language tag
			inter_wiki_map[v["prefix"]] = true;									-- add it to our local map
		end
	end


--[[--------------------&lt; S C R I P T _ L A N G _ C O D E S &gt;-------------------

This table is used to hold ISO 639-1 two-character and ISO 639-3 three-character
language codes that apply only to |script-title= and |script-chapter=

]]

local script_lang_codes = {
	'ab', 'am', 'ar', 'be', 'bg', 'bn', 'bo', 'bs', 'dv', 'dz', 'el', 'fa', 'gu', 'he',
	'hi', 'hy', 'ja', 'ka', 'kk', 'km', 'kn', 'ko', 'ku', 'ky', 'lo', 'mk',	'ml', 'mn',
	'mni', 'mr', 'my', 'ne', 'or', 'ota', 'pa', 'ps', 'ru', 'sd', 'si', 'sr', 'syc', 'ta',
	'te', 'tg', 'th', 'ti', 'tt', 'ug', 'uk', 'ur', 'uz', 'yi', 'yue', 'zh'
	};


--[[---------------&lt; L A N G U A G E   R E M A P P I N G &gt;----------------------

These tables hold language information that is different (correct) from MediaWiki's definitions

For each ['&lt;tag&gt;'] = 'language name' in lang_code_remap{} there must be a matching ['language name'] = {'language name', '&lt;tag&gt;'} in lang_name_remap{}

lang_tag_remap{}:
	key is always lowercase ISO 639-1, -2, -3 language tag or a valid lowercase IETF language tag
	value is properly spelled and capitalized language name associated with &lt;tag&gt;
	only one language name per &lt;tag&gt;;
	key/value pair must have matching entry in lang_name_remap{}

lang_name_remap{}:
	key is always lowercase language name
	value is a table the holds correctly spelled and capitalized language name [1] and associated tag [2] (tag must match a tag key in lang_tag_remap{})
	may have multiple keys referring to a common preferred name and tag; For example:
		['kolsch'] and ['kölsch'] both refer to 'Kölsch' and 'ksh'

]]

local lang_tag_remap = {														-- used for |language= and |script-title= / |script-chapter=
	['als'] = 'Tosk Albanian',													-- MediaWiki returns Alemannisch 
	['bh'] = 'Bihari',															-- MediaWiki uses 'bh' as a subdomain name for Bhojpuri Wikipedia: bh.wikipedia.org
	['bla'] = 'Blackfoot',														-- MediaWiki/IANA/ISO 639: Siksika; use en.wiki preferred name
	['bn'] = 'Bengali',															-- MediaWiki returns Bangla
	['ca-valencia'] = 'Valencian',												-- IETF variant of Catalan
	['fkv'] = 'Kven',															-- MediaWiki returns Kvensk
	['ilo'] = 'Ilocano',														-- MediaWiki/IANA/ISO 639: Iloko; use en.wiki preferred name
	['ksh'] = 'Kölsch',															-- MediaWiki: Colognian; use IANA/ISO 639 preferred name
	['ksh-x-colog'] = 'Colognian',												-- override MediaWiki ksh; no IANA/ISO 639 code for Colognian; IETF private code created at Module:Lang/data
	['mis-x-ripuar'] = 'Ripuarian',												-- override MediaWiki ksh; no IANA/ISO 639 code for Ripuarian; IETF private code created at Module:Lang/data
	['nan-tw'] = 'Taiwanese Hokkien',											-- make room for MediaWiki/IANA/ISO 639 nan: Min Nan Chinese and support en.wiki preferred name
	}

local lang_name_remap = {														-- used for |language=; names require proper capitalization; tags must be lowercase
	['alemannisch'] = {'Swiss German', 'gsw'},									-- not an ISO or IANA language name; MediaWiki uses 'als' as a subdomain name for Alemannic Wikipedia: als.wikipedia.org
	['bangla'] = {'Bengali', 'bn'},												-- MediaWiki returns Bangla (the endonym) but we want Bengali (the exonym); here we remap
	['bengali'] = {'Bengali', 'bn'},											-- MediaWiki doesn't use exonym so here we provide correct language name and 639-1 code
	['bhojpuri'] = {'Bhojpuri', 'bho'},											-- MediaWiki uses 'bh' as a subdomain name for Bhojpuri Wikipedia: bh.wikipedia.org
	['bihari'] = {'Bihari', 'bh'},												-- MediaWiki replaces 'Bihari' with 'Bhojpuri' so 'Bihari' cannot be found
	['blackfoot'] = {'Blackfoot', 'bla'},										-- MediaWiki/IANA/ISO 639: Siksika; use en.wiki preferred name
	['colognian'] = {'Colognian', 'ksh-x-colog'},								-- MediaWiki preferred name for ksh
	['ilocano'] = {'Ilocano', 'ilo'},											-- MediaWiki/IANA/ISO 639: Iloko; use en.wiki preferred name
	['kolsch'] = {'Kölsch', 'ksh'},												-- use IANA/ISO 639 preferred name (use non-diacritical o instead of umlaut ö)
	['kölsch'] = {'Kölsch', 'ksh'},												-- use IANA/ISO 639 preferred name
	['kven'] = {'Kven', 'fkv'},													-- Unicode CLDR have decided not to support English language name for these two...
	['kvensk'] = {'Kven', 'fkv'},												-- ...they say to refer to IANA registry for English names
	['ripuarian'] = {'Ripuarian', 'mis-x-ripuar'},								-- group of dialects; no code in MediaWiki or in IANA/ISO 639
	['taiwanese hokkien'] = {'Taiwanese Hokkien', 'nan-tw'},					-- make room for MediaWiki/IANA/ISO 639 nan: Min Nan Chinese 
	['tosk albanian'] = {'Tosk Albanian', 'als'},								-- MediaWiki replaces 'Tosk Albanian' with 'Alemannisch' so 'Tosk Albanian' cannot be found
	['valencian'] = {'Valencian', 'ca-valencia'},								-- variant of Catalan; categorizes as Valencian
	}


--[[---------------&lt; P R O P E R T I E S _ C A T E G O R I E S &gt;----------------

Properties categories. These are used for investigating qualities of citations.

]]

local prop_cats = {
	['foreign-lang-source'] = 'CS1 $1-language sources ($2)',					-- |language= categories; $1 is foreign-language name, $2 is ISO639-1 code
	['foreign-lang-source-2'] = 'CS1 foreign language sources (ISO 639-2)|$1',	-- |language= category; a cat for ISO639-2 languages; $1 is the ISO 639-2 code used as a sort key
	['jul-greg-uncertainty'] = 'CS1: Julian–Gregorian uncertainty',				-- probably temporary cat to identify scope of template with dates 1 October 1582 – 1 January 1926
	['local-lang-source'] = 'CS1 $1-language sources ($2)',						-- |language= categories; $1 is local-language name, $2 is ISO639-1 code; not emitted when local_lang_cat_enable is false
	['location-test'] = 'CS1 location test',
	['long-vol'] = 'CS1: long volume value',									-- probably temporary cat to identify scope of |volume= values longer than 4 characters
	['script'] = 'CS1 uses $1-language script ($2)',							-- |script-title=xx: has matching category; $1 is language name, $2 is ISO639-1 code
	['tracked-param'] = 'CS1 tracked parameter: $1',							-- $1 is base (enumerators removed) parameter name
	['year-range-abbreviated'] = 'CS1: abbreviated year range',					-- probably temporary cat to identify scope of |date=, |year= values using YYYY–YY form
	}


--[[-------------------&lt; T I T L E _ T Y P E S &gt;--------------------------------

Here we map a template's CitationClass to TitleType (default values for |type= parameter)

]]

local title_types = {
	['AV-media-notes'] = 'Media notes',
	['document'] = 'Document',
	['interview'] = 'Interview',
	['mailinglist'] = 'Mailing list',
	['map'] = 'Map',
	['podcast'] = 'Podcast',
	['pressrelease'] = 'Press release',
	['report'] = 'Report',
	['speech'] = 'Speech',
	['techreport'] = 'Technical report',
	['thesis'] = 'Thesis',
	}


--[[===================&lt;&lt; E R R O R   M E S S A G I N G &gt;&gt;======================
]]

--[[----------&lt; E R R O R   M E S S A G E   S U P P L I M E N T S &gt;-------------

I18N for those messages that are supplemented with additional specific text that
describes the reason for the error

TODO: merge this with special_case_translations{}?
]]

local err_msg_supl = {
	['char'] = 'invalid character',												-- |isbn=, |sbn=
	['check'] = 'checksum',														-- |isbn=, |sbn=
	['flag'] = 'flag',															-- |archive-url=
	['form'] = 'invalid form',													-- |isbn=, |sbn=
	['group'] = 'invalid group id',												-- |isbn=
	['initials'] = 'initials',													-- Vancouver
	['invalid language code'] = 'invalid language code',						-- |script-&lt;param&gt;=
	['journal'] = 'journal',													-- |bibcode=
	['length'] = 'length',														-- |isbn=, |bibcode=, |sbn=
	['liveweb'] = 'liveweb',													-- |archive-url=
	['missing comma'] = 'missing comma',										-- Vancouver
	['missing prefix'] = 'missing prefix',										-- |script-&lt;param&gt;=
	['missing title part'] = 'missing title part',								-- |script-&lt;param&gt;=
	['name'] = 'name',															-- Vancouver
	['non-Latin char'] = 'non-Latin character',									-- Vancouver
	['path'] = 'path',															-- |archive-url=
	['prefix'] = 'invalid prefix',												-- |isbn=
	['punctuation'] = 'punctuation',											-- Vancouver
	['save'] = 'save command',													-- |archive-url=
	['suffix'] = 'suffix',														-- Vancouver
	['timestamp'] = 'timestamp',												-- |archive-url=
	['unknown language code'] = 'unknown language code',						-- |script-&lt;param&gt;=
	['value'] = 'value',														-- |bibcode=
	['year'] = 'year',															-- |bibcode=
	}


--[[--------------&lt; E R R O R _ C O N D I T I O N S &gt;---------------------------

Error condition table.  This table has two sections: errors at the top, maintenance
at the bottom.  Maint 'messaging' does not have a 'message' (message=nil)

The following contains a list of IDs for various error conditions defined in the
code.  For each ID, we specify a text message to display, an error category to
include, and whether the error message should be wrapped as a hidden comment.

Anchor changes require identical changes to matching anchor in Help:CS1 errors

TODO: rename error_conditions{} to something more generic; create separate error
and maint tables inside that?

]]

local error_conditions = {
	err_accessdate_missing_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;access-date=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'accessdate_missing_url',
		category = 'CS1 errors: access-date without URL',
		hidden = false
 		},
	err_apostrophe_markup = {
		message = 'Italic or bold markup not allowed in: &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'apostrophe_markup',
		category = 'CS1 errors: markup',
		hidden = false
 		},
	err_archive_date_missing_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-date=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt;',
		anchor = 'archive_date_missing_url',
		category = 'CS1 errors: archive-url',
		hidden = false
		},
	err_archive_date_url_ts_mismatch = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-date=&lt;/code&gt; / &lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt; timestamp mismatch',
		anchor = 'archive_date_url_ts_mismatch',
		category = 'CS1 errors: archive-url',
		hidden = false
		},
	err_archive_missing_date = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;archive-date=&lt;/code&gt;',
		anchor = 'archive_missing_date',
		category = 'CS1 errors: archive-url',
		hidden = false
		},
	err_archive_missing_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'archive_missing_url',
		category = 'CS1 errors: archive-url',
		hidden = false
		},
	err_archive_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt; is malformed: $1',	-- $1 is error message detail
		anchor = 'archive_url',
		category = 'CS1 errors: archive-url',
		hidden = false
		},
	err_arxiv_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;arxiv=&lt;/code&gt; required',
		anchor = 'arxiv_missing',
		category = 'CS1 errors: arXiv',											-- same as bad arxiv
		hidden = false
		},
	err_asintld_missing_asin = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;asin=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'asintld_missing_asin',
		category = 'CS1 errors: ASIN TLD',
		hidden = false
		},
	err_bad_arxiv = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;arxiv=&lt;/code&gt; value',
		anchor = 'bad_arxiv',
		category = 'CS1 errors: arXiv',
		hidden = false
		},
	err_bad_asin = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;asin=&lt;/code&gt; value',
		anchor = 'bad_asin',
		category ='CS1 errors: ASIN',
		hidden = false
		},
	err_bad_asin_tld = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;asin-tld=&lt;/code&gt; value',
		anchor = 'bad_asin_tld',
		category ='CS1 errors: ASIN TLD',
		hidden = false
		},
	err_bad_bibcode = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;bibcode=&lt;/code&gt; $1',		-- $1 is error message detail
		anchor = 'bad_bibcode',
		category = 'CS1 errors: bibcode',
		hidden = false
		},
	err_bad_biorxiv = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;biorxiv=&lt;/code&gt; value',
		anchor = 'bad_biorxiv',
		category = 'CS1 errors: bioRxiv',
		hidden = false
		},
	err_bad_citeseerx = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;citeseerx=&lt;/code&gt; value',
		anchor = 'bad_citeseerx',
		category = 'CS1 errors: citeseerx',
		hidden = false
		},
	err_bad_date = {
		message = 'Check date values in: $1',									-- $1 is a parameter name list
		anchor = 'bad_date',
		category = 'CS1 errors: dates',
		hidden = false
		},
	err_bad_doi = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;doi=&lt;/code&gt; value',
		anchor = 'bad_doi',
		category = 'CS1 errors: DOI',
		hidden = false
		},
	err_bad_hdl = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;hdl=&lt;/code&gt; value',
		anchor = 'bad_hdl',
		category = 'CS1 errors: HDL',
		hidden = false
		},
	err_bad_isbn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;isbn=&lt;/code&gt; value: $1',	-- $1 is error message detail
		anchor = 'bad_isbn',
		category = 'CS1 errors: ISBN',
		hidden = false
		},
	err_bad_ismn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;ismn=&lt;/code&gt; value',
		anchor = 'bad_ismn',
		category = 'CS1 errors: ISMN',
		hidden = false
		},
	err_bad_issn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;$1issn=&lt;/code&gt; value',	-- $1 is 'e' or '' for eissn or issn
		anchor = 'bad_issn',
		category = 'CS1 errors: ISSN',
		hidden = false
		},
	err_bad_jfm = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;jfm=&lt;/code&gt; value',
		anchor = 'bad_jfm',
		category = 'CS1 errors: JFM',
		hidden = false
		},
	err_bad_jstor = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;jstor=&lt;/code&gt; value',
		anchor = 'bad_jstor',
		category = 'CS1 errors: JSTOR',
		hidden = false
		},
	err_bad_lccn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;lccn=&lt;/code&gt; value',
		anchor = 'bad_lccn',
		category = 'CS1 errors: LCCN',
		hidden = false
		},
	err_bad_medrxiv = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;medrxiv=&lt;/code&gt; value',
		anchor = 'bad_medrxiv',
		category = 'CS1 errors: medRxiv',
		hidden = false
		},
	err_bad_mr = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;mr=&lt;/code&gt; value',
		anchor = 'bad_mr',
		category = 'CS1 errors: MR',
		hidden = false
		},
	err_bad_oclc = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;oclc=&lt;/code&gt; value',
		anchor = 'bad_oclc',
		category = 'CS1 errors: OCLC',
		hidden = false
		},
	err_bad_ol = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;ol=&lt;/code&gt; value',
		anchor = 'bad_ol',
		category = 'CS1 errors: OL',
		hidden = false
		},
	err_bad_osti = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;osti=&lt;/code&gt; value',
		anchor = 'bad_osti',
		category = 'CS1 errors: OSTI',
		hidden = false
		},
	err_bad_paramlink = {														-- for |title-link=, |author/editor/translator-link=, |series-link=, |episode-link=
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; value',		-- $1 is parameter name
		anchor = 'bad_paramlink',
		category = 'CS1 errors: parameter link',
		hidden = false
		},
	err_bad_pmc = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;pmc=&lt;/code&gt; value',
		anchor = 'bad_pmc',
		category = 'CS1 errors: PMC',
		hidden = false
		},
	err_bad_pmid = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;pmid=&lt;/code&gt; value',
		anchor = 'bad_pmid',
		category = 'CS1 errors: PMID',
		hidden = false
		},
	err_bad_rfc = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;rfc=&lt;/code&gt; value',
		anchor = 'bad_rfc',
		category = 'CS1 errors: RFC',
		hidden = false
		},
	err_bad_s2cid = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;s2cid=&lt;/code&gt; value',
		anchor = 'bad_s2cid',
		category = 'CS1 errors: S2CID',
		hidden = false
		},
	err_bad_sbn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;sbn=&lt;/code&gt; value: $1',	-- $1 is error message detail
		anchor = 'bad_sbn',
		category = 'CS1 errors: SBN',
		hidden = false
		},
	err_bad_ssrn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;ssrn=&lt;/code&gt; value',
		anchor = 'bad_ssrn',
		category = 'CS1 errors: SSRN',
		hidden = false
		},
	err_bad_url = {
		message = 'Check $1 value',												-- $1 is parameter name
		anchor = 'bad_url',
		category = 'CS1 errors: URL',
		hidden = false
		},
	err_bad_usenet_id = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;message-id=&lt;/code&gt; value',
		anchor = 'bad_message_id',
		category = 'CS1 errors: message-id',
		hidden = false
		},
	err_bad_zbl = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;zbl=&lt;/code&gt; value',
		anchor = 'bad_zbl',
		category = 'CS1 errors: Zbl',
		hidden = false
		},
	err_bare_url_missing_title = {
		message = '$1 missing title',											-- $1 is parameter name
		anchor = 'bare_url_missing_title',
		category = 'CS1 errors: bare URL',
		hidden = false
		},
	err_biorxiv_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;biorxiv=&lt;/code&gt; required',
		anchor = 'biorxiv_missing',
		category = 'CS1 errors: bioRxiv',										-- same as bad bioRxiv
		hidden = false
		},
	err_chapter_ignored = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; ignored',			-- $1 is parameter name
		anchor = 'chapter_ignored',
		category = 'CS1 errors: chapter ignored',
		hidden = false
		},
	err_citation_missing_title = {
		message = 'Missing or empty &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'citation_missing_title',
		category = 'CS1 errors: missing title',
		hidden = false
		},
	err_citeseerx_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;citeseerx=&lt;/code&gt; required',
		anchor = 'citeseerx_missing',
		category = 'CS1 errors: citeseerx',										-- same as bad citeseerx
		hidden = false
		},
	err_cite_web_url = {														-- this error applies to cite web and to cite podcast
		message = 'Missing or empty &lt;code class="cs1-code"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'cite_web_url',
		category = 'CS1 errors: requires URL',
		hidden = false
		},
	err_class_ignored = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;class=&lt;/code&gt; ignored',
		anchor = 'class_ignored',
		category = 'CS1 errors: class',
		hidden = false
		},
	err_contributor_ignored = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;contributor=&lt;/code&gt; ignored',
		anchor = 'contributor_ignored',
		category = 'CS1 errors: contributor',
		hidden = false
		},
	err_contributor_missing_required_param = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;contributor=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'contributor_missing_required_param',
		category = 'CS1 errors: contributor',
		hidden = false
		},
	err_deprecated_params = {
		message = 'Cite uses deprecated parameter &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'deprecated_params',
		category = 'CS1 errors: deprecated parameters',
		hidden = false
		},
	err_disp_name = {
		message = 'Invalid &lt;code class="cs1-code"&gt;&amp;#124;$1=$2&lt;/code&gt;',			-- $1 is parameter name; $2 is the assigned value
		anchor = 'disp_name',
		category = 'CS1 errors: display-names',
		hidden = false,
		},
	err_doibroken_missing_doi = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;doi=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'doibroken_missing_doi',
		category = 'CS1 errors: DOI',
		hidden = false
		},
	err_embargo_missing_pmc = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;pmc=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'embargo_missing_pmc',
		category = 'CS1 errors: PMC embargo',
		hidden = false
		},
	err_empty_citation = {
		message = 'Empty citation',
		anchor = 'empty_citation',
		category = 'CS1 errors: empty citation',
		hidden = false
		},
	err_etal = {
		message = 'Explicit use of et al. in: &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'explicit_et_al',
		category = 'CS1 errors: explicit use of et al.',
		hidden = false
		},
	err_extra_text_edition = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;edition=&lt;/code&gt; has extra text',
		anchor = 'extra_text_edition',
		category = 'CS1 errors: extra text: edition',
		hidden = false,
		},
	err_extra_text_issue = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; has extra text',		-- $1 is parameter name
		anchor = 'extra_text_issue',
		category = 'CS1 errors: extra text: issue',
		hidden = false,
		},
	err_extra_text_pages = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; has extra text',		-- $1 is parameter name
		anchor = 'extra_text_pages',
		category = 'CS1 errors: extra text: pages',
		hidden = false,
		},
	err_extra_text_volume = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; has extra text',		-- $1 is parameter name
		anchor = 'extra_text_volume',
		category = 'CS1 errors: extra text: volume',
		hidden = true,
		},
	err_first_missing_last = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; missing &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt;',	-- $1 is first alias, $2 is matching last alias
		anchor = 'first_missing_last',
		category = 'CS1 errors: missing name',									-- author, contributor, editor, interviewer, translator
		hidden = false
		},
	err_format_missing_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt;',	-- $1 is format parameter $2 is url parameter
		anchor = 'format_missing_url',
		category = 'CS1 errors: format without URL',
		hidden = false
		},
	err_generic_name = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; has generic name',	-- $1 is parameter name
		anchor = 'generic_name',
		category = 'CS1 errors: generic name',
		hidden = false,
		},
	err_generic_title = {
		message = 'Cite uses generic title',
		anchor = 'generic_title',
		category = 'CS1 errors: generic title',
		hidden = false,
		},
	err_invalid_param_val = {
		message = 'Invalid &lt;code class="cs1-code"&gt;&amp;#124;$1=$2&lt;/code&gt;',			-- $1 is parameter name $2 is parameter value
		anchor = 'invalid_param_val',
		category = 'CS1 errors: invalid parameter value',
		hidden = false
		},
	err_invisible_char = {
		message = '$1 in $2 at position $3',									-- $1 is invisible char $2 is parameter name $3 is position number
		anchor = 'invisible_char',
		category = 'CS1 errors: invisible characters',
		hidden = false
		},
	err_medrxiv_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;medrxiv=&lt;/code&gt; required',
		anchor = 'medrxiv_missing',
		category = 'CS1 errors: medRxiv',										-- same as bad medRxiv
		hidden = false
		},
	err_missing_name = {
		message = 'Missing &lt;code class="cs1-code"&gt;&amp;#124;$1$2=&lt;/code&gt;',			-- $1 is modified NameList; $2 is enumerator
		anchor = 'missing_name',
		category = 'CS1 errors: missing name',									-- author, contributor, editor, interviewer, translator
		hidden = false
		},
	err_missing_periodical = {
		message = 'Cite $1 requires &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt;',	-- $1 is cs1 template name; $2 is canonical periodical parameter name for cite $1
		anchor = 'missing_periodical',
		category = 'CS1 errors: missing periodical',
		hidden = true
		},
	err_missing_pipe = {
		message = 'Missing pipe in: &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'missing_pipe',
		category = 'CS1 errors: missing pipe',
		hidden = false
		},
	err_missing_publisher = {
		message = 'Cite $1 requires &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt;',	-- $1 is cs1 template name; $2 is canonical publisher parameter name for cite $1
		anchor = 'missing_publisher',
		category = 'CS1 errors: missing publisher',
		hidden = false
		},
	err_param_access_requires_param = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1-access=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',	-- $1 is parameter name
		anchor = 'param_access_requires_param',
		category = 'CS1 errors: param-access',
		hidden = false
		},
	err_param_has_ext_link = {
		message = 'External link in &lt;code class="cs1-code"&gt;$1&lt;/code&gt;',			-- $1 is parameter name
		anchor = 'param_has_ext_link',
		category = 'CS1 errors: external links',
		hidden = false
		},
	err_parameter_ignored = {
		message = 'Unknown parameter &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; ignored',	-- $1 is parameter name
		anchor = 'parameter_ignored',
		category = 'CS1 errors: unsupported parameter',
		hidden = false
		},
	err_parameter_ignored_suggest = {
		message = 'Unknown parameter &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; ignored (&lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt; suggested)',	-- $1 is unknown parameter $2 is suggested parameter name
		anchor = 'parameter_ignored_suggest',
		category = 'CS1 errors: unsupported parameter',
		hidden = false
		},
	err_periodical_ignored = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; ignored',			-- $1 is parameter name
		anchor = 'periodical_ignored',
		category = 'CS1 errors: periodical ignored',
		hidden = false
		},
	err_redundant_parameters = {
		message = 'More than one of $1 specified',								-- $1 is error message detail
		anchor = 'redundant_parameters',
		category = 'CS1 errors: redundant parameter',
		hidden = false
		},
	err_script_parameter = {
		message = 'Invalid &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;: $2',		-- $1 is parameter name $2 is script language code or error detail
		anchor = 'script_parameter',
		category = 'CS1 errors: script parameters',
		hidden = false
		},
	err_ssrn_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;ssrn=&lt;/code&gt; required',
		anchor = 'ssrn_missing',
		category = 'CS1 errors: SSRN',
		hidden = false
		},
	err_text_ignored = {
		message = 'Text "$1" ignored',											-- $1 is ignored text
		anchor = 'text_ignored',
		category = 'CS1 errors: unrecognized parameter',
		hidden = false
		},
	err_trans_missing_title = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;trans-$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; or &lt;code class="cs1-code"&gt;&amp;#124;script-$1=&lt;/code&gt;',	-- $1 is base parameter name
		anchor = 'trans_missing_title',
		category = 'CS1 errors: translated title',
		hidden = false
		},
	err_param_unknown_empty = {
		message = 'Cite has empty unknown parameter$1: $2',						-- $1 is 's' or empty space; $2 is emty unknown param list
		anchor = 'param_unknown_empty',
		category = 'CS1 errors: empty unknown parameters',
		hidden = false
		},
	err_vancouver = {
		message = 'Vancouver style error: $1 in name $2',						-- $1 is error detail, $2 is the nth name
		anchor = 'vancouver',
		category = 'CS1 errors: Vancouver style',
		hidden = false
		},
	err_wikilink_in_url = {
		message = 'URL–wikilink conflict',										-- uses ndash
		anchor = 'wikilink_in_url',
		category = 'CS1 errors: URL–wikilink conflict',							-- uses ndash
		hidden = false
		},


--[[--------------------------&lt; M A I N T &gt;-------------------------------------

maint messages do not have a message (message = nil); otherwise the structure
is the same as error messages

]]

	maint_archived_copy = {
		message = nil,
		anchor = 'archived_copy',
		category = 'CS1 maint: archived copy as title',
		hidden = true,
		},
	maint_authors = {
		message = nil,
		anchor = 'authors',
		category = 'CS1 maint: uses authors parameter',
		hidden = true,
		},
	maint_bibcode = {
		message = nil,
		anchor = 'bibcode',
		category = 'CS1 maint: bibcode',
		hidden = true,
		},
	maint_location_no_publisher = {												-- cite book, conference, encyclopedia; citation as book cite or encyclopedia cite
		message = nil,
		anchor = 'location_no_publisher',
		category = 'CS1 maint: location missing publisher',
		hidden = true,
		},
	maint_bot_unknown = {
		message = nil,
		anchor = 'bot:_unknown',
		category = 'CS1 maint: bot: original URL status unknown',
		hidden = true,
		},
	maint_date_auto_xlated = {													-- date auto-translation not supported by en.wiki
		message = nil,
		anchor = 'date_auto_xlated',
		category = 'CS1 maint: date auto-translated',
		hidden = true,
		},
	maint_date_format = {
		message = nil,
		anchor = 'date_format',
		category = 'CS1 maint: date format',
		hidden = true,
		},
	maint_date_year = {
		message = nil,
		anchor = 'date_year',
		category = 'CS1 maint: date and year',
		hidden = true,
		},
	maint_doi_ignore = {
		message = nil,
		anchor = 'doi_ignore',
		category = 'CS1 maint: ignored DOI errors',
		hidden = true,
		},
	maint_doi_inactive = {
		message = nil,
		anchor = 'doi_inactive',
		category = 'CS1 maint: DOI inactive',
		hidden = true,
		},
	maint_doi_inactive_dated = {
		message = nil,
		anchor = 'doi_inactive_dated',
		category = 'CS1 maint: DOI inactive as of $2$3$1',						-- $1 is year, $2 is month-name or empty string, $3 is space or empty string
		hidden = true,
		},
	maint_extra_punct = {
		message = nil,
		anchor = 'extra_punct',
		category = 'CS1 maint: extra punctuation',
		hidden = true,
		},
	maint_isbn_ignore = {
		message = nil,
		anchor = 'ignore_isbn_err',
		category = 'CS1 maint: ignored ISBN errors',
		hidden = true,
		},
	maint_issn_ignore = {
		message = nil,
		anchor = 'ignore_issn',
		category = 'CS1 maint: ignored ISSN errors',
		hidden = true,
		},
	maint_jfm_format = {
		message = nil,
		anchor = 'jfm_format',
		category = 'CS1 maint: JFM format',
		hidden = true,
		},
	maint_location = {
		message = nil,
		anchor = 'location',
		category = 'CS1 maint: location',
		hidden = true,
		},
	maint_mr_format = {
		message = nil,
		anchor = 'mr_format',
		category = 'CS1 maint: MR format',
		hidden = true,
		},
	maint_mult_names = {
		message = nil,
		anchor = 'mult_names',
		category = 'CS1 maint: multiple names: $1',								-- $1 is '&lt;name&gt;s list'; gets value from special_case_translation table
		hidden = true,
		},
	maint_numeric_names = {
		message = nil,
		anchor = 'numeric_names',
		category = 'CS1 maint: numeric names: $1',								-- $1 is '&lt;name&gt;s list'; gets value from special_case_translation table
		hidden = true,
		},
	maint_others = {
		message = nil,
		anchor = 'others',
		category = 'CS1 maint: others',
		hidden = true,
		},
	maint_others_avm = {
		message = nil,
		anchor = 'others_avm',
		category = 'CS1 maint: others in cite AV media (notes)',
		hidden = true,
		},
	maint_overridden_setting = {
		message = nil,
		anchor = 'overridden',
		category = 'CS1 maint: overridden setting',
		hidden = true,
		},
	maint_pmc_embargo = {
		message = nil,
		anchor = 'embargo',
		category = 'CS1 maint: PMC embargo expired',
		hidden = true,
		},
	maint_pmc_format = {
		message = nil,
		anchor = 'pmc_format',
		category = 'CS1 maint: PMC format',
		hidden = true,
		},
	maint_postscript = {
		message = nil,
		anchor = 'postscript',
		category = 'CS1 maint: postscript',
		hidden = true,
	},
	maint_ref_duplicates_default = {
		message = nil,
		anchor = 'ref_default',
		category = 'CS1 maint: ref duplicates default',
		hidden = true,
	},
	maint_unfit = {
		message = nil,
		anchor = 'unfit',
		category = 'CS1 maint: unfit URL',
		hidden = true,
		},
	maint_unknown_lang = {
		message = nil,
		anchor = 'unknown_lang',
		category = 'CS1 maint: unrecognized language',
		hidden = true,
		},
	maint_untitled = {
		message = nil,
		anchor = 'untitled',
		category = 'CS1 maint: untitled periodical',
		hidden = true,
		},
	maint_url_status = {
		message = nil,
		anchor = 'url_status',
		category = 'CS1 maint: url-status',
		hidden = true,
		},
	maint_zbl = {
		message = nil,
		anchor = 'zbl',
		category = 'CS1 maint: Zbl',
		hidden = true,
		},
	}


--[[--------------------------&lt; I D _ H A N D L E R S &gt;--------------------------------------------------------

The following contains a list of values for various defined identifiers.  For each
identifier we specify a variety of information necessary to properly render the
identifier in the citation.

	parameters: a list of parameter aliases for this identifier; first in the list is the canonical form
	link: Wikipedia article name
	redirect: a local redirect to a local Wikipedia article name;  at en.wiki, 'ISBN (identifier)' is a redirect to 'International Standard Book Number'
	q: Wikidata q number for the identifier
	label: the label preceding the identifier; label is linked to a Wikipedia article (in this order):
		redirect from id_handlers['&lt;id&gt;'].redirect when use_identifier_redirects is true
		Wikidata-supplied article name for the local wiki from id_handlers['&lt;id&gt;'].q
		local article name from id_handlers['&lt;id&gt;'].link
	prefix: the first part of a URL that will be concatenated with a second part which usually contains the identifier
	suffix: optional third part to be added after the identifier
	encode: true if URI should be percent-encoded; otherwise false
	COinS: identifier link or keyword for use in COinS:
		for identifiers registered at info-uri.info use: info:.... where '...' is the appropriate identifier label 
		for identifiers that have COinS keywords, use the keyword: rft.isbn, rft.issn, rft.eissn
		for |asin= and |ol=, which require assembly, use the keyword: url
		for others make a URL using the value in prefix/suffix and #label, use the keyword: pre (not checked; any text other than 'info', 'rft', or 'url' works here)
		set to nil to leave the identifier out of the COinS
	separator: character or text between label and the identifier in the rendered citation
	id_limit: for those identifiers with established limits, this property holds the upper limit
	access: use this parameter to set the access level for all instances of this identifier.
		the value must be a valid access level for an identifier (see ['id-access'] in this file).
	custom_access: to enable custom access level for an identifier, set this parameter
		to the parameter that should control it (normally 'id-access')
		
]]

local id_handlers = {
	['ARXIV'] = {
		parameters = {'arxiv', 'eprint'},
		link = 'arXiv',
		redirect = 'arXiv (identifier)',
		q = 'Q118398',
		label = 'arXiv',
		prefix = 'https://arxiv.org/abs/',
		encode = false,
		COinS = 'info:arxiv',
		separator = ':',
		access = 'free',														-- free to read
		},
	['ASIN'] = {
		parameters = { 'asin', 'ASIN' },
		link = 'Amazon Standard Identification Number',
		redirect = 'ASIN (identifier)',
		q = 'Q1753278',
		label = 'ASIN',
		prefix = 'https://www.amazon.',
		COinS = 'url',
		separator = '&amp;nbsp;',
		encode = false;
		},
	['BIBCODE'] = {
		parameters = {'bibcode'},
		link = 'Bibcode',
		redirect = 'Bibcode (identifier)',
		q = 'Q25754',
		label = 'Bibcode',
		prefix = 'https://ui.adsabs.harvard.edu/abs/',
		encode = false,
		COinS = 'info:bibcode',
		separator = ':',
		custom_access = 'bibcode-access',
		},
	['BIORXIV'] = {
		parameters = {'biorxiv'},
		link = 'bioRxiv',
		redirect = 'bioRxiv (identifier)',
		q = 'Q19835482',
		label = 'bioRxiv',
		prefix = 'https://doi.org/',
		COinS = 'pre',															-- use prefix value
		access = 'free',														-- free to read
		encode = true,
		separator = '&amp;nbsp;',
		},
	['CITESEERX'] = {
		parameters = {'citeseerx'},
		link = 'CiteSeerX',
		redirect = 'CiteSeerX (identifier)',
		q = 'Q2715061',
		label = 'CiteSeerX',
		prefix = 'https://citeseerx.ist.psu.edu/viewdoc/summary?doi=',
		COinS =  'pre',															-- use prefix value
		access = 'free',														-- free to read
		encode = true,
		separator = '&amp;nbsp;',
		},
	['DOI'] = {																	-- Used by InternetArchiveBot
		parameters = { 'doi', 'DOI'},
		link = 'Digital object identifier',
		redirect = 'doi (identifier)',
		q = 'Q25670',
		label = 'doi',
		prefix = 'https://doi.org/',
		COinS = 'info:doi',
		separator = ':',
		encode = true,
		custom_access = 'doi-access',
		},
	['EISSN'] = {
		parameters = {'eissn', 'EISSN'},
		link = 'International Standard Serial Number#Electronic ISSN',
		redirect = 'eISSN (identifier)',
		q = 'Q46339674',
		label = 'eISSN',
		prefix = 'https://www.worldcat.org/issn/',
		COinS = 'rft.eissn',
		encode = false,
		separator = '&amp;nbsp;',
		},
	['HDL'] = {
		parameters = { 'hdl', 'HDL' },
		link = 'Handle System',
		redirect = 'hdl (identifier)',
		q = 'Q3126718',
		label = 'hdl',
		prefix = 'https://hdl.handle.net/',
		COinS = 'info:hdl',
		separator = ':',
		encode = true,
		custom_access = 'hdl-access',
		},
	['ISBN'] = {																-- Used by InternetArchiveBot
		parameters = {'isbn', 'ISBN'},
		link = 'International Standard Book Number',
		redirect = 'ISBN (identifier)',
		q = 'Q33057',
		label = 'ISBN',
		prefix = 'Special:BookSources/',
		COinS = 'rft.isbn',
		separator = '&amp;nbsp;',
		},
	['ISMN'] = {
		parameters = {'ismn', 'ISMN'},
		link = 'International Standard Music Number',
		redirect = 'ISMN (identifier)',
		q = 'Q1666938',
		label = 'ISMN',
		prefix = '',															-- not currently used;
		COinS = nil,															-- nil because we can't use pre or rft or info:
		separator = '&amp;nbsp;',
		},
	['ISSN'] = {
		parameters = {'issn', 'ISSN'},
		link = 'International Standard Serial Number',
		redirect = 'ISSN (identifier)',
		q = 'Q131276',
		label = 'ISSN',
		prefix = 'https://www.worldcat.org/issn/',
		COinS = 'rft.issn',
		encode = false,
		separator = '&amp;nbsp;',
		},
	['JFM'] = {
		parameters = {'jfm', 'JFM'},
		link = 'Jahrbuch über die Fortschritte der Mathematik',
		redirect = 'JFM (identifier)',
		q = '',
		label = 'JFM',
		prefix = 'https://zbmath.org/?format=complete&amp;q=an:',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		},
	['JSTOR'] = {
		parameters = {'jstor', 'JSTOR'},
		link = 'JSTOR',
		redirect = 'JSTOR (identifier)',
		q = 'Q1420342',
		label = 'JSTOR',
		prefix = 'https://www.jstor.org/stable/',
		COinS = 'pre',															-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
		custom_access = 'jstor-access',
		},
	['LCCN'] = {
		parameters = {'lccn', 'LCCN'},
		link = 'Library of Congress Control Number',
		redirect = 'LCCN (identifier)',
		q = 'Q620946',
		label = 'LCCN',
		prefix = 'https://lccn.loc.gov/',
		COinS = 'info:lccn',
		encode = false,
		separator = '&amp;nbsp;',
		},
	['MEDRXIV'] = {
		parameters = {'medrxiv'},
		link = 'medRxiv',
		redirect = 'medRxiv (identifier)',
		q = 'Q58465838',
		label = 'medRxiv',
		prefix = 'https://www.medrxiv.org/content/',
		COinS = 'pre',															-- use prefix value
		access = 'free',														-- free to read
		encode = false,
		separator = '&amp;nbsp;',
		},
	['MR'] = {
		parameters = {'mr', 'MR'},
		link = 'Mathematical Reviews',
		redirect = 'MR (identifier)',
		q = 'Q211172',
		label = 'MR',
		prefix = 'https://mathscinet.ams.org/mathscinet-getitem?mr=',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		},
	['OCLC'] = {
		parameters = {'oclc', 'OCLC'},
		link = 'OCLC',
		redirect = 'OCLC (identifier)',
		q = 'Q190593',
		label = 'OCLC',
		prefix = 'https://www.worldcat.org/oclc/',
		COinS = 'info:oclcnum',
		encode = true,
		separator = '&amp;nbsp;',
		id_limit = 9999999999,													-- 10-digits
		},
	['OL'] = {
		parameters = { 'ol', 'OL' },
		link = 'Open Library',
		redirect = 'OL (identifier)',
		q = 'Q1201876',
		label = 'OL',
		prefix = 'https://openlibrary.org/',
		COinS = 'url',
		separator = '&amp;nbsp;',
		encode = true,
		custom_access = 'ol-access',
		},
	['OSTI'] = {
		parameters = {'osti', 'OSTI'},
		link = 'Office of Scientific and Technical Information',
		redirect = 'OSTI (identifier)',
		q = 'Q2015776',
		label = 'OSTI',
		prefix = 'https://www.osti.gov/biblio/',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		id_limit = 23010000,
		custom_access = 'osti-access',
		},
	['PMC'] = {
		parameters = {'pmc', 'PMC'},
		link = 'PubMed Central',
		redirect = 'PMC (identifier)',
		q = 'Q229883',
		label = 'PMC',
		prefix = 'https://www.ncbi.nlm.nih.gov/pmc/articles/PMC',
		suffix = '',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		id_limit = 10500000,
		access = 'free',														-- free to read
		},
	['PMID'] = {
		parameters = {'pmid', 'PMID'},
		link = 'PubMed Identifier',
		redirect = 'PMID (identifier)',
		q = 'Q2082879',
		label = 'PMID',
		prefix = 'https://pubmed.ncbi.nlm.nih.gov/',
		COinS = 'info:pmid',
		encode = false,
		separator = '&amp;nbsp;',
		id_limit = 37900000,
		},
	['RFC'] = {
		parameters = {'rfc', 'RFC'},
		link = 'Request for Comments',
		redirect = 'RFC (identifier)',
		q = 'Q212971',
		label = 'RFC',
		prefix = 'https://tools.ietf.org/html/rfc',
		COinS = 'pre',															-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
		id_limit = 9300,
		access = 'free',														-- free to read
		},
	['SBN'] = {
		parameters = {'sbn', 'SBN'},
		link = 'Standard Book Number',											-- redirect to International_Standard_Book_Number#History
		redirect = 'SBN (identifier)',
		label = 'SBN',
		prefix = 'Special:BookSources/0-',										-- prefix has leading zero necessary to make 9-digit sbn a 10-digit isbn
		COinS = nil,															-- nil because we can't use pre or rft or info:
		separator = '&amp;nbsp;',
		},
	['SSRN'] = {
		parameters = {'ssrn', 'SSRN'},
		link = 'Social Science Research Network',
		redirect = 'SSRN (identifier)',
		q = 'Q7550801',
		label = 'SSRN',
		prefix = 'https://papers.ssrn.com/sol3/papers.cfm?abstract_id=',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		id_limit = 4600000,
		custom_access = 'ssrn-access',
		},
	['S2CID'] = {
		parameters = {'s2cid', 'S2CID'},
		link = 'Semantic Scholar',
		redirect = 'S2CID (identifier)',
		q = 'Q22908627',
		label = 'S2CID',
		prefix = 'https://api.semanticscholar.org/CorpusID:',
		COinS = 'pre',															-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
		id_limit = 262000000,
		custom_access = 's2cid-access',
		},
	['USENETID'] = {
		parameters = {'message-id'},
		link = 'Usenet',
		redirect = 'Usenet (identifier)',
		q = 'Q193162',
		label = 'Usenet:',
		prefix = 'news:',
		encode = false,
		COinS = 'pre',															-- use prefix value
		separator = '&amp;nbsp;',
		},
	['ZBL'] = {
		parameters = {'zbl', 'ZBL' },
		link = 'Zentralblatt MATH',
		redirect = 'Zbl (identifier)',
		q = 'Q190269',
		label = 'Zbl',
		prefix = 'https://zbmath.org/?format=complete&amp;q=an:',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		},
	}


--[[--------------------------&lt; E X P O R T S &gt;---------------------------------
]]

return 	{
	use_identifier_redirects = use_identifier_redirects,						-- booleans defined in the settings at the top of this module
	local_lang_cat_enable = local_lang_cat_enable,
	date_name_auto_xlate_enable = date_name_auto_xlate_enable,
	date_digit_auto_xlate_enable = date_digit_auto_xlate_enable,
	
																				-- tables and variables created when this module is loaded
	global_df = get_date_format (),												-- this line can be replaced with "global_df = 'dmy-all'," to have all dates auto translated to dmy format.
	global_cs1_config_t = global_cs1_config_t,									-- global settings from {{cs1 config}}
	punct_skip = build_skip_table (punct_skip, punct_meta_params),
	url_skip = build_skip_table (url_skip, url_meta_params),

	aliases = aliases,
	special_case_translation = special_case_translation,
	date_names = date_names,
	err_msg_supl = err_msg_supl,
	error_conditions = error_conditions,
	editor_markup_patterns = editor_markup_patterns,
	et_al_patterns = et_al_patterns,
	id_handlers = id_handlers,
	keywords_lists = keywords_lists,
	keywords_xlate = keywords_xlate,
	stripmarkers = stripmarkers,
	invisible_chars = invisible_chars,
	invisible_defs = invisible_defs,
	indic_script = indic_script,
	emoji_t = emoji_t,
	maint_cats = maint_cats,
	messages = messages,
	presentation = presentation,
	prop_cats = prop_cats,
	script_lang_codes = script_lang_codes,
	lang_tag_remap = lang_tag_remap,
	lang_name_remap = lang_name_remap,
	this_wiki_code = this_wiki_code,
	title_types = title_types,
	uncategorized_namespaces = uncategorized_namespaces_t,
	uncategorized_subpages = uncategorized_subpages,
	templates_using_volume = templates_using_volume,
	templates_using_issue = templates_using_issue,
	templates_not_using_page = templates_not_using_page,
	vol_iss_pg_patterns = vol_iss_pg_patterns,
	single_letter_2nd_lvl_domains_t = single_letter_2nd_lvl_domains_t,
	
	inter_wiki_map = inter_wiki_map,
	mw_languages_by_tag_t = mw_languages_by_tag_t,
	mw_languages_by_name_t = mw_languages_by_name_t,
	citation_class_map_t = citation_class_map_t,

	citation_issue_t = citation_issue_t,
	citation_no_volume_t = citation_no_volume_t,
	}</text>
      <sha1>lopfli8cik5okotztmvlgtvbe0066io</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Whitelist</title>
    <ns>828</ns>
    <id>10</id>
    <revision>
      <id>14</id>
      <timestamp>2023-08-20T12:32:59Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "--[[--------------------------&lt; S U P P O R T E D   P A R A M E T E R S &gt;--------------------------------------  Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items can have three values: 	true - these parameters are valid and supported parameters 	false - these parameters are deprecated but still supported 	tracked - these parameters are valid and supported parameters tracked in an eponymous properties category 	nil - thes..."</comment>
      <origin>14</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="17842" sha1="m3n7fjiqb4k238j0awyuub7fgy4153b" xml:space="preserve">--[[--------------------------&lt; S U P P O R T E D   P A R A M E T E R S &gt;--------------------------------------

Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items can have three values:
	true - these parameters are valid and supported parameters
	false - these parameters are deprecated but still supported
	tracked - these parameters are valid and supported parameters tracked in an eponymous properties category
	nil - these parameters are no longer supported. remove entirely
	
]]

local basic_arguments_t = {
	['accessdate'] = true,
	['access-date'] = true,
	['agency'] = true,
	['archivedate'] = true,
	['archive-date'] = true,
	['archive-format'] = true,
	['archiveurl'] = true,
	['archive-url'] = true,
	['article'] = true,
	['article-format'] = true,
	['article-number'] = true,													-- {{cite journal}}, {{cite conference}}; {{citation}} when |journal= has a value
	['article-url'] = true,
	['article-url-access'] = true,
	['arxiv'] = true,															-- cite arxiv; here because allowed in cite ... as identifier
	['asin'] = true,
	['ASIN'] = true,
	['asin-tld'] = true,
	['at'] = true,
	['author'] = true,
	['author-first'] = true,
	['author-given'] = true,
	['author-last'] = true,
	['author-surname'] = true,
	['authorlink'] = true,
	['author-link'] = true,
	['author-mask'] = true,
	['authors'] = true,
	['bibcode'] = true,
	['bibcode-access'] = true,
	['biorxiv'] = true,															-- cite biorxiv; here because allowed in cite ... as identifier
	['chapter'] = true,
	['chapter-format'] = true,
	['chapter-url'] = true,
	['chapter-url-access'] = true,
	['citeseerx'] = true,														-- cite citeseerx; here because allowed in cite ... as identifier
	['collaboration'] = true,
	['contribution'] = true,
	['contribution-format'] = true,
	['contribution-url'] = true,
	['contribution-url-access'] = true,
	['contributor'] = true,
	['contributor-first'] = true,
	['contributor-given'] = true,
	['contributor-last'] = true,
	['contributor-surname'] = true,
	['contributor-link'] = true,
	['contributor-mask'] = true,
	['date'] = true,
	['department'] = true,
	['df'] = true,
	['dictionary'] = true,
	['display-authors'] = true,
	['display-contributors'] = true,
	['display-editors'] = true,
	['display-interviewers'] = true,
	['display-subjects'] = true,
	['display-translators'] = true,
	['doi'] = true,
	['DOI'] = true,
	['doi-access'] = true,
	['doi-broken-date'] = true,
	['edition'] = true,
	['editor'] = true,
	['editor-first'] = true,
	['editor-given'] = true,
	['editor-last'] = true,
	['editor-surname'] = true,
	['editor-link'] = true,
	['editor-mask'] = true,
	['eissn'] = true,
	['EISSN'] = true,
	['encyclopaedia'] = true,
	['encyclopedia'] = true,
	['entry'] = true,
	['entry-format'] = true,
	['entry-url'] = true,
	['entry-url-access'] = true,
	['eprint'] = true,															-- cite arxiv; here because allowed in cite ... as identifier
	['first'] = true,
	['format'] = true,
	['given'] = true,
	['hdl'] = true,
	['HDL'] = true,
	['hdl-access'] = true,
	['host'] = true,															-- unique to certain templates?
	['id'] = true,
	['ID'] = true,
	['institution'] = true,														-- constrain to cite thesis?
	['interviewer'] = true,
	['interviewer-first'] = true,
	['interviewer-given'] = true,
	['interviewer-last'] = true,
	['interviewer-surname'] = true,
	['interviewer-link'] = true,
	['interviewer-mask'] = true,
	['isbn'] = true,
	['ISBN'] = true,
	['ismn'] = true,
	['ISMN'] = true,
	['issn'] = true,
	['ISSN'] = true,
	['issue'] = true,
	['jfm'] = true,
	['JFM'] = true,
	['journal'] = true,
	['jstor'] = true,
	['JSTOR'] = true,
	['jstor-access'] = true,
	['lang'] = true,
	['language'] = true,
	['last'] = true,
	['lccn'] = true,
	['LCCN'] = true,
	['location'] = true,
	['magazine'] = true,
	['medium'] = true,
	['medrxiv'] = true,															-- cite medrxiv; here because allowed in cite ... as identifier
	['minutes'] = true,															-- constrain to cite AV media and podcast?
	['mode'] = true,
	['mr'] = true,
	['MR'] = true,
	['name-list-style'] = true,
	['newspaper'] = true,
	['no-pp'] = true,
	['no-tracking'] = true,
	['number'] = true,
	['oclc'] = true,
	['OCLC'] = true,
	['ol'] = true,
	['OL'] = true,
	['ol-access'] = true,
	['orig-date'] = true,
	['origyear'] = true,
	['orig-year'] = true,
	['osti'] = true,
	['OSTI'] = true,
	['osti-access'] = true,
	['others'] = true,
	['p'] = true,
	['page'] = true,
	['pages'] = true,
	['people'] = true,
	['periodical'] = true,
	['place'] = true,
	['pmc'] = true,
	['PMC'] = true,
	['pmc-embargo-date'] = true,
	['pmid'] = true,
	['PMID'] = true,
	['postscript'] = true,
	['pp'] = true,
	['publication-date'] = true,
	['publication-place'] = true,
	['publisher'] = true,
	['quotation'] = true,
	['quote'] = true,
	['quote-page'] = true,
	['quote-pages'] = true,
	['ref'] = true,
	['rfc'] = true,
	['RFC'] = true,
	['sbn'] = true,
	['SBN'] = true,
	['scale'] = true,
	['script-article'] = true,
	['script-chapter'] = true,
	['script-contribution'] = true,
	['script-entry'] = true,
	['script-journal'] = true,
	['script-magazine'] = true,
	['script-newspaper'] = true,
	['script-periodical'] = true,
	['script-quote'] = true,
	['script-section'] = true,
	['script-title'] = true,
	['script-website'] = true,
	['script-work'] = true,
	['section'] = true,
	['section-format'] = true,
	['section-url'] = true,
	['section-url-access'] = true,
	['series'] = true,
	['ssrn'] = true,															-- cite ssrn; these three here because allowed in cite ... as identifier
	['SSRN'] = true,
	['ssrn-access'] = true,
	['subject'] = true,
	['subject-first'] = true,
	['subject-given'] = true,
	['subject-last'] = true,
	['subject-link'] = true,
	['subject-mask'] = true,
	['subject-surname'] = true,
	['surname'] = true,
	['s2cid'] = true,
	['S2CID'] = true,
	['s2cid-access'] = true,
	['template-doc-demo'] = true,
	['time'] = true,															-- constrain to cite av media and podcast?
	['time-caption'] = true,													-- constrain to cite av media and podcast?
	['title'] = true,
	['title-link'] = true,
	['title-note'] = true,
	['translator'] = true,
	['translator-first'] = true,
	['translator-given'] = true,
	['translator-last'] = true,	
	['translator-surname'] = true,
	['translator-link'] = true,
	['translator-mask'] = true,
	['trans-article'] = true,
	['trans-chapter'] = true,
	['trans-contribution'] = true,
	['trans-entry'] = true,
	['trans-journal'] = true,
	['trans-magazine'] = true,
	['trans-newspaper'] = true,
	['trans-periodical'] = true,
	['trans-quote'] = true,
	['trans-section'] = true,
	['trans-title'] = true,
	['trans-website'] = true,
	['trans-work'] = true,
	['type'] = true,
	['url'] = true,
	['URL'] = true,
	['url-access'] = true,
	['url-status'] = true,
	['vauthors'] = true,
	['veditors'] = true,
	['version'] = true,
	['via'] = true,
	['volume'] = true,
	['website'] = true,
	['work'] = true,
	['year'] = true,
	['zbl'] = true,
	['ZBL'] = true,
	}

local numbered_arguments_t = {
	['author#'] = true,
	['author-first#'] = true,
	['author#-first'] = true,
	['author-given#'] = true,
	['author#-given'] = true,
	['author-last#'] = true,
	['author#-last'] = true,
	['author-surname#'] = true,
	['author#-surname'] = true,
	['author-link#'] = true,
	['author#-link'] = true,
	['authorlink#'] = true,
	['author#link'] = true,
	['author-mask#'] = true,
	['author#-mask'] = true,
	['contributor#'] = true,
	['contributor-first#'] = true,
	['contributor#-first'] = true,
	['contributor-given#'] = true,
	['contributor#-given'] = true,
	['contributor-last#'] = true,
	['contributor#-last'] = true,
	['contributor-surname#'] = true,
	['contributor#-surname'] = true,
	['contributor-link#'] = true,
	['contributor#-link'] = true,
	['contributor-mask#'] = true,
	['contributor#-mask'] = true,
	['editor#'] = true,
	['editor-first#'] = true,
	['editor#-first'] = true,
	['editor-given#'] = true,
	['editor#-given'] = true,
	['editor-last#'] = true,
	['editor#-last'] = true,
	['editor-surname#'] = true,
	['editor#-surname'] = true,
	['editor-link#'] = true,
	['editor#-link'] = true,
	['editor-mask#'] = true,
	['editor#-mask'] = true,
	['first#'] = true,
	['given#'] = true,
	['host#'] = true,
	['interviewer#'] = true,
	['interviewer-first#'] = true,
	['interviewer#-first'] = true,
	['interviewer-given#'] = true,
	['interviewer#-given'] = true,
	['interviewer-last#'] = true,
	['interviewer#-last'] = true,
	['interviewer-surname#'] = true,
	['interviewer#-surname'] = true,
	['interviewer-link#'] = true,
	['interviewer#-link'] = true,
	['interviewer-mask#'] = true,
	['interviewer#-mask'] = true,
	['last#'] = true,
	['subject#'] = true,
	['subject-first#'] = true,
	['subject#-first'] = true,
	['subject-given#'] = true,
	['subject#-given'] = true,
	['subject-last#'] = true,
	['subject#-last'] = true,
	['subject-link#'] = true,
	['subject#-link'] = true,
	['subject-mask#'] = true,
	['subject#-mask'] = true,
	['subject-surname#'] = true,
	['subject#-surname'] = true,
	['surname#'] = true,
	['translator#'] = true,
	['translator-first#'] = true,
	['translator#-first'] = true,
	['translator-given#'] = true,
	['translator#-given'] = true,
	['translator-last#'] = true,
	['translator#-last'] = true,
	['translator-surname#'] = true,
	['translator#-surname'] = true,
	['translator-link#'] = true,
	['translator#-link'] = true,
	['translator-mask#'] = true,
	['translator#-mask'] = true,
	}


--[[--------------------------&lt; P R E P R I N T   S U P P O R T E D   P A R A M E T E R S &gt;--------------------

Cite arXiv, cite biorxiv, cite citeseerx, cite medrxiv, and cite ssrn are preprint templates that use the limited
set of parameters defined in the limited_basic_arguments and limited_numbered_arguments tables.  Those lists are
supplemented with a template-specific list of parameters that are required by the particular template and may be
exclusive to one of the preprint templates.  Some of these parameters may also be available to the general cs1|2
templates.

Same conventions for true/false/tracked/nil as above.

]]

local preprint_arguments_t = {
	arxiv = {
		['arxiv'] = true,														-- cite arxiv and arxiv identifiers
		['class'] = true,
		['eprint'] = true,														-- cite arxiv and arxiv identifiers
		},
	biorxiv = {
		['biorxiv'] = true,
		},
	citeseerx = {
		['citeseerx'] = true,
		},
	medrxiv = {
		['medrxiv'] = true,
		},
	ssrn = {
		['ssrn'] = true,
		['SSRN'] = true,
		['ssrn-access'] = true,
		},
	}


--[[--------------------------&lt; L I M I T E D   S U P P O R T E D   P A R A M E T E R S &gt;----------------------

cite arxiv, cite biorxiv, cite citeseerx, cite medrxiv, and cite ssrn templates are preprint templates so are
allowed only a limited subset of parameters allowed to all other cs1|2 templates.  The limited subset is defined
here.

This list of parameters also used by {{cite document}}

Same conventions for true/false/tracked/nil as above.
	
]]

local limited_basic_arguments_t = {
	['at'] = true,
	['author'] = true,
	['author-first'] = true,
	['author-given'] = true,
	['author-last'] = true,
	['author-surname'] = true,
	['author-link'] = true,
	['authorlink'] = true,
	['author-mask'] = true,
	['authors'] = true,
	['collaboration'] = true,
	['date'] = true,
	['df'] = true,
	['display-authors'] = true,
	['first'] = true,
	['given'] = true,
	['language'] = true,
	['last'] = true,
	['mode'] = true,
	['name-list-style'] = true,
	['no-tracking'] = true,
	['p'] = true,
	['page'] = true,
	['pages'] = true,
	['postscript'] = true,
	['pp'] = true,
	['quotation'] = true,
	['quote'] = true,
	['ref'] = true,
	['surname'] = true,
	['template-doc-demo'] = true,
	['title'] = true,
	['trans-title'] = true,
	['vauthors'] = true,
	['year'] = true,
	}

local limited_numbered_arguments_t = {
	['author#'] = true,
	['author-first#'] = true,
	['author#-first'] = true,
	['author-given#'] = true,
	['author#-given'] = true,
	['author-last#'] = true,
	['author#-last'] = true,
	['author-surname#'] = true,
	['author#-surname'] = true,
	['author-link#'] = true,
	['author#-link'] = true,
	['authorlink#'] = true,
	['author#link'] = true,
	['author-mask#'] = true,
	['author#-mask'] = true,
	['first#'] = true,
	['given#'] = true,
	['last#'] = true,
	['surname#'] = true,
	}


--[[--------------------------&lt; U N I Q U E _ A R G U M E N T S &gt;----------------------------------------------

Some templates have unique parameters.  Those templates and their unique parameters are listed here. Keys in this
table are the template's CitationClass parameter value

Same conventions for true/false/tracked/nil as above.

]]

local unique_arguments_t = {
	['audio-visual'] = {
		['transcript'] = true,
		['transcript-format'] = true,
		['transcript-url'] = true,
		},
	conference = {
		['book-title'] = true,
		['conference'] = true,
		['conference-format'] = true,
		['conference-url'] = true,
		['event'] = true,
		},
	episode = {
		['airdate'] = true,
		['air-date'] = true,
		['credits'] = true,
		['episode-link'] = true,												-- alias of |title-link=
		['network'] = true,
		['season'] = true,
		['series-link'] = true,
		['series-no'] = true,
		['series-number'] = true,
		['station'] = true,
		['transcript'] = true,
		['transcript-format'] = true,
		['transcript-url'] = true,
		},
	mailinglist = {
		['mailing-list'] = true,
		},
	map = {
		['cartography'] = true,
		['inset'] = true,
		['map'] = true,
		['map-format'] = true,
		['map-url'] = true,
		['map-url-access'] = true,
		['script-map'] = true,
		['sections'] = true,
		['sheet'] = true,
		['sheets'] = true,
		['trans-map'] = true,
		},
	newsgroup = {
		['message-id'] = true,
		['newsgroup'] = true,
		},
	report = {
		['docket'] = true,
		},
	serial = {
		['airdate'] = true,
		['air-date'] = true,
		['credits'] = true,
		['episode'] = true,														-- cite serial only TODO: make available to cite episode?
		['episode-link'] = true,												-- alias of |title-link=
		['network'] = true,
		['series-link'] = true,
		['station'] = true,
		},
	speech = {
		['conference'] = true,
		['conference-format'] = true,
		['conference-url'] = true,
		['event'] = true,
		},
	thesis = {
		['degree'] = true,
		['docket'] = true,
		},
	}


--[[--------------------------&lt; C I T E _ D O C U M E N T &gt;----------------------------------------------------

Special case for cite document.  This template takes the limited basic and limited enumerated parameters plus
others that are apply only to standalone published sources that cannot be cited any other way; no url, book,
periodical, etc parameters; limited support for name lists and named identifiers.

when validating parameters in {{cite document}} templates, the basic and 

]]

local document_arguments_t = {
	['bibcode'] = true,
	['bibcode-access'] = true,
	['doi'] = true,
	['DOI'] = true,
	['doi-access'] = true,
	['doi-broken-date'] = true,
	['hdl'] = true,
	['HDL'] = true,
	['hdl-access'] = true,
	['id'] = true,
	['ID'] = true,
	['jfm'] = true,
	['JFM'] = true,
	['lang'] = true,
	['location'] = true,
	['mr'] = true,
	['MR'] = true,
	['no-pp'] = true,
	['orig-date'] = true,
	['origyear'] = true,
	['orig-year'] = true,
	['osti'] = true,
	['OSTI'] = true,
	['osti-access'] = true,
	['place'] = true,
	['publisher'] = true,
	['quote-page'] = true,
	['quote-pages'] = true,
	['script-quote'] = true,
	['script-title'] = true,
	['title-link'] = true,
	['translator'] = true,
	['translator-first'] = true,
	['translator-given'] = true,
	['translator-last'] = true,
	['translator-surname'] = true,
	['translator-link'] = true,
	['translator-mask'] = true,
	['trans-quote'] = true,
	['type'] = true,
	['zbl'] = true,
	['ZBL'] = true,
	}

local document_numbered_arguments_t = {
	['translator#'] = true,
	['translator-first#'] = true,
	['translator#-first'] = true,
	['translator-given#'] = true,
	['translator#-given'] = true,
	['translator-last#'] = true,
	['translator#-last'] = true,
	['translator-surname#'] = true,
	['translator#-surname'] = true,
	['translator-link#'] = true,
	['translator#-link'] = true,
	['translator-mask#'] = true,
	['translator#-mask'] = true,
	}


--[[--------------------------&lt; L I S T _ C O M B I N E &gt;------------------------------------------------------

makes one table from a list of tables.  &lt;lists_t&gt; is a sequence of tables to be combined

]]

local function list_combine (lists_t)
	local out_t = {};

	for _, list_t in ipairs (lists_t) do										-- for each list in &lt;lists_t&gt;
		for k, v in pairs (list_t) do											-- extract each k/v pair
			out_t[k] = v;														-- add to &lt;out_t&gt;
		end
	end
	return out_t;																-- and done
end


--[[--------------------------&lt; T E M P L A T E _ L I S T _ G E T &gt;--------------------------------------------

gets a list of the templates from table t

]]

local function template_list_get (t)
	local out_t = {};															-- a table for output
	for k, _ in pairs (t) do													-- spin through the table and collect the keys
		table.insert (out_t, k)													-- add each key to the output table
	end
	return out_t;																-- and done
end


--[[--------------------------&lt; E X P O R T E D   T A B L E S &gt;------------------------------------------------
]]

return {
	preprint_arguments_t = preprint_arguments_t,
	preprint_template_list_t = template_list_get (preprint_arguments_t),		-- make a template list from preprint_arguments{} table
	unique_arguments_t = unique_arguments_t,
	unique_param_template_list_t = template_list_get (unique_arguments_t),		-- make a template list from unique_arguments{} table
	
	document_parameters_t = list_combine ({limited_basic_arguments_t, limited_numbered_arguments_t, document_arguments_t, document_numbered_arguments_t});
	common_parameters_t = list_combine ({basic_arguments_t, numbered_arguments_t});
	limited_parameters_t = list_combine ({limited_basic_arguments_t, limited_numbered_arguments_t});
	};</text>
      <sha1>m3n7fjiqb4k238j0awyuub7fgy4153b</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Utilities</title>
    <ns>828</ns>
    <id>11</id>
    <revision>
      <id>15</id>
      <timestamp>2023-08-20T12:34:25Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "local z = { 	error_cats_t = {};															-- for categorizing citations that contain errors 	error_ids_t = {};															-- list of error identifiers; used to prevent duplication of certain errors; local to this module 	error_msgs_t = {};															-- sequence table of error messages 	maint_cats_t = {};															-- for categorizing citations that aren't erroneous per se, but could use a little work 	prop_cats_t = {};															-- for categorizing cit..."</comment>
      <origin>15</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="24564" sha1="kk801mqzkv4xrvmuck62gy23fyu6dl0" xml:space="preserve">local z = {
	error_cats_t = {};															-- for categorizing citations that contain errors
	error_ids_t = {};															-- list of error identifiers; used to prevent duplication of certain errors; local to this module
	error_msgs_t = {};															-- sequence table of error messages
	maint_cats_t = {};															-- for categorizing citations that aren't erroneous per se, but could use a little work
	prop_cats_t = {};															-- for categorizing citations based on certain properties, language of source for instance
	prop_keys_t = {};															-- for adding classes to the citation's &lt;cite&gt; tag
};


--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local cfg;																		-- table of tables imported from selected Module:Citation/CS1/Configuration


--[[--------------------------&lt; I S _ S E T &gt;------------------------------------------------------------------

Returns true if argument is set; false otherwise. Argument is 'set' when it exists (not nil) or when it is not an empty string.

]]

local function is_set (var)
	return not (var == nil or var == '');
end


--[[--------------------------&lt; I N _ A R R A Y &gt;--------------------------------------------------------------

Whether needle is in haystack

]]

local function in_array (needle, haystack)
	if needle == nil then
		return false;
	end
	for n, v in ipairs (haystack) do
		if v == needle then
			return n;
		end
	end
	return false;
end


--[[--------------------------&lt; H A S _ A C C E P T _ A S _ W R I T T E N &gt;------------------------------------

When &lt;str&gt; is wholly wrapped in accept-as-written markup, return &lt;str&gt; without markup and true; return &lt;str&gt; and false else

with allow_empty = false, &lt;str&gt; must have at least one character inside the markup
with allow_empty = true, &lt;str&gt; the markup frame can be empty like (()) to distinguish an empty template parameter from the specific condition "has no applicable value" in citation-context.

After further evaluation the two cases might be merged at a later stage, but should be kept separated for now.

]]

local function has_accept_as_written (str, allow_empty)
	if not is_set (str) then
		return str, false;
	end

	local count;

	if true == allow_empty then
		str, count = str:gsub ('^%(%((.*)%)%)$', '%1'); 						-- allows (()) to be an empty set
	else
		str, count = str:gsub ('^%(%((.+)%)%)$', '%1');
	end
	return str, 0 ~= count;
end


--[[--------------------------&lt; S U B S T I T U T E &gt;----------------------------------------------------------

Populates numbered arguments in a message string using an argument table. &lt;args&gt; may be a single string or a
sequence table of multiple strings.

]]

local function substitute (msg, args)
	return args and mw.message.newRawMessage (msg, args):plain() or msg;
end


--[[--------------------------&lt; E R R O R _ C O M M E N T &gt;----------------------------------------------------

Wraps error messages with CSS markup according to the state of hidden. &lt;content&gt; may be a single string or a
sequence table of multiple strings.

]]

local function error_comment (content, hidden)
	return substitute (hidden and cfg.presentation['hidden-error'] or cfg.presentation['visible-error'], content);
end


--[[--------------------------&lt; H Y P H E N _ T O _ D A S H &gt;--------------------------------------------------

Converts a hyphen to a dash under certain conditions.  The hyphen must separate
like items; unlike items are returned unmodified.  These forms are modified:
	letter - letter (A - B)
	digit - digit (4-5)
	digit separator digit - digit separator digit (4.1-4.5 or 4-1-4-5)
	letterdigit - letterdigit (A1-A5) (an optional separator between letter and
		digit is supported – a.1-a.5 or a-1-a-5)
	digitletter - digitletter (5a - 5d) (an optional separator between letter and
		digit is supported – 5.a-5.d or 5-a-5-d)

any other forms are returned unmodified.

str may be a comma- or semicolon-separated list

]]

local function hyphen_to_dash (str)
	if not is_set (str) then
		return str;
	end

	local accept;																-- boolean

	str = str:gsub ("(%(%(.-%)%))", function(m) return m:gsub(",", "，"):gsub(";", "；") end) -- replace commas and semicolons in accept-as-written markup with similar unicode characters so they'll be ignored during the split	
	str = str:gsub ('&amp;[nm]dash;', {['&amp;ndash;'] = '–', ['&amp;mdash;'] = '—'});		-- replace &amp;mdash; and &amp;ndash; entities with their characters; semicolon mucks up the text.split
	str = str:gsub ('&amp;#45;', '-'); -- replace HTML numeric entity with hyphen character
	str = str:gsub ('&amp;nbsp;', ' '); -- replace &amp;nbsp; entity with generic keyboard space character
	
	local out = {};
	local list = mw.text.split (str, '%s*[,;]%s*');								-- split str at comma or semicolon separators if there are any

	for _, item in ipairs (list) do												-- for each item in the list
		item, accept = has_accept_as_written (item);							-- remove accept-this-as-written markup when it wraps all of item
		if not accept and mw.ustring.match (item, '^%w*[%.%-]?%w+%s*[%-–—]%s*%w*[%.%-]?%w+$') then	-- if a hyphenated range or has endash or emdash separators
			if item:match ('^%a+[%.%-]?%d+%s*%-%s*%a+[%.%-]?%d+$') or			-- letterdigit hyphen letterdigit (optional separator between letter and digit)
				item:match ('^%d+[%.%-]?%a+%s*%-%s*%d+[%.%-]?%a+$') or			-- digitletter hyphen digitletter (optional separator between digit and letter)
				item:match ('^%d+[%.%-]%d+%s*%-%s*%d+[%.%-]%d+$') or			-- digit separator digit hyphen digit separator digit
				item:match ('^%d+%s*%-%s*%d+$') or								-- digit hyphen digit
				item:match ('^%a+%s*%-%s*%a+$') then							-- letter hyphen letter
					item = item:gsub ('(%w*[%.%-]?%w+)%s*%-%s*(%w*[%.%-]?%w+)', '%1–%2');	-- replace hyphen, remove extraneous space characters
			else
				item = mw.ustring.gsub (item, '%s*[–—]%s*', '–');				-- for endash or emdash separated ranges, replace em with en, remove extraneous whitespace
			end
		end
		table.insert (out, item);												-- add the (possibly modified) item to the output table
	end

	local temp_str = '';														-- concatenate the output table into a comma separated string
	temp_str, accept = has_accept_as_written (table.concat (out, ', '));		-- remove accept-this-as-written markup when it wraps all of concatenated out
	if accept then
		temp_str = has_accept_as_written (str);									-- when global markup removed, return original str; do it this way to suppress boolean second return value
		return temp_str:gsub("，", ","):gsub("；", ";");
	else
		return temp_str:gsub("，", ","):gsub("；", ";");						-- else, return assembled temp_str
	end
end


--[=[-------------------------&lt; M A K E _ W I K I L I N K &gt;----------------------------------------------------

Makes a wikilink; when both link and display text is provided, returns a wikilink in the form [[L|D]]; if only
link is provided (or link and display are the same), returns a wikilink in the form [[L]]; if neither are
provided or link is omitted, returns an empty string.

]=]

local function make_wikilink (link, display)
	if not is_set (link) then return '' end

	if is_set (display) and link ~= display then			
		return table.concat ({'[[', link, '|', display, ']]'});			
	else
		return table.concat ({'[[', link, ']]'});
	end
end


--[[--------------------------&lt; S E T _ M E S S A G E &gt;----------------------------------------------------------

Sets an error message using the ~/Configuration error_conditions{} table along with arguments supplied in the function
call, inserts the resulting message in z.error_msgs_t{} sequence table, and returns the error message.

&lt;error_id&gt; – key value for appropriate error handler in ~/Configuration error_conditions{} table 
&lt;arguments&gt; – may be a single string or a sequence table of multiple strings to be subsititued into error_conditions[error_id].message
&lt;raw&gt; – boolean
	true –	causes this function to return the error message not wrapped in visible-error, hidden-error span tag;
			returns error_conditions[error_id].hidden as a second return value
			does not add message to z.error_msgs_t sequence table
	false, nil – adds message wrapped in visible-error, hidden-error span tag to z.error_msgs_t
			returns the error message wrapped in visible-error, hidden-error span tag; there is no second return value
&lt;prefix&gt; – string to be prepended to &lt;message&gt;									-- TODO: remove support for these unused(?) arguments?
&lt;suffix&gt; – string to be appended to &lt;message&gt;

TODO: change z.error_cats_t and z.maint_cats_t to have the form cat_name = true?  this to avoid dups without having to have an extra table

]]

local added_maint_cats = {}														-- list of maintenance categories that have been added to z.maint_cats_t; TODO: figure out how to delete this table

local function set_message (error_id, arguments, raw, prefix, suffix)
	local error_state = cfg.error_conditions[error_id];
	
	prefix = prefix or '';
	suffix = suffix or '';
	
	if error_state == nil then
		error (cfg.messages['undefined_error'] .. ': ' .. error_id);			-- because missing error handler in Module:Citation/CS1/Configuration

	elseif is_set (error_state.category) then
		if error_state.message then												-- when error_state.message defined, this is an error message
			table.insert (z.error_cats_t, error_state.category);
		else
			if not added_maint_cats[error_id] then
				added_maint_cats[error_id] = true;								-- note that we've added this category
				table.insert (z.maint_cats_t, substitute (error_state.category, arguments));	-- make cat name then add to table
			end
			return;																-- because no message, nothing more to do
		end
	end

	local message = substitute (error_state.message, arguments);

	message = table.concat (
		{
		message,
		' (',
		make_wikilink (
			table.concat (
				{
				cfg.messages['help page link'],
				'#',
				error_state.anchor
				}),
			cfg.messages['help page label']),
		')'
		});

	z.error_ids_t[error_id] = true;
	if z.error_ids_t['err_citation_missing_title'] and							-- if missing-title error already noted
		in_array (error_id, {'err_bare_url_missing_title', 'err_trans_missing_title'}) then		-- and this error is one of these
			return '', false;													-- don't bother because one flavor of missing title is sufficient
	end
	
	message = table.concat ({prefix, message, suffix});

	if true == raw then
		return message, error_state.hidden;										-- return message not wrapped in visible-error, hidden-error span tag
	end		

	message = error_comment (message, error_state.hidden);						-- wrap message in visible-error, hidden-error span tag
	table.insert (z.error_msgs_t, message);										-- add it to the messages sequence table
	return message;																-- and done; return value generally not used but is used as a flag in various functions of ~/Identifiers
end


--[[-------------------------&lt; I S _ A L I A S _ U S E D &gt;-----------------------------------------------------

This function is used by select_one() to determine if one of a list of alias parameters is in the argument list
provided by the template.

Input:
	args – pointer to the arguments table from calling template
	alias – one of the list of possible aliases in the aliases lists from Module:Citation/CS1/Configuration
	index – for enumerated parameters, identifies which one
	enumerated – true/false flag used to choose how enumerated aliases are examined
	value – value associated with an alias that has previously been selected; nil if not yet selected
	selected – the alias that has previously been selected; nil if not yet selected
	error_list – list of aliases that are duplicates of the alias already selected

Returns:
	value – value associated with alias we selected or that was previously selected or nil if an alias not yet selected
	selected – the alias we selected or the alias that was previously selected or nil if an alias not yet selected

]]

local function is_alias_used (args, alias, index, enumerated, value, selected, error_list)
	if enumerated then															-- is this a test for an enumerated parameters?
		alias = alias:gsub ('#', index);										-- replace '#' with the value in index
	else
		alias = alias:gsub ('#', '');											-- remove '#' if it exists
	end

	if is_set (args[alias]) then												-- alias is in the template's argument list
		if value ~= nil and selected ~= alias then								-- if we have already selected one of the aliases
			local skip;
			for _, v in ipairs (error_list) do									-- spin through the error list to see if we've added this alias
				if v == alias then
					skip = true;
					break;														-- has been added so stop looking 
				end
			end
			if not skip then													-- has not been added so
				table.insert (error_list, alias);								-- add error alias to the error list
			end
		else
			value = args[alias];												-- not yet selected an alias, so select this one
			selected = alias;
		end
	end
	return value, selected;														-- return newly selected alias, or previously selected alias
end


--[[--------------------------&lt; A D D _ M A I N T _ C A T &gt;------------------------------------------------------

Adds a category to z.maint_cats_t using names from the configuration file with additional text if any.
To prevent duplication, the added_maint_cats table lists the categories by key that have been added to z.maint_cats_t.

]]

local function add_maint_cat (key, arguments)
	if not added_maint_cats [key] then
		added_maint_cats [key] = true;											-- note that we've added this category
		table.insert (z.maint_cats_t, substitute (cfg.maint_cats [key], arguments));	-- make name then add to table
	end
end


--[[--------------------------&lt; A D D _ P R O P _ C A T &gt;--------------------------------------------------------

Adds a category to z.prop_cats_t using names from the configuration file with additional text if any.

foreign_lang_source and foreign_lang_source_2 keys have a language code appended to them so that multiple languages
may be categorized but multiples of the same language are not categorized.

added_prop_cats is a table declared in page scope variables above

]]

local added_prop_cats = {};														-- list of property categories that have been added to z.prop_cats_t

local function add_prop_cat (key, arguments, key_modifier)
	local key_modified = key .. ((key_modifier and key_modifier) or '');		-- modify &lt;key&gt; with &lt;key_modifier&gt; if present and not nil
	
	if not added_prop_cats [key_modified] then
		added_prop_cats [key_modified] = true;									-- note that we've added this category
		table.insert (z.prop_cats_t, substitute (cfg.prop_cats [key], arguments));	-- make name then add to table
		table.insert (z.prop_keys_t, 'cs1-prop-' .. key);						-- convert key to class for use in the citation's &lt;cite&gt; tag
	end
end


--[[--------------------------&lt; S A F E _ F O R _ I T A L I C S &gt;----------------------------------------------

Protects a string that will be wrapped in wiki italic markup '' ... ''

Note: We cannot use &lt;i&gt; for italics, as the expected behavior for italics specified by ''...'' in the title is that
they will be inverted (i.e. unitalicized) in the resulting references.  In addition, &lt;i&gt; and '' tend to interact
poorly under Mediawiki's HTML tidy.

]]

local function safe_for_italics (str)
	if not is_set (str) then return str end

	if str:sub (1, 1) == "'" then str = "&lt;span&gt;&lt;/span&gt;" .. str; end
	if str:sub (-1, -1) == "'" then str = str .. "&lt;span&gt;&lt;/span&gt;"; end
	
	return str:gsub ('\n', ' ');												-- Remove newlines as they break italics.
end


--[[--------------------------&lt; W R A P _ S T Y L E &gt;----------------------------------------------------------

Applies styling to various parameters.  Supplied string is wrapped using a message_list configuration taking one
argument; protects italic styled parameters.  Additional text taken from citation_config.presentation - the reason
this function is similar to but separate from wrap_msg().

]]

local function wrap_style (key, str)
	if not is_set (str) then
		return "";
	elseif in_array (key, {'italic-title', 'trans-italic-title'}) then
		str = safe_for_italics (str);
	end

	return substitute (cfg.presentation[key], {str});
end


--[[--------------------------&lt; M A K E _ S E P _ L I S T &gt;------------------------------------------------------------

make a separated list of items using provided separators.
	&lt;sep_list&gt; - typically '&lt;comma&gt;&lt;space&gt;'
	&lt;sep_list_pair&gt; - typically '&lt;space&gt;and&lt;space&gt;'
	&lt;sep_list_end&gt; - typically '&lt;comma&gt;&lt;space&gt;and&lt;space&gt;' or '&lt;comma&gt;&lt;space&gt;&amp;&lt;space&gt;'

defaults to cfg.presentation['sep_list'], cfg.presentation['sep_list_pair'], and cfg.presentation['sep_list_end']
if &lt;sep_list_end&gt; is specified, &lt;sep_list&gt; and &lt;sep_list_pair&gt; must also be supplied

]]

local function make_sep_list (count, list_seq, sep_list, sep_list_pair, sep_list_end)
	local list = '';

	if not sep_list then														-- set the defaults
		sep_list = cfg.presentation['sep_list'];
		sep_list_pair = cfg.presentation['sep_list_pair'];
		sep_list_end = cfg.presentation['sep_list_end'];
	end
	
	if 2 &gt;= count then
		list = table.concat (list_seq, sep_list_pair);							-- insert separator between two items; returns list_seq[1] then only one item
	elseif 2 &lt; count then
		list = table.concat (list_seq, sep_list, 1, count - 1);					-- concatenate all but last item with plain list separator
		list = table.concat ({list, list_seq[count]}, sep_list_end);			-- concatenate last item onto end of &lt;list&gt; with final separator
	end
	
	return list;
end


--[[--------------------------&lt; S E L E C T _ O N E &gt;----------------------------------------------------------

Chooses one matching parameter from a list of parameters to consider.  The list of parameters to consider is just
names.  For parameters that may be enumerated, the position of the numerator in the parameter name is identified
by the '#' so |author-last1= and |author1-last= are represented as 'author-last#' and 'author#-last'.

Because enumerated parameter |&lt;param&gt;1= is an alias of |&lt;param&gt;= we must test for both possibilities.


Generates an error if more than one match is present.

]]

local function select_one (args, aliases_list, error_condition, index)
	local value = nil;															-- the value assigned to the selected parameter
	local selected = '';														-- the name of the parameter we have chosen
	local error_list = {};

	if index ~= nil then index = tostring(index); end

	for _, alias in ipairs (aliases_list) do									-- for each alias in the aliases list
		if alias:match ('#') then												-- if this alias can be enumerated
			if '1' == index then												-- when index is 1 test for enumerated and non-enumerated aliases
				value, selected = is_alias_used (args, alias, index, false, value, selected, error_list);	-- first test for non-enumerated alias
			end
			value, selected = is_alias_used (args, alias, index, true, value, selected, error_list);	-- test for enumerated alias
		else
			value, selected = is_alias_used (args, alias, index, false, value, selected, error_list);	-- test for non-enumerated alias
		end
	end

	if #error_list &gt; 0 and 'none' ~= error_condition then						-- for cases where this code is used outside of extract_names()
		for i, v in ipairs (error_list) do
			error_list[i] = wrap_style ('parameter', v);
		end
		table.insert (error_list, wrap_style ('parameter', selected));
		set_message (error_condition, {make_sep_list (#error_list, error_list)});
	end
	
	return value, selected;
end


--[=[-------------------------&lt; R E M O V E _ W I K I _ L I N K &gt;----------------------------------------------

Gets the display text from a wikilink like [[A|B]] or [[B]] gives B

The str:gsub() returns either A|B froma [[A|B]] or B from [[B]] or B from B (no wikilink markup).

In l(), l:gsub() removes the link and pipe (if they exist); the second :gsub() trims whitespace from the label
if str was wrapped in wikilink markup.  Presumably, this is because without wikimarkup in str, there is no match
in the initial gsub, the replacement function l() doesn't get called.

]=]

local function remove_wiki_link (str)
	return (str:gsub ("%[%[([^%[%]]*)%]%]", function(l)
		return l:gsub ("^[^|]*|(.*)$", "%1" ):gsub ("^%s*(.-)%s*$", "%1");
	end));
end


--[=[-------------------------&lt; I S _ W I K I L I N K &gt;--------------------------------------------------------

Determines if str is a wikilink, extracts, and returns the wikilink type, link text, and display text parts.
If str is a complex wikilink ([[L|D]]):
	returns wl_type 2 and D and L from [[L|D]];
if str is a simple wikilink ([[D]])
	returns wl_type 1 and D from [[D]] and L as empty string;
if not a wikilink:
	returns wl_type 0, str as D, and L as empty string.

trims leading and trailing whitespace and pipes from L and D ([[L|]] and [[|D]] are accepted by MediaWiki and
treated like [[D]]; while [[|D|]] is not accepted by MediaWiki, here, we accept it and return D without the pipes).

]=]

local function is_wikilink (str)
	local D, L
	local wl_type = 2;															-- assume that str is a complex wikilink [[L|D]]

	if not str:match ('^%[%[[^%]]+%]%]$') then									-- is str some sort of a wikilink (must have some sort of content)
		return 0, str, '';														-- not a wikilink; return wl_type as 0, str as D, and empty string as L
	end
	
	L, D = str:match ('^%[%[([^|]+)|([^%]]+)%]%]$');							-- get L and D from [[L|D]] 

	if not is_set (D) then														-- if no separate display
		D = str:match ('^%[%[([^%]]*)|*%]%]$');									-- get D from [[D]] or [[D|]]
		wl_type = 1; 
	end
	
	D = mw.text.trim (D, '%s|');												-- trim white space and pipe characters 
	return wl_type, D, L or '';
end


--[[--------------------------&lt; S T R I P _ A P O S T R O P H E _ M A R K U P &gt;--------------------------------

Strip wiki italic and bold markup from argument so that it doesn't contaminate COinS metadata.
This function strips common patterns of apostrophe markup.  We presume that editors who have taken the time to
markup a title have, as a result, provided valid markup. When they don't, some single apostrophes are left behind.

Returns the argument without wiki markup and a number; the number is more-or-less meaningless except as a flag
to indicate that markup was replaced; do not rely on it as an indicator of how many of any kind of markup was
removed; returns the argument and nil when no markup removed

]]

local function strip_apostrophe_markup (argument)
	if not is_set (argument) then
		return argument, nil;													-- no argument, nothing to do
	end

	if nil == argument:find ( "''", 1, true ) then								-- Is there at least one double apostrophe?  If not, exit.
		return argument, nil;
	end

	local flag;
	while true do
		if argument:find ("'''''", 1, true) then								-- bold italic (5)
			argument, flag = argument:gsub ("%'%'%'%'%'", "");					-- remove all instances of it
		elseif argument:find ("''''", 1, true) then								-- italic start and end without content (4)
			argument, flag=argument:gsub ("%'%'%'%'", "");
		elseif argument:find ("'''", 1, true) then								-- bold (3)
			argument, flag=argument:gsub ("%'%'%'", "");
		elseif argument:find ("''", 1, true) then								-- italic (2)
			argument, flag = argument:gsub ("%'%'", "");
		else
			break;
		end
	end

	return argument, flag;														-- done
end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local cfg table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr)
	cfg = cfg_table_ptr;
	
end


--[[--------------------------&lt; E X P O R T S &gt;----------------------------------------------------------------
]]

return {
	add_maint_cat = add_maint_cat,												-- exported functions
	add_prop_cat = add_prop_cat,
	error_comment = error_comment,
	has_accept_as_written = has_accept_as_written,
	hyphen_to_dash = hyphen_to_dash,
	in_array = in_array,
	is_set = is_set,
	is_wikilink = is_wikilink,
	make_sep_list = make_sep_list,
	make_wikilink = make_wikilink,
	remove_wiki_link = remove_wiki_link,
	safe_for_italics = safe_for_italics,
	select_one = select_one,
	set_message = set_message,
	set_selected_modules = set_selected_modules,
	strip_apostrophe_markup = strip_apostrophe_markup,
	substitute = substitute,
	wrap_style = wrap_style,

	z = z,																		-- exported table
	}</text>
      <sha1>kk801mqzkv4xrvmuck62gy23fyu6dl0</sha1>
    </revision>
  </page>
  <page>
    <title>Module:InfoboxImage</title>
    <ns>828</ns>
    <id>12</id>
    <revision>
      <id>16</id>
      <timestamp>2023-08-20T13:40:54Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "-- Inputs: --    image - Can either be a bare filename (with or without the File:/Image: prefix) or a fully formatted image link --    page - page to display for multipage images (DjVu) --    size - size to display the image --    maxsize - maximum size for image --    sizedefault - default size to display the image if size param is blank --    alt - alt text for image --    title - title text for image --    border - set to yes if border --    center - set to yes, if th..."</comment>
      <origin>16</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="10244" sha1="1qnfhbaitrn7lf4l4ypjcfzdf5a9lxe" xml:space="preserve">-- Inputs:
--    image - Can either be a bare filename (with or without the File:/Image: prefix) or a fully formatted image link
--    page - page to display for multipage images (DjVu)
--    size - size to display the image
--    maxsize - maximum size for image
--    sizedefault - default size to display the image if size param is blank
--    alt - alt text for image
--    title - title text for image
--    border - set to yes if border
--    center - set to yes, if the image has to be centered
--    upright - upright image param
--    suppressplaceholder - if yes then checks to see if image is a placeholder and suppresses it
--    link - page to visit when clicking on image
--    class - HTML classes to add to the image
-- Outputs:
--    Formatted image.
-- More details available at the "Module:InfoboxImage/doc" page

local i = {};

local placeholder_image = {
    "Blue - Replace this image female.svg",
    "Blue - Replace this image male.svg",
    "Female no free image yet.png",
    "Flag of None (square).svg",
    "Flag of None.svg",
    "Flag of.svg",
    "Green - Replace this image female.svg",
    "Green - Replace this image male.svg",
    "Image is needed female.svg",
    "Image is needed male.svg",
    "Location map of None.svg",
    "Male no free image yet.png",
    "Missing flag.png",
    "No flag.svg",
    "No free portrait.svg",
    "No portrait (female).svg",
    "No portrait (male).svg",
    "Red - Replace this image female.svg",
    "Red - Replace this image male.svg",
    "Replace this image female (blue).svg",
    "Replace this image female.svg",
    "Replace this image male (blue).svg",
    "Replace this image male.svg",
    "Silver - Replace this image female.svg",
    "Silver - Replace this image male.svg",
    "Replace this image.svg",
	"Cricket no pic.png",
	"CarersLogo.gif",
	"Diagram Needed.svg",
	"Example.jpg",
	"Image placeholder.png",
	"No male portrait.svg",
	"Nocover-upload.png",
	"NoDVDcover copy.png",
	"Noribbon.svg",
	"No portrait-BFD-test.svg",
	"Placeholder barnstar ribbon.png",
	"Project Trains no image.png",
	"Image-request.png",
	"Sin bandera.svg",
	"Sin escudo.svg",
	"Replace this image - temple.png",
	"Replace this image butterfly.png",
	"Replace this image.svg",
	"Replace this image1.svg",
	"Resolution angle.png",
	"Image-No portrait-text-BFD-test.svg",
	"Insert image here.svg",
	"No image available.png",
	"NO IMAGE YET square.png",
	"NO IMAGE YET.png",
	"No Photo Available.svg",
	"No Screenshot.svg",
	"No-image-available.jpg",
	"Null.png",
	"PictureNeeded.gif",
	"Place holder.jpg",
	"Unbenannt.JPG",
	"UploadACopyrightFreeImage.svg",
	"UploadAnImage.gif",
	"UploadAnImage.svg",
	"UploadAnImageShort.svg",
	"CarersLogo.gif",
	"Diagram Needed.svg",
	"No male portrait.svg",
	"NoDVDcover copy.png",
	"Placeholder barnstar ribbon.png",
	"Project Trains no image.png",
	"Image-request.png",
	"Noimage.gif",
}

function i.IsPlaceholder(image)
    -- change underscores to spaces
    image = mw.ustring.gsub(image, "_", " ");
    assert(image ~= nil, 'mw.ustring.gsub(image, "_", " ") must not return nil')
    -- if image starts with [[ then remove that and anything after |
    if mw.ustring.sub(image,1,2) == "[[" then
        image = mw.ustring.sub(image,3);
        image = mw.ustring.gsub(image, "([^|]*)|.*", "%1");
        assert(image ~= nil, 'mw.ustring.gsub(image, "([^|]*)|.*", "%1") must not return nil')
    end
    -- Trim spaces
    image = mw.ustring.gsub(image, '^[ ]*(.-)[ ]*$', '%1');
    assert(image ~= nil, "mw.ustring.gsub(image, '^[ ]*(.-)[ ]*$', '%1') must not return nil")
    -- remove prefix if exists
    local allNames = mw.site.namespaces[6].aliases
    allNames[#allNames + 1] = mw.site.namespaces[6].name
    allNames[#allNames + 1] = mw.site.namespaces[6].canonicalName
    for i, name in ipairs(allNames) do
        if mw.ustring.lower(mw.ustring.sub(image, 1, mw.ustring.len(name) + 1)) == mw.ustring.lower(name .. ":") then
            image = mw.ustring.sub(image, mw.ustring.len(name) + 2);
            break
        end
    end
    -- Trim spaces
    image = mw.ustring.gsub(image, '^[ ]*(.-)[ ]*$', '%1');
    -- capitalise first letter
    image = mw.ustring.upper(mw.ustring.sub(image,1,1)) .. mw.ustring.sub(image,2);

    for i,j in pairs(placeholder_image) do
        if image == j then
            return true
        end
    end
    return false
end

function i.InfoboxImage(frame)
    local image = frame.args["image"];
    
    if image == "" or image == nil then
        return "";
    end
    if image == "&amp;nbsp;" then
        return image;
    end
    if frame.args["suppressplaceholder"] ~= "no" then
        if i.IsPlaceholder(image) == true then
            return "";
        end
    end

    if mw.ustring.lower(mw.ustring.sub(image,1,5)) == "http:" then
        return "";
    end
    if mw.ustring.lower(mw.ustring.sub(image,1,6)) == "[http:" then
        return "";
    end
    if mw.ustring.lower(mw.ustring.sub(image,1,7)) == "[[http:" then
        return "";
    end
    if mw.ustring.lower(mw.ustring.sub(image,1,6)) == "https:" then
        return "";
    end
    if mw.ustring.lower(mw.ustring.sub(image,1,7)) == "[https:" then
        return "";
    end
    if mw.ustring.lower(mw.ustring.sub(image,1,8)) == "[[https:" then
        return "";
    end

    if mw.ustring.sub(image,1,2) == "[[" then
        -- search for thumbnail images and add to tracking cat if found
        local cat = "";
        if mw.title.getCurrentTitle().namespace == 0 and (mw.ustring.find(image, "|%s*thumb%s*[|%]]") or mw.ustring.find(image, "|%s*thumbnail%s*[|%]]")) then
            cat = "[[Category:Pages using infoboxes with thumbnail images]]";
        end
        return image .. cat;
    elseif mw.ustring.sub(image,1,2) == "{{" and mw.ustring.sub(image,1,3) ~= "{{{" then
        return image;
    elseif mw.ustring.sub(image,1,1) == "&lt;" then
        return image;
    elseif mw.ustring.sub(image,1,5) == mw.ustring.char(127).."UNIQ" then
        -- Found strip marker at begining, so pass don't process at all
        return image;
    elseif mw.ustring.sub(image,4,9) == "`UNIQ-" then
        -- Found strip marker at begining, so pass don't process at all
        return image;
    else
        local result = "";
        local page = frame.args["page"];
        local size = frame.args["size"];
        local maxsize = frame.args["maxsize"];
        local sizedefault = frame.args["sizedefault"];
        local alt = frame.args["alt"];
        local link = frame.args["link"];
        local title = frame.args["title"];
        local border = frame.args["border"];
        local upright = frame.args["upright"] or "";
        local thumbtime = frame.args["thumbtime"] or "";
        local center = frame.args["center"];
        local class = frame.args["class"];
        
        -- remove prefix if exists
        local allNames = mw.site.namespaces[6].aliases
        allNames[#allNames + 1] = mw.site.namespaces[6].name
        allNames[#allNames + 1] = mw.site.namespaces[6].canonicalName
        for i, name in ipairs(allNames) do
            if mw.ustring.lower(mw.ustring.sub(image, 1, mw.ustring.len(name) + 1)) == mw.ustring.lower(name .. ":") then
                image = mw.ustring.sub(image, mw.ustring.len(name) + 2);
                break
            end
        end
        
        if maxsize ~= "" and maxsize ~= nil then
            -- if no sizedefault then set to maxsize
            if sizedefault == "" or sizedefault == nil then
                sizedefault = maxsize
            end
            -- check to see if size bigger than maxsize
            if size ~= "" and size ~= nil then
                local sizenumber = tonumber(mw.ustring.match(size,"%d*")) or 0;
                local maxsizenumber = tonumber(mw.ustring.match(maxsize,"%d*")) or 0;
                if sizenumber&gt;maxsizenumber and maxsizenumber&gt;0 then
                    size = maxsize;
                end
            end
        end
        -- add px to size if just a number
        if (tonumber(size) or 0) &gt; 0 then
            size = size .. "px";
        end
        -- add px to sizedefault if just a number
        if (tonumber(sizedefault) or 0) &gt; 0 then
            sizedefault = sizedefault .. "px";
        end
        
        result = "[[File:" .. image;
        if page ~= "" and page ~= nil then
            result = result .. "|page=" .. page;
        end
        if size ~= "" and size ~= nil then
            result = result .. "|" .. size;
        elseif sizedefault ~= "" and sizedefault ~= nil then
            result = result .. "|" .. sizedefault;
        else
            result = result .. "|frameless";
        end
        if center == "yes" then
            result = result .. "|center"
        end
        if alt ~= "" and alt ~= nil then
            result = result .. "|alt=" .. alt;
        end
        if link ~= "" and link ~= nil then
            result = result .. "|link=" .. link;
        end
        if border == "yes" then
            result = result .. "|border";
        end
        if upright == "yes" then
            result = result .. "|upright";
        elseif upright ~= "" then
            result = result .. "|upright=" .. upright;
        end
        if thumbtime ~= "" then
            result = result .. "|thumbtime=" .. thumbtime;
        end
        if class ~= nil and class ~= "" then
            result = result .. "|class=" .. class;
        end
        -- if alt value is a keyword then do not use as a description
        if alt == "thumbnail" or alt == "thumb" or alt == "frameless" or alt == "left" or alt == "center" or alt == "right" or alt == "upright" or alt == "border" or mw.ustring.match(alt or "", '^[0-9]*px$', 1) ~= nil then
            alt = nil;
        end
        if title ~= "" and title ~= nil then
            -- does title param contain any templatestyles? If yes then set to blank.
            if mw.ustring.match(frame:preprocess(title), 'UNIQ%-%-templatestyles', 1) ~= nil then
                title = nil;
            end
        end
        if title ~= "" and title ~= nil then
            result = result .. "|" .. title;
        end
        result = result .. "]]";
        
        return result;
    end
end

return i;</text>
      <sha1>1qnfhbaitrn7lf4l4ypjcfzdf5a9lxe</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Date validation</title>
    <ns>828</ns>
    <id>13</id>
    <revision>
      <id>17</id>
      <timestamp>2023-08-20T13:43:27Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;-------------------------------------- ]]  local add_prop_cat, is_set, in_array, set_message, substitute, wrap_style;		-- imported functions from selected Module:Citation/CS1/Utilities local cfg;																		-- table of tables imported from selected Module:Citation/CS1/Configuration   --[[--------------------------&lt; F I L E - S C O P E   D E C L A R A T I O N S &gt;--------------------------------..."</comment>
      <origin>17</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="65847" sha1="h1et8hc4yy0nzlgfuigrj5tumodmw1t" xml:space="preserve">--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local add_prop_cat, is_set, in_array, set_message, substitute, wrap_style;		-- imported functions from selected Module:Citation/CS1/Utilities
local cfg;																		-- table of tables imported from selected Module:Citation/CS1/Configuration


--[[--------------------------&lt; F I L E - S C O P E   D E C L A R A T I O N S &gt;--------------------------------

File-scope variables are declared here

]]

local lang_object = mw.getContentLanguage();									-- used by is_valid_accessdate(), is_valid_year(), date_name_xlate(); TODO: move to ~/Configuration?
local year_limit;																-- used by is_valid_year()


--[=[-------------------------&lt; I S _ V A L I D _ A C C E S S D A T E &gt;----------------------------------------

returns true if:
	Wikipedia start date &lt;= accessdate &lt; today + 2 days

Wikipedia start date is 2001-01-15T00:00:00 UTC which is 979516800 seconds after 1970-01-01T00:00:00 UTC (the start of Unix time)
accessdate is the date provided in |access-date= at time 00:00:00 UTC
today is the current date at time 00:00:00 UTC plus 48 hours
	if today is 2015-01-01T00:00:00 then
		adding 24 hours gives 2015-01-02T00:00:00 – one second more than today
		adding 24 hours gives 2015-01-03T00:00:00 – one second more than tomorrow

This function does not work if it is fed month names for languages other than English.  Wikimedia #time: parser
apparently doesn't understand non-English date month names. This function will always return false when the date
contains a non-English month name because good1 is false after the call to lang.formatDate().  To get around that
call this function with YYYY-MM-DD format dates.

]=]

local function is_valid_accessdate (accessdate)
	local good1, good2;
	local access_ts, tomorrow_ts;												-- to hold Unix time stamps representing the dates

	good1, access_ts = pcall (lang_object.formatDate, lang_object, 'U', accessdate );			-- convert accessdate value to Unix timestamp 
	good2, tomorrow_ts = pcall (lang_object.formatDate, lang_object, 'U', 'today + 2 days' );	-- today midnight + 2 days is one second more than all day tomorrow
	
	if good1 and good2 then														-- lang.formatDate() returns a timestamp in the local script which which tonumber() may not understand
		access_ts = tonumber (access_ts) or lang_object:parseFormattedNumber (access_ts);		-- convert to numbers for the comparison;
		tomorrow_ts = tonumber (tomorrow_ts) or lang_object:parseFormattedNumber (tomorrow_ts);
	else
		return false;															-- one or both failed to convert to Unix time stamp
	end

	if 979516800 &lt;= access_ts and access_ts &lt; tomorrow_ts then					-- Wikipedia start date &lt;= accessdate &lt; tomorrow's date
		return true;
	else
		return false;															-- accessdate out of range
	end
end


--[[--------------------------&lt; G E T _ M O N T H _ N U M B E R &gt;----------------------------------------------

returns a number according to the month in a date: 1 for January, etc.  Capitalization and spelling must be correct.
If not a valid month, returns 0

]]

local function get_month_number (month)
	return cfg.date_names['local'].long[month] or cfg.date_names['local'].short[month] or	-- look for local names first
			cfg.date_names['en'].long[month] or	cfg.date_names['en'].short[month] or		-- failing that, look for English names
			0;																				-- not a recognized month name
end


--[[--------------------------&lt; G E T _ S E A S O N _ N U M B E R &gt;--------------------------------------------

returns a number according to the sequence of seasons in a year: 21 for Spring, etc.  Capitalization and spelling
must be correct. If not a valid season, returns 0.
	21-24 = Spring, Summer, Autumn, Winter, independent of “Hemisphere”

returns 0 when &lt;param&gt; is not |date=

Season numbering is defined by Extended Date/Time Format (EDTF) specification (https://www.loc.gov/standards/datetime/)
which became part of ISO 8601 in 2019.  See '§Sub-year groupings'.  The standard defines various divisions using
numbers 21-41.  cs1|2 only supports generic seasons.  EDTF does support the distinction between north and south
hemisphere seasons but cs1|2 has no way to make that distinction.

These additional divisions not currently supported:
	25-28 = Spring - Northern Hemisphere, Summer- Northern Hemisphere, Autumn - Northern Hemisphere, Winter - Northern Hemisphere
	29-32 = Spring – Southern Hemisphere, Summer– Southern Hemisphere, Autumn – Southern Hemisphere, Winter - Southern Hemisphere
	33-36 = Quarter 1, Quarter 2, Quarter 3, Quarter 4 (3 months each)
	37-39 = Quadrimester 1, Quadrimester 2, Quadrimester 3 (4 months each)
	40-41 = Semestral 1, Semestral-2 (6 months each)

]]

local function get_season_number (season, param)
	if 'date' ~= param then
		return 0;																-- season dates only supported by |date=
	end
	return cfg.date_names['local'].season[season] or							-- look for local names first
			cfg.date_names['en'].season[season] or								-- failing that, look for English names
			0;																	-- not a recognized season name
end


--[[--------------------------&lt; G E T _ Q U A R T E R _ N U M B E R &gt;------------------------------------------

returns a number according to the sequence of quarters in a year: 33 for first quarter, etc.  Capitalization and spelling
must be correct. If not a valid quarter, returns 0.
	33-36 = Quarter 1, Quarter 2, Quarter 3, Quarter 4 (3 months each)

returns 0 when &lt;param&gt; is not |date=

Quarter numbering is defined by Extended Date/Time Format (EDTF) specification (https://www.loc.gov/standards/datetime/)
which became part of ISO 8601 in 2019.  See '§Sub-year groupings'.  The standard defines various divisions using
numbers 21-41.  cs1|2 only supports generic seasons and quarters.

These additional divisions not currently supported:
	37-39 = Quadrimester 1, Quadrimester 2, Quadrimester 3 (4 months each)
	40-41 = Semestral 1, Semestral-2 (6 months each)

]]

local function get_quarter_number (quarter, param)
	if 'date' ~= param then
		return 0;																-- quarter dates only supported by |date=
	end
	quarter = mw.ustring.gsub (quarter, ' +', ' ');								-- special case replace multiple space chars with a single space char
	return cfg.date_names['local'].quarter[quarter] or							-- look for local names first
			cfg.date_names['en'].quarter[quarter] or							-- failing that, look for English names
			0;																	-- not a recognized quarter name
end


--[[--------------------------&lt; G E T _ P R O P E R _ N A M E _ N U M B E R &gt;----------------------------------

returns a non-zero number if date contains a recognized proper-name.  Capitalization and spelling must be correct.

returns 0 when &lt;param&gt; is not |date=

]]

local function get_proper_name_number (name, param)
	if 'date' ~= param then
		return 0;																-- proper-name dates only supported by |date=
	end
	return cfg.date_names['local'].named[name] or								-- look for local names dates first
			cfg.date_names['en'].named[name] or									-- failing that, look for English names
			0;																	-- not a recognized named date
end


--[[--------------------------&lt; G E T _ E L E M E N T _ N U M B E R &lt;------------------------------------------

returns true if month or season or quarter or proper name is valid (properly spelled, capitalized, abbreviated)

]]

local function get_element_number (element, param)
	local num;
	
	local funcs = {get_month_number, get_season_number, get_quarter_number, get_proper_name_number};	-- list of functions to execute in order
	
	for _, func in ipairs (funcs) do											-- spin through the function list
		num = func (element, param);											-- call the function and get the returned number
		if 0 ~= num then														-- non-zero when valid month season quarter 
			return num;															-- return that number
		end
	end
	return nil;																	-- not valid
end


--[[--------------------------&lt; I S _ V A L I D _ Y E A R &gt;----------------------------------------------------

Function gets current year from the server and compares it to year from a citation parameter.  Years more than one
year in the future are not acceptable.

Special case for |pmc-embargo-date=: years more than two years in the future are not acceptable

]]

local function is_valid_year (year, param)
	if not is_set (year_limit) then
		year_limit = tonumber(os.date("%Y"))+1;									-- global variable so we only have to fetch it once
	end

	year = tonumber (year) or lang_object:parseFormattedNumber (year);			-- convert to number for the comparison
	if year and (100 &gt; year) then												-- years less than 100 not supported
		return false;
	end
	
	if 'pmc-embargo-date' == param then											-- special case for |pmc-embargo-date=
		return year and (year &lt;= tonumber(os.date("%Y"))+2) or false;			-- years more than two years in the future are not accepted
	end	
	return year and (year &lt;= year_limit) or false;
end


--[[--------------------------&lt; I S _ V A L I D _ D A T E &gt;----------------------------------------------------

Returns true if day is less than or equal to the number of days in month and year is no farther into the future
than next year; else returns false.

Assumes Julian calendar prior to year 1582 and Gregorian calendar thereafter. Accounts for Julian calendar leap
years before 1582 and Gregorian leap years after 1582. Where the two calendars overlap (1582 to approximately
1923) dates are assumed to be Gregorian.

]]

local function is_valid_date (year, month, day, param)
local days_in_month = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
local month_length;
	if not is_valid_year (year, param) then										-- no farther into the future than next year except |pmc-embargo-date= no more than two years in the future
		return false;
	end
	
	month = tonumber (month);													-- required for YYYY-MM-DD dates
	
	if (2 == month) then														-- if February
		month_length = 28;														-- then 28 days unless
		if 1582 &gt; tonumber(year) then											-- Julian calendar
			if 0 == (year%4) then												-- is a leap year?
				month_length = 29;												-- if leap year then 29 days in February
			end
		else																	-- Gregorian calendar
			if (0 == (year%4) and (0 ~= (year%100) or 0 == (year%400))) then	-- is a leap year?
				month_length = 29;												-- if leap year then 29 days in February
			end
		end
	else
		month_length = days_in_month[month];
	end

	if tonumber (day) &gt; month_length then
		return false;
	end
	return true;
end


--[[--------------------------&lt; I S _ V A L I D _ M O N T H _ R A N G E _ S T Y L E &gt;--------------------------

Months in a range are expected to have the same style: Jan–Mar or October–December but not February–Mar or Jul–August. 
This function looks in cfg.date_names{} to see if both month names are listed in the long subtable or both are
listed in the short subtable.  When both have the same style (both are listed in the same table), returns true; false else

]]

local function is_valid_month_range_style (month1, month2)
	if (cfg.date_names.en.long[month1] and cfg.date_names.en.long[month2]) or					-- are both English names listed in the long subtable?
		(cfg.date_names.en.short[month1] and cfg.date_names.en.short[month2]) or				-- are both English names listed in the short subtable?
		(cfg.date_names['local'].long[month1] and cfg.date_names['local'].long[month2]) or		-- are both local names listed in the long subtable?
		(cfg.date_names['local'].short[month1] and cfg.date_names['local'].short[month2]) then	-- are both local names listed in the short subtable?
			return true;
	end
	return false;																-- names are mixed
end


--[[--------------------------&lt; I S _ V A L I D _ M O N T H _ S E A S O N _ R A N G E &gt;------------------------

Check a pair of months or seasons to see if both are valid members of a month or season pair.

Month pairs are expected to be left to right, earliest to latest in time.

All season ranges are accepted as valid because there are publishers out there who have published a Summer–Spring YYYY issue, hence treat as ok

]]

local function is_valid_month_season_range(range_start, range_end, param)
	local range_start_number = get_month_number (range_start);
	local range_end_number;

	if 0 == range_start_number then												-- is this a month range?
		range_start_number = get_season_number (range_start, param);			-- not a month; is it a season? get start season number
		range_end_number = get_season_number (range_end, param);				-- get end season number

		if (0 ~= range_start_number) and (0 ~= range_end_number) and (range_start_number ~= range_end_number) then
			return true;														-- any season pairing is accepted except when both are the same
		end
		return false;															-- range_start and/or range_end is not a season
	end
																				-- here when range_start is a month
	range_end_number = get_month_number (range_end);							-- get end month number
	if range_start_number &lt; range_end_number and								-- range_start is a month; does range_start precede range_end?
		is_valid_month_range_style (range_start, range_end) then				-- do months have the same style?
			return true;														-- proper order and same style
	end
	return false;																-- range_start month number is greater than or equal to range end number; or range end isn't a month
end


--[[--------------------------&lt; M A K E _ C O I N S _ D A T E &gt;------------------------------------------------

This function receives a table of date parts for one or two dates and an empty table reference declared in
Module:Citation/CS1.  The function is called only for |date= parameters and only if the |date=&lt;value&gt; is 
determined to be a valid date format.  The question of what to do with invalid date formats is not answered here.

The date parts in the input table are converted to an ISO 8601 conforming date string:
	single whole dates:		yyyy-mm-dd
	month and year dates:	yyyy-mm
	year dates:				yyyy
	ranges:					yyyy-mm-dd/yyyy-mm-dd
							yyyy-mm/yyyy-mm
							yyyy/yyyy

Dates in the Julian calendar are reduced to year or year/year so that we don't have to do calendar conversion from
Julian to Proleptic Gregorian.

The input table has:
	year, year2 – always present; if before 1582, ignore months and days if present
	month, month2 – 0 if not provided, 1-12 for months, 21-24 for seasons; 99 Christmas
	day, day2 –  0 if not provided, 1-31 for days
	
the output table receives:
	rftdate:	an ISO 8601 formatted date
	rftchron:	a free-form version of the date, usually without year which is in rftdate (season ranges and proper-name dates)
	rftssn:		one of four season keywords: winter, spring, summer, fall (lowercase)
	rftquarter:	one of four values: 1, 2, 3, 4

]]

local function make_COinS_date (input, tCOinS_date)
	local date;																	-- one date or first date in a range
	local date2 = '';															-- end of range date
	input.year = tonumber (input.year) or lang_object:parseFormattedNumber (input.year);	-- language-aware tonumber()
	input.year2 = tonumber (input.year2) or lang_object:parseFormattedNumber (input.year2);	-- COinS dates are pseudo-ISO 8601 so convert to Arabic numerals

-- start temporary Julian / Gregorian calendar uncertainty detection
	local year = input.year;													-- this temporary code to determine the extent of sources dated to the Julian/Gregorian
	local month = tonumber(input.month);										-- interstice 1 October 1582 – 1 January 1926
	local day = tonumber (input.day);
	if (0 ~= day) and															-- day must have a value for this to be a whole date
		(((1582 == year) and (10 &lt;= month) and (12 &gt;= month)) or				-- any whole 1582 date from 1 October to 31 December or
			((1926 == year) and (1 == month) and (1 == input.day)) or			-- 1 January 1926 or
				((1582 &lt; year) and (1925 &gt;= year))) then						-- any date 1 January 1583 – 31 December 1925
					tCOinS_date.inter_cal_cat = true;							-- set category flag true
	end
-- end temporary Julian / Gregorian calendar uncertainty detection
	if ((1582 == year) and (10 &gt; month)) or (1582 &gt; year) then					-- if a Julian calendar date
		tCOinS_date.rftdate = tostring (input.year);							-- &amp;rft.date gets year only
		return;																	-- done
	end
																				-- here for all forms of Gregorian dates
	if 20 &lt; tonumber (input.month) then											-- if season, quarter, or proper-name date
		date = input.year;														-- &amp;rft.date gets year only
		if 0 ~= input.year2 and input.year ~= input.year2 then					-- if a range, only the second year portion when not the same as range start year
			date = string.format ('%.4d/%.4d', input.year, input.year2)			-- assemble the date range
		end

		local season = {[24] = 'winter', [21] = 'spring', [22] = 'summer', [23] = 'fall', [33] = '1', [34] = '2', [35] = '3', [36] = '4', [98] = 'Easter', [99] = 'Christmas'};	-- seasons lowercase, no autumn; proper-names use title case
		if 0 == input.month2 then												-- single season, quarter, or proper-name date
			if 40 &lt; tonumber(input.month) then
				tCOinS_date.rftchron = season[input.month];						-- proper-name date; used in journal metadata only
			elseif 30 &lt; tonumber(input.month) then
				tCOinS_date.rftquarter = season[input.month];					-- quarter date; used in journal metadata only
			else
				tCOinS_date.rftssn = season[input.month];						-- season date; used in journal metadata only
			end
		else																	-- season ranges are lumped into &amp;rft.chron; &amp;rft.ssn and &amp;rft.quarter are left blank
			if input.year ~= input.year2 then									-- season year – season year range or season year–year
				if 0 ~= input.month2 then
					tCOinS_date.rftchron = string.format ('%s %s – %s %s', season[input.month], input.year, season[input.month2], input.year2);	-- used in journal metadata only
				end
			else																-- season–season year range
				tCOinS_date.rftchron = season[input.month] .. '–' .. season[input.month2];	-- season–season year range; used in journal metadata only
			end
		end

		tCOinS_date.rftdate = tostring (date);
		return;																	-- done
	end
																				-- here for gregorian calendar dates
	if 0 ~= input.day then
		date = string.format ('%s-%.2d-%.2d', input.year, tonumber(input.month), tonumber(input.day));	-- whole date
	elseif 0 ~= input.month then
		date = string.format ('%s-%.2d', input.year, tonumber(input.month));	-- year and month
	else
		date = string.format ('%s', input.year);								-- just year
	end

	if 0 ~= input.year2 then
		if 0 ~= input.day2 then
			date2 = string.format ('/%s-%.2d-%.2d', input.year2, tonumber(input.month2), tonumber(input.day2));		-- whole date
		elseif 0 ~= input.month2 then
			date2 = string.format ('/%s-%.2d', input.year2, tonumber(input.month2));	-- year and month
		else
			date2 = string.format ('/%s', input.year2);							-- just year
		end
	end
	
	tCOinS_date.rftdate = date .. date2;										-- date2 has the '/' separator
	return;
end


--[[--------------------------&lt; P A T T E R N S &gt;--------------------------------------------------------------

this is the list of patterns for date formats that this module recognizes.  Approximately the first half of these
patterns represent formats that might be reformatted into another format.  Those that might be reformatted have
'indicator' letters that identify the content of the matching capture: 'd' (day), 'm' (month), 'a' (anchor year),
'y' (year); second day, month, year have a '2' suffix.

These patterns are used for both date validation and for reformatting.  This table should not be moved to ~/Configuration
because changes to this table require changes to check_date() and to reformatter() and reformat_date()

]]

local patterns = {
	 																			-- year-initial numerical year-month-day
	['ymd'] = {'^(%d%d%d%d)%-(%d%d)%-(%d%d)$', 'y', 'm', 'd'},					
																				-- month-initial: month day, year
	['Mdy'] = {'^(%D-) +([1-9]%d?), +((%d%d%d%d?)%a?)$', 'm', 'd', 'a', 'y'},
																				-- month-initial day range: month day–day, year; days are separated by endash
	['Md-dy'] = {'^(%D-) +([1-9]%d?)[%-–]([1-9]%d?), +((%d%d%d%d)%a?)$', 'm', 'd', 'd2', 'a', 'y'},
																				-- day-initial: day month year
	['dMy'] = {'^([1-9]%d?) +(%D-) +((%d%d%d%d?)%a?)$', 'd', 'm', 'a', 'y'},
																				-- year-initial: year month day; day: 1 or 2 two digits, leading zero allowed; not supported at en.wiki
	--	['yMd'] = {'^((%d%d%d%d?)%a?) +(%D-) +(%d%d?)$', 'a', 'y', 'm', 'd'},
																				-- day-range-initial: day–day month year; days are separated by endash
	['d-dMy'] = {'^([1-9]%d?)[%-–]([1-9]%d?) +(%D-) +((%d%d%d%d)%a?)$', 'd', 'd2', 'm', 'a', 'y'},
																				-- day initial month-day-range: day month - day month year; uses spaced endash
	['dM-dMy'] = {'^([1-9]%d?) +(%D-) +[%-–] +([1-9]%d?) +(%D-) +((%d%d%d%d)%a?)$', 'd', 'm', 'd2', 'm2', 'a', 'y'},
																				-- month initial month-day-range: month day – month day, year;  uses spaced endash
	['Md-Mdy'] = {'^(%D-) +([1-9]%d?) +[%-–] +(%D-) +([1-9]%d?), +((%d%d%d%d)%a?)$','m', 'd', 'm2', 'd2', 'a', 'y'},
																				-- day initial month-day-year-range: day month year - day month year; uses spaced endash
	['dMy-dMy'] = {'^([1-9]%d?) +(%D-) +(%d%d%d%d) +[%-–] +([1-9]%d?) +(%D-) +((%d%d%d%d)%a?)$', 'd', 'm', 'y', 'd2', 'm2', 'a', 'y2'},
																				-- month initial month-day-year-range: month day, year – month day, year;  uses spaced endash
	['Mdy-Mdy'] = {'^(%D-) +([1-9]%d?), +(%d%d%d%d) +[%-–] +(%D-) +([1-9]%d?), +((%d%d%d%d)%a?)$', 'm', 'd', 'y', 'm2', 'd2', 'a', 'y2'},

																				-- these date formats cannot be converted, per se, but month name can be rendered short or long
																				-- month/season year - month/season year; separated by spaced endash
	['My-My'] = {'^(%D-) +(%d%d%d%d) +[%-–] +(%D-) +((%d%d%d%d)%a?)$', 'm', 'y', 'm2', 'a', 'y2'},
																				-- month/season range year; months separated by endash
	['M-My'] = {'^(%D-)[%-–](%D-) +((%d%d%d%d)%a?)$', 'm', 'm2', 'a', 'y'},
																				-- month/season year or proper-name year; quarter year when First Quarter YYYY etc.
	['My'] = {'^([^%d–]-) +((%d%d%d%d)%a?)$', 'm', 'a', 'y'},					-- this way because endash is a member of %D; %D- will match January–March 2019 when it shouldn't

																				-- these date formats cannot be converted
	['Sy4-y2'] = {'^(%D-) +((%d%d)%d%d)[%-–]((%d%d)%a?)$'},						-- special case Winter/Summer year-year (YYYY-YY); year separated with unspaced endash
	['Sy-y'] = {'^(%D-) +(%d%d%d%d)[%-–]((%d%d%d%d)%a?)$'},						-- special case Winter/Summer year-year; year separated with unspaced endash
	['y-y'] = {'^(%d%d%d%d?)[%-–]((%d%d%d%d?)%a?)$'},							-- year range: YYY-YYY or YYY-YYYY or YYYY–YYYY; separated by unspaced endash; 100-9999
	['y4-y2'] = {'^((%d%d)%d%d)[%-–]((%d%d)%a?)$'},								-- year range: YYYY–YY; separated by unspaced endash
	['y'] = {'^((%d%d%d%d?)%a?)$'},												-- year; here accept either YYY or YYYY
	}


--[[--------------------------&lt; I S _ V A L I D _ E M B A R G O _ D A T E &gt;------------------------------------

returns true and date value if that value has proper dmy, mdy, ymd format.

returns false and 9999 (embargoed forever) when date value is not proper format; assumes that when |pmc-embargo-date= is
set, the editor intended to embargo a PMC but |pmc-embargo-date= does not hold a single date.

]]

local function is_valid_embargo_date (v)
	if v:match (patterns['ymd'][1]) or											-- ymd
		v:match (patterns['Mdy'][1]) or											-- dmy
		v:match (patterns['dMy'][1]) then										-- mdy
			return true, v;
	end
	return false, '9999';														-- if here not good date so return false and set embargo date to long time in future
end


--[[--------------------------&lt; C H E C K _ D A T E &gt;----------------------------------------------------------

Check date format to see that it is one of the formats approved by WP:DATESNO or WP:DATERANGE. Exception: only
allowed range separator is endash.  Additionally, check the date to see that it is a real date: no 31 in 30-day
months; no 29 February when not a leap year.  Months, both long-form and three character abbreviations, and seasons
must be spelled correctly.  Future years beyond next year are not allowed.

If the date fails the format tests, this function returns false and does not return values for anchor_year and
COinS_date.  When this happens, the date parameter is (DEBUG: not?) used in the COinS metadata and the CITEREF identifier gets
its year from the year parameter if present otherwise CITEREF does not get a date value.

Inputs:
	date_string - date string from date-holding parameters (date, year, publication-date, access-date, pmc-embargo-date, archive-date, lay-date)

Returns:
	false if date string is not a real date; else
	true, anchor_year, COinS_date
		anchor_year can be used in CITEREF anchors
		COinS_date is ISO 8601 format date; see make_COInS_date()

]]

local function check_date (date_string, param, tCOinS_date)
	local year;																	-- assume that year2, months, and days are not used;
	local year2 = 0;															-- second year in a year range
	local month = 0;
	local month2 = 0;															-- second month in a month range
	local day = 0;
	local day2 = 0;																-- second day in a day range
	local anchor_year;
	local coins_date;

	if date_string:match (patterns['ymd'][1]) then								-- year-initial numerical year month day format
		year, month, day = date_string:match (patterns['ymd'][1]);
		if 12 &lt; tonumber(month) or 1 &gt; tonumber(month) or 1582 &gt; tonumber(year) or 0 == tonumber(day) then return false; end	-- month or day number not valid or not Gregorian calendar
		anchor_year = year;
	
	elseif mw.ustring.match(date_string, patterns['Mdy'][1]) then				-- month-initial: month day, year
		month, day, anchor_year, year = mw.ustring.match(date_string, patterns['Mdy'][1]);
		month = get_month_number (month);
		if 0 == month then return false; end									-- return false if month text isn't one of the twelve months
				
	elseif mw.ustring.match(date_string, patterns['Md-dy'][1]) then				-- month-initial day range: month day–day, year; days are separated by endash
		month, day, day2, anchor_year, year = mw.ustring.match(date_string, patterns['Md-dy'][1]);
		if tonumber(day) &gt;= tonumber(day2) then return false; end				-- date range order is left to right: earlier to later; dates may not be the same;
		month = get_month_number (month);
		if 0 == month then return false; end									-- return false if month text isn't one of the twelve months
		month2=month;															-- for metadata
		year2 = year;

	elseif mw.ustring.match(date_string, patterns['dMy'][1]) then				-- day-initial: day month year
		day, month, anchor_year, year = mw.ustring.match(date_string, patterns['dMy'][1]);
		month = get_month_number (month);
		if 0 == month then return false; end									-- return false if month text isn't one of the twelve months

--[[ NOT supported at en.wiki
	elseif mw.ustring.match(date_string, patterns['yMd'][1]) then				-- year-initial: year month day; day: 1 or 2 two digits, leading zero allowed
		anchor_year, year, month, day = mw.ustring.match(date_string, patterns['yMd'][1]);
		month = get_month_number (month);
		if 0 == month then return false; end									-- return false if month text isn't one of the twelve months
-- end NOT supported at en.wiki ]]

	elseif mw.ustring.match(date_string, patterns['d-dMy'][1]) then				-- day-range-initial: day–day month year; days are separated by endash
		day, day2, month, anchor_year, year = mw.ustring.match(date_string, patterns['d-dMy'][1]);
		if tonumber(day) &gt;= tonumber(day2) then return false; end				-- date range order is left to right: earlier to later; dates may not be the same;
		month = get_month_number (month);
		if 0 == month then return false; end									-- return false if month text isn't one of the twelve months
		month2 = month;															-- for metadata
		year2 = year;

	elseif mw.ustring.match(date_string, patterns['dM-dMy'][1]) then			-- day initial month-day-range: day month - day month year; uses spaced endash
		day, month, day2, month2, anchor_year, year = mw.ustring.match(date_string, patterns['dM-dMy'][1]);
		if (not is_valid_month_season_range(month, month2)) or not is_valid_year(year) then return false; end	-- date range order is left to right: earlier to later;
		month = get_month_number (month);										-- for metadata
		month2 = get_month_number (month2);
		year2 = year;

	elseif mw.ustring.match(date_string, patterns['Md-Mdy'][1]) then			-- month initial month-day-range: month day – month day, year; uses spaced endash
		month, day, month2, day2, anchor_year, year = mw.ustring.match(date_string, patterns['Md-Mdy'][1]);
		if (not is_valid_month_season_range(month, month2, param)) or not is_valid_year(year) then return false; end
		month = get_month_number (month);										-- for metadata
		month2 = get_month_number (month2);
		year2 = year;

	elseif mw.ustring.match(date_string, patterns['dMy-dMy'][1]) then			-- day initial month-day-year-range: day month year - day month year; uses spaced endash
		day, month, year, day2, month2, anchor_year, year2 = mw.ustring.match(date_string, patterns['dMy-dMy'][1]);
		if tonumber(year2) &lt;= tonumber(year) then return false; end				-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) or not is_valid_month_range_style(month, month2) then return false; end		-- year2 no more than one year in the future; months same style
		month = get_month_number (month);										-- for metadata
		month2 = get_month_number (month2);
		if 0 == month or 0 == month2 then return false; end						-- both must be valid

	elseif mw.ustring.match(date_string, patterns['Mdy-Mdy'][1]) then			-- month initial month-day-year-range: month day, year – month day, year; uses spaced endash
		month, day, year, month2, day2, anchor_year, year2 = mw.ustring.match(date_string, patterns['Mdy-Mdy'][1]);
		if tonumber(year2) &lt;= tonumber(year) then return false; end				-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) or not is_valid_month_range_style(month, month2) then return false; end		-- year2 no more than one year in the future; months same style
		month = get_month_number (month);										-- for metadata
		month2 = get_month_number(month2);
		if 0 == month or 0 == month2 then return false; end						-- both must be valid

	elseif mw.ustring.match(date_string, patterns['Sy4-y2'][1]) then			-- special case Winter/Summer year-year (YYYY-YY); year separated with unspaced endash
		local century;
		month, year, century, anchor_year, year2 = mw.ustring.match(date_string, patterns['Sy4-y2'][1]);
		if 'Winter' ~= month and 'Summer' ~= month then return false end;		-- 'month' can only be Winter or Summer
		anchor_year = year .. '–' .. anchor_year;								-- assemble anchor_year from both years
		year2 = century..year2;													-- add the century to year2 for comparisons
		if 1 ~= tonumber(year2) - tonumber(year) then return false; end			-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year
		month = get_season_number(month, param);

	elseif mw.ustring.match(date_string, patterns['Sy-y'][1]) then				-- special case Winter/Summer year-year; year separated with unspaced endash
		month, year, anchor_year, year2 = mw.ustring.match(date_string, patterns['Sy-y'][1]);
		month = get_season_number (month, param);								-- &lt;month&gt; can only be winter or summer; also for metadata
		if (month ~= cfg.date_names['en'].season['Winter']) and (month ~= cfg.date_names['en'].season['Summer']) then
			return false;														-- not Summer or Winter; abandon
		end
		anchor_year = year .. '–' .. anchor_year;								-- assemble anchor_year from both years
		if 1 ~= tonumber(year2) - tonumber(year) then return false; end			-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year

	elseif mw.ustring.match(date_string, patterns['My-My'][1]) then				-- month/season year - month/season year; separated by spaced endash
		month, year, month2, anchor_year, year2 = mw.ustring.match(date_string, patterns['My-My'][1]);
		anchor_year = year .. '–' .. anchor_year;								-- assemble anchor_year from both years
		if tonumber(year) &gt;= tonumber(year2) then return false; end				-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year
		if 0 ~= get_month_number(month) and 0 ~= get_month_number(month2) and is_valid_month_range_style(month, month2) then 	-- both must be month year, same month style
			month = get_month_number(month);
			month2 = get_month_number(month2);
		elseif 0 ~= get_season_number(month, param) and 0 ~= get_season_number(month2, param) then	-- both must be season year, not mixed
			month = get_season_number(month, param);
			month2 = get_season_number(month2, param);
		else
			 return false;
		end

	elseif mw.ustring.match(date_string, patterns['M-My'][1]) then				-- month/season range year; months separated by endash 
		month, month2, anchor_year, year = mw.ustring.match(date_string, patterns['M-My'][1]);
		if (not is_valid_month_season_range(month, month2, param)) or (not is_valid_year(year)) then return false; end
		if 0 ~= get_month_number(month) then									-- determined to be a valid range so just check this one to know if month or season
			month = get_month_number(month);
			month2 = get_month_number(month2);
			if 0 == month or 0 == month2 then return false; end
		else
			month = get_season_number(month, param);
			month2 = get_season_number(month2, param);
		end
		year2 = year;
		
	elseif mw.ustring.match(date_string, patterns['My'][1]) then				-- month/season/quarter/proper-name year
		month, anchor_year, year = mw.ustring.match(date_string, patterns['My'][1]);
		if not is_valid_year(year) then return false; end
		month = get_element_number(month, param);								-- get month season quarter proper-name number or nil
		if not month then return false; end										-- not valid whatever it is

	elseif mw.ustring.match(date_string, patterns['y-y'][1]) then				-- Year range: YYY-YYY or YYY-YYYY or YYYY–YYYY; separated by unspaced endash; 100-9999
		year, anchor_year, year2 = mw.ustring.match(date_string, patterns['y-y'][1]);
		anchor_year = year .. '–' .. anchor_year;								-- assemble anchor year from both years
		if tonumber(year) &gt;= tonumber(year2) then return false; end				-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year

	elseif mw.ustring.match(date_string, patterns['y4-y2'][1]) then				-- Year range: YYYY–YY; separated by unspaced endash
		local century;
		year, century, anchor_year, year2 = mw.ustring.match(date_string, patterns['y4-y2'][1]);
		anchor_year = year .. '–' .. anchor_year;								-- assemble anchor year from both years

		if 13 &gt; tonumber(year2) then return false; end							-- don't allow 2003-05 which might be May 2003
		year2 = century .. year2;												-- add the century to year2 for comparisons
		if tonumber(year) &gt;= tonumber(year2) then return false; end				-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year

		if in_array (param, {'date', 'publication-date', 'year'}) then			-- here when 'valid' abbreviated year range; if one of these parameters
			add_prop_cat ('year-range-abbreviated');							-- add properties cat
		end

	elseif mw.ustring.match(date_string, patterns['y'][1]) then					-- year; here accept either YYY or YYYY
		anchor_year, year = mw.ustring.match(date_string, patterns['y'][1]);
		if false == is_valid_year(year) then
			return false;
		end

	else
		return false;															-- date format not one of the MOS:DATE approved formats
	end

	if param ~= 'date' then														-- CITEREF disambiguation only allowed in |date=; |year= &amp; |publication-date= promote to date
		if anchor_year:match ('%l$') then
			return false;
		end
	end

	if 'access-date' == param then												-- test access-date here because we have numerical date parts
		if 0 ~= year and 0 ~= month and 0 ~= day and 							-- all parts of a single date required
			0 == year2 and 0 == month2 and 0 == day2 then						-- none of these; access-date must not be a range
				if not is_valid_accessdate(year .. '-' .. month .. '-' .. day) then	
					return false;												-- return false when access-date out of bounds
				end
		else
			return false;														-- return false when access-date is a range of two dates
		end
	end

	if 'archive-date' == param then												-- test archive-date here because we have numerical date parts
		if not (0 ~= year and 0 ~= month and 0 ~= day and						-- all parts of a single date required
			0 == year2 and 0 == month2 and 0 == day2) then						-- none of these; archive-date must not be a range
				return false;													-- return false when archive-date is a range of two dates
		end
	end

	local result=true;															-- check whole dates for validity; assume true because not all dates will go through this test
	if 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 == month2 and 0 == day2 then		-- YMD (simple whole date)
		result = is_valid_date (year, month, day, param);						-- &lt;param&gt; for |pmc-embargo-date=

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 == month2 and 0 ~= day2 then	-- YMD-d (day range)
		result = is_valid_date (year, month, day);
		result = result and is_valid_date (year, month, day2);

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 ~= month2 and 0 ~= day2 then	-- YMD-md (day month range)
		result = is_valid_date (year, month, day);
		result = result and is_valid_date (year, month2, day2);

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 ~= year2 and 0 ~= month2 and 0 ~= day2 then	-- YMD-ymd (day month year range)
		result = is_valid_date(year, month, day);
		result = result and is_valid_date(year2, month2, day2);
	end
	
	if false == result then return false; end

	if nil ~= tCOinS_date then													-- this table only passed into this function when testing |date= parameter values
		make_COinS_date ({year = year, month = month, day = day, year2 = year2, month2 = month2, day2 = day2}, tCOinS_date);	-- make an ISO 8601 date string for COinS
	end
	
	return true, anchor_year;													-- format is good and date string represents a real date
end	


--[[--------------------------&lt; D A T E S &gt;--------------------------------------------------------------------

Cycle the date-holding parameters in passed table date_parameters_list through check_date() to check compliance with MOS:DATE. For all valid dates, check_date() returns
true. The |date= parameter test is unique, it is the only date holding parameter from which values for anchor_year (used in CITEREF identifiers) and COinS_date (used in
the COinS metadata) are derived.  The |date= parameter is the only date-holding parameter that is allowed to contain the no-date keywords "n.d." or "nd" (without quotes).

Unlike most error messages created in this module, only one error message is created by this function. Because all of the date holding parameters are processed serially,
parameters with errors are added to the &lt;error_list&gt; sequence table as the dates are tested.

]]

local function dates(date_parameters_list, tCOinS_date, error_list)
	local anchor_year;															-- will return as nil if the date being tested is not |date=
	local COinS_date;															-- will return as nil if the date being tested is not |date=
	local embargo_date;															-- if embargo date is a good dmy, mdy, ymd date then holds original value else reset to 9999
	local good_date = false;

	for k, v in pairs(date_parameters_list) do									-- for each date-holding parameter in the list
		if is_set(v.val) then													-- if the parameter has a value
			v.val = mw.ustring.gsub(v.val, '%d', cfg.date_names.local_digits);	-- translate 'local' digits to Western 0-9
			if v.val:match("^c%. [1-9]%d%d%d?%a?$") then						-- special case for c. year or with or without CITEREF disambiguator - only |date= and |year=
				local year = v.val:match("c%. ([1-9]%d%d%d?)%a?");				-- get the year portion so it can be tested
				if 'date' == k then
					anchor_year, COinS_date = v.val:match("((c%. [1-9]%d%d%d?)%a?)");	-- anchor year and COinS_date only from |date= parameter
					good_date = is_valid_year(year);
				elseif 'year' == k then
					good_date = is_valid_year(year);
				end
			elseif 'date' == k then												-- if the parameter is |date=
				if v.val:match("^n%.d%.%a?$") then -- ToDo: I18N								-- if |date=n.d. with or without a CITEREF disambiguator
					good_date, anchor_year, COinS_date = true, v.val:match("((n%.d%.)%a?)"); -- ToDo: I18N	-- "n.d."; no error when date parameter is set to no date
				elseif v.val:match("^nd%a?$") then -- ToDo: I18N								-- if |date=nd with or without a CITEREF disambiguator
					good_date, anchor_year, COinS_date = true, v.val:match("((nd)%a?)"); -- ToDo: I18N	-- "nd";	no error when date parameter is set to no date
				else
					good_date, anchor_year, COinS_date = check_date (v.val, k, tCOinS_date);	-- go test the date
				end
			elseif 'year' == k then												-- if the parameter is |year= it should hold only a year value
				if v.val:match("^[1-9]%d%d%d?%a?$") then						-- if |year = 3 or 4 digits only with or without a CITEREF disambiguator
					good_date, anchor_year, COinS_date = true, v.val:match("((%d+)%a?)");
				end
			elseif 'pmc-embargo-date' == k then									-- if the parameter is |pmc-embargo-date=
				good_date = check_date (v.val, k);								-- go test the date
				if true == good_date then										-- if the date is a valid date
					good_date, embargo_date = is_valid_embargo_date (v.val);	-- is |pmc-embargo-date= date a single dmy, mdy, or ymd formatted date? yes: returns embargo date; no: returns 9999
				end
			else																-- any other date-holding parameter
				good_date = check_date (v.val, k);								-- go test the date
			end
			if false == good_date then											-- assemble one error message so we don't add the tracking category multiple times
				table.insert (error_list, wrap_style ('parameter', v.name));	-- make parameter name suitable for error message list
			end
		end
	end
	return anchor_year, embargo_date;											-- and done
end


--[[--------------------------&lt; Y E A R _ D A T E _ C H E C K &gt;------------------------------------------------

Compare the value provided in |year= with the year value(s) provided in |date=.  This function sets a local numeric value:
	0 - year value does not match the year value in date
	1 - (default) year value matches the year value in date or one of the year values when date contains two years
	2 - year value matches the year value in date when date is in the form YYYY-MM-DD and year is disambiguated (|year=YYYYx)

the numeric value in &lt;result&gt; determines the 'output' if any from this function:
	0 – adds error message to error_list sequence table
	1 – adds maint cat
	2 – does nothing

]]

local function year_date_check (year_string, year_origin, date_string, date_origin, error_list)
	local year;
	local date1;
	local date2;
	local result = 1;															-- result of the test; assume that the test passes

	year = year_string:match ('(%d%d%d%d?)');

	if date_string:match ('%d%d%d%d%-%d%d%-%d%d') and year_string:match ('%d%d%d%d%a') then	--special case where both date and year are required YYYY-MM-DD and YYYYx
		date1 = date_string:match ('(%d%d%d%d)');
		year = year_string:match ('(%d%d%d%d)');
		if year ~= date1 then
			result = 0;															-- years don't match
		else
			result = 2;															-- years match; but because disambiguated, don't add to maint cat
		end
		
	elseif date_string:match ("%d%d%d%d?.-%d%d%d%d?") then						-- any of the standard range formats of date with two three- or four-digit years
		date1, date2 = date_string:match ("(%d%d%d%d?).-(%d%d%d%d?)");
		if year ~= date1 and year ~= date2 then
			result = 0;
		end

	elseif mw.ustring.match(date_string, "%d%d%d%d[%-–]%d%d") then				-- YYYY-YY date ranges
		local century;
		date1, century, date2 = mw.ustring.match(date_string, "((%d%d)%d%d)[%-–]+(%d%d)");
		date2 = century..date2;													-- convert YY to YYYY
		if year ~= date1 and year ~= date2 then
			result = 0;
		end

	elseif date_string:match ("%d%d%d%d?") then									-- any of the standard formats of date with one year
		date1 = date_string:match ("(%d%d%d%d?)");
		if year ~= date1 then
			result = 0;
		end
	else																		-- should never get here; this function called only when no other date errors
		result = 0;																-- no recognizable year in date
	end

	if 0 == result then															-- year / date mismatch
		table.insert (error_list, substitute (cfg.messages['mismatch'], {year_origin, date_origin}));	-- add error message to error_list sequence table
	elseif 1 == result then														-- redundant year / date
		set_message ('maint_date_year');										-- add a maint cat
	end
end


--[[--------------------------&lt; R E F O R M A T T E R &gt;--------------------------------------------------------

reformat 'date' into new format specified by format_param if pattern_idx (the current format of 'date') can be
reformatted.  Does the grunt work for reformat_dates().

The table re_formats maps pattern_idx (current format) and format_param (desired format) to a table that holds:
	format string used by string.format()
	identifier letters ('d', 'm', 'y', 'd2', 'm2', 'y2') that serve as indexes into a table t{} that holds captures
		from mw.ustring.match() for the various date parts specified by  patterns[pattern_idx][1]

Items in patterns{} have the general form:
	['ymd'] = {'^(%d%d%d%d)%-(%d%d)%-(%d%d)$', 'y', 'm', 'd'}, where:
		['ymd'] is pattern_idx
		patterns['ymd'][1] is the match pattern with captures for mw.ustring.match()
		patterns['ymd'][2] is an indicator letter identifying the content of the first capture
		patterns['ymd'][3] ... the second capture etc.

when a pattern matches a date, the captures are loaded into table t{} in capture order using the idemtifier
characters as indexes into t{}  For the above, a ymd date is in t{} as:
	t.y = first capture (year), t.m = second capture (month), t.d = third capture (day)

To reformat, this function is called with the pattern_idx that matches the current format of the date and with
format_param set to the desired format.  This function loads table t{} as described and then calls string.format()
with the format string specified by re_format[pattern_idx][format_param][1] using values taken from t{} according
to the capture identifier letters specified by patterns[pattern_idx][format_param][n] where n is 2..

]]

local re_formats = {
	['ymd'] = {																	-- date format is ymd; reformat to:
		['mdy'] = {'%s %s, %s', 'm', 'd', 'y'},									-- |df=mdy
		['dmy'] = {'%s %s %s', 'd', 'm', 'y'},									-- |df=dmy
	--		['yMd'] = {'%s %s %s', 'y', 'm', 'd'},								-- |df=yMd; not supported at en.wiki
		},
	['Mdy'] = {																	-- date format is Mdy; reformat to:
		['mdy'] = {'%s %s, %s', 'm', 'd', 'y'},									-- for long/short reformatting
		['dmy'] = {'%s %s %s', 'd', 'm', 'y'},									-- |df=dmy
		['ymd'] = {'%s-%s-%s', 'y', 'm', 'd'},									-- |df=ymd
	--		['yMd'] = {'%s %s %s', 'y', 'm', 'd'},								-- |df=yMd; not supported at en.wiki
		},
	['dMy'] = {																	-- date format is dMy; reformat to:
		['dmy'] = {'%s %s %s', 'd', 'm', 'y'},									-- for long/short reformatting
		['mdy'] = {'%s %s, %s', 'm', 'd', 'y'},									-- |df=mdy
		['ymd'] = {'%s-%s-%s', 'y', 'm', 'd'},									-- |df=ymd
	--		['yMd'] = {'%s %s %s', 'y', 'm', 'd'},								-- |df=yMd; not supported at en.wiki
		},
	['Md-dy'] = {																-- date format is Md-dy; reformat to:
		['mdy'] = {'%s %s–%s, %s', 'm', 'd', 'd2', 'y'},						-- for long/short reformatting
		['dmy'] = {'%s–%s %s %s', 'd', 'd2', 'm', 'y'},							-- |df=dmy -&gt; d-dMy 
		},
	['d-dMy'] = {																-- date format is d-d&gt;y; reformat to:
		['dmy'] = {'%s–%s %s %s', 'd', 'd2', 'm', 'y'},							-- for long/short reformatting
		['mdy'] = {'%s %s–%s, %s', 'm', 'd', 'd2', 'y'},						-- |df=mdy -&gt; Md-dy 
		},
	['dM-dMy'] = {																-- date format is dM-dMy; reformat to:
		['dmy'] = {'%s %s – %s %s %s', 'd', 'm', 'd2', 'm2', 'y'},				-- for long/short reformatting
		['mdy'] = {'%s %s – %s %s, %s', 'm', 'd', 'm2', 'd2', 'y'},				-- |df=mdy -&gt; Md-Mdy 
		},
	['Md-Mdy'] = {																-- date format is Md-Mdy; reformat to:
		['mdy'] = {'%s %s – %s %s, %s', 'm', 'd',  'm2', 'd2', 'y'},			-- for long/short reformatting
		['dmy'] = {'%s %s – %s %s %s', 'd', 'm', 'd2', 'm2', 'y'},				-- |df=dmy -&gt; dM-dMy 
		},
	['dMy-dMy'] = {																-- date format is dMy-dMy; reformat to:
		['dmy'] = {'%s %s %s – %s %s %s', 'd', 'm', 'y', 'd2', 'm2', 'y2'},		-- for long/short reformatting
		['mdy'] = {'%s %s, %s – %s %s, %s', 'm', 'd', 'y', 'm2', 'd2', 'y2'},	-- |df=mdy -&gt; Mdy-Mdy 
		},
	['Mdy-Mdy'] = {																-- date format is Mdy-Mdy; reformat to:
		['mdy'] = {'%s %s, %s – %s %s, %s', 'm', 'd', 'y', 'm2', 'd2', 'y2'},	-- for long/short reformatting
		['dmy'] = {'%s %s %s – %s %s %s', 'd', 'm', 'y', 'd2', 'm2', 'y2'},		-- |df=dmy -&gt; dMy-dMy 
		},
	['My-My'] = {																-- these for long/short reformatting
		['any'] = {'%s %s – %s %s', 'm', 'y', 'm2', 'y2'},						-- dmy/mdy agnostic
		},
	['M-My'] = {																-- these for long/short reformatting
		['any'] = {'%s–%s %s', 'm', 'm2', 'y'},									-- dmy/mdy agnostic
		},
	['My'] = {																	-- these for long/short reformatting
		['any'] = {'%s %s', 'm', 'y'},											-- dmy/mdy agnostic
		},
	--	['yMd'] = {																-- not supported at en.wiki
	--		['mdy'] = {'%s %s, %s', 'm', 'd', 'y'},								-- |df=mdy
	--		['dmy'] = {'%s %s %s', 'd', 'm', 'y'},								-- |df=dmy
	--		['ymd'] = {'%s-%s-%s', 'y', 'm', 'd'},								-- |df=ymd
	--		},
	}


local function reformatter (date, pattern_idx, format_param, mon_len)
	if not in_array (pattern_idx, {'ymd', 'Mdy', 'Md-dy', 'dMy', 'yMd', 'd-dMy', 'dM-dMy', 'Md-Mdy', 'dMy-dMy', 'Mdy-Mdy', 'My-My', 'M-My', 'My'}) then
		return;																	-- not in this set of date format patterns then not a reformattable date
	end
	
	if 'ymd' == format_param and in_array (pattern_idx, {'ymd', 'Md-dy', 'd-dMy', 'dM-dMy', 'Md-Mdy', 'dMy-dMy', 'Mdy-Mdy', 'My-My', 'M-My', 'My'}) then
		return;																	-- ymd date ranges not supported at en.wiki; no point in reformatting ymd to ymd
	end

	if in_array (pattern_idx, {'My', 'M-My', 'My-My'}) then						-- these are not dmy/mdy so can't be 'reformatted' into either
		format_param = 'any';													-- so format-agnostic 
	end

																				-- yMd is not supported at en.wiki; when yMd is supported at your wiki, uncomment the next line
	--	if 'yMd' == format_param and in_array (pattern_idx, {'yMd', 'Md-dy', 'd-dMy', 'dM-dMy', 'Md-Mdy', 'dMy-dMy', 'Mdy-Mdy'}) then	-- these formats not convertable; yMd not supported at en.wiki
	if 'yMd' == format_param then												-- yMd not supported at en.wiki; when yMd is supported at your wiki, remove or comment-out this line
		return;																	-- not a reformattable date
	end
	
	local c1, c2, c3, c4, c5, c6, c7;											-- these hold the captures specified in patterns[pattern_idx][1]
	c1, c2, c3, c4, c5, c6, c7 = mw.ustring.match (date, patterns[pattern_idx][1]);	-- get the captures

	local t = {																	-- table that holds k/v pairs of date parts from the captures and patterns[pattern_idx][2..]
		[patterns[pattern_idx][2]] = c1;										-- at minimum there is always one capture with a matching indicator letter
		[patterns[pattern_idx][3] or 'x'] = c2;									-- patterns can have a variable number of captures; each capture requires an indicator letter;
		[patterns[pattern_idx][4] or 'x'] = c3;									-- where there is no capture, there is no indicator letter so n in patterns[pattern_idx][n] will be nil;
		[patterns[pattern_idx][5] or 'x'] = c4;									-- the 'x' here spoofs an indicator letter to prevent 'table index is nil' error
		[patterns[pattern_idx][6] or 'x'] = c5;
		[patterns[pattern_idx][7] or 'x'] = c6;
		[patterns[pattern_idx][8] or 'x'] = c7;
		};

	if t.a then																	-- if this date has an anchor year capture (all convertable date formats except ymd)
		if t.y2 then															-- for year range date formats														
			t.y2 = t.a;															-- use the anchor year capture when reassembling the date
		else																	-- here for single date formats (except ymd)
			t.y = t.a;															-- use the anchor year capture when reassembling the date
		end
	end

	if tonumber(t.m) then														-- if raw month is a number (converting from ymd)
		if 's' == mon_len then													-- if we are to use abbreviated month names
			t.m = cfg.date_names['inv_local_short'][tonumber(t.m)];					-- convert it to a month name
		else
			t.m = cfg.date_names['inv_local_long'][tonumber(t.m)];					-- convert it to a month name
		end
		t.d = t.d:gsub ('0(%d)', '%1');											-- strip leading '0' from day if present
	elseif 'ymd' == format_param then											-- when converting to ymd
		t.y = t.y:gsub ('%a', '');												-- strip CITREF disambiguator if present; anchor year already known so process can proceed; TODO: maint message?
		if 1582 &gt; tonumber (t.y) then											-- ymd format dates not allowed before 1582
			return;
		end
		t.m = string.format ('%02d', get_month_number (t.m));					-- make sure that month and day are two digits
		t.d = string.format ('%02d', t.d);
	elseif mon_len then															-- if mon_len is set to either 'short' or 'long'
		for _, mon in ipairs ({'m', 'm2'}) do									-- because there can be two month names, check both 
			if t[mon] then
				t[mon] = get_month_number (t[mon]);								-- get the month number for this month (is length agnostic)
				if 0 == t[mon] then return; end									-- seasons and named dates can't be converted
				t[mon] = (('s' == mon_len) and cfg.date_names['inv_local_short'][t[mon]]) or cfg.date_names['inv_local_long'][t[mon]];	-- fetch month name according to length
			end
		end
	end

	local new_date = string.format (re_formats[pattern_idx][format_param][1],	-- format string
		t[re_formats[pattern_idx][format_param][2]],							-- named captures from t{}
		t[re_formats[pattern_idx][format_param][3]],
		t[re_formats[pattern_idx][format_param][4]],
		t[re_formats[pattern_idx][format_param][5]],
		t[re_formats[pattern_idx][format_param][6]],
		t[re_formats[pattern_idx][format_param][7]],
		t[re_formats[pattern_idx][format_param][8]]
		);

	return new_date;
end


--[[-------------------------&lt; R E F O R M A T _ D A T E S &gt;--------------------------------------------------

Reformats existing dates into the format specified by format.

format is one of several manual keywords: dmy, dmy-all, mdy, mdy-all, ymd, ymd-all.  The -all version includes
access- and archive-dates; otherwise these dates are not reformatted.

This function allows automatic date formatting.  In ~/Configuration, the article source is searched for one of
the {{use xxx dates}} templates.  If found, xxx becomes the global date format as xxx-all.  If |cs1-dates= in
{{use xxx dates}} has legitimate value then that value determines how cs1|2 dates will be rendered.  Legitimate
values for |cs1-dates= are:
	l - all dates are rendered with long month names
	ls - publication dates use long month names; access-/archive-dates use abbreviated month names
	ly - publication dates use long month names; access-/archive-dates rendered in ymd format
	s - all dates are rendered with abbreviated (short) month names
	sy - publication dates use abbreviated month names; access-/archive-dates rendered in ymd format
	y - all dates are rendered in ymd format

the format argument for automatic date formatting will be the format specified by {{use xxx dates}} with the
value supplied by |cs1-dates so one of: xxx-l, xxx-ls, xxx-ly, xxx-s, xxx-sy, xxx-y, or simply xxx (|cs1-dates=
empty, omitted, or invalid) where xxx shall be either of dmy or mdy.

dates are extracted from date_parameters_list, reformatted (if appropriate), and then written back into the
list in the new format.  Dates in date_parameters_list are presumed here to be valid (no errors).  This function
returns true when a date has been reformatted, false else.  Actual reformatting is done by reformatter().

]]

local function reformat_dates (date_parameters_list, format)
	local all = false;															-- set to false to skip access- and archive-dates
	local len_p = 'l';															-- default publication date length shall be long
	local len_a = 'l';															-- default access-/archive-date length shall be long
	local result = false;
	local new_date;																
	
	if format:match('%a+%-all') then											-- manual df keyword; auto df keyword when length not specified in {{use xxx dates}}; 
		format = format:match('(%a+)%-all');									-- extract the format
		all = true;																-- all dates are long format dates because this keyword doesn't specify length
	elseif format:match('%a+%-[lsy][sy]?') then									-- auto df keywords; internal only
		all = true;																-- auto df applies to all dates; use length specified by capture len_p for all dates
		format, len_p, len_a = format:match('(%a+)%-([lsy])([sy]?)');			-- extract the format and length keywords
		if 'y' == len_p then													-- because allowed by MOS:DATEUNIFY (sort of) range dates and My dates not reformatted
			format = 'ymd';														-- override {{use xxx dates}}
		elseif (not is_set(len_a)) or (len_p == len_a) then						-- no access-/archive-date length specified or same length as publication dates then
			len_a = len_p;														-- in case len_a not set
		end
	end																			-- else only publication dates and they are long

	for param_name, param_val in pairs (date_parameters_list) do				-- for each date-holding parameter in the list
		if is_set (param_val.val) then											-- if the parameter has a value
			if not (not all and in_array (param_name, {'access-date', 'archive-date'})) then	-- skip access- or archive-date unless format is xxx-all; yeah, ugly; TODO: find a better way
				for pattern_idx, pattern in pairs (patterns) do
					if mw.ustring.match (param_val.val, pattern[1]) then
						if all and in_array (param_name, {'access-date', 'archive-date'}) then	-- if this date is an access- or archive-date
							new_date = reformatter (param_val.val, pattern_idx, (('y' == len_a) and 'ymd') or format, len_a);	-- choose ymd or dmy/mdy according to len_a setting
						else													-- all other dates
							new_date = reformatter (param_val.val, pattern_idx, format, len_p);
						end
						
						if new_date then										-- set when date was reformatted
							date_parameters_list[param_name].val = new_date;	-- update date in date list
							result = true;										-- and announce that changes have been made
							break;
						end
					end	-- if
				end		-- for
			end			-- if
		end				-- if
	end					-- for
	return result;																-- declare boolean result and done
end


--[[--------------------------&lt; D A T E _ H Y P H E N _ T O _ D A S H &gt;----------------------------------------

Loops through the list of date-holding parameters and converts any hyphen to an ndash.  Not called if the cs1|2
template has any date errors.

Modifies the date_parameters_list and returns true if hyphens are replaced, else returns false.

]]

local function date_hyphen_to_dash (date_parameters_list)
	local result = false;
	local n;
	for param_name, param_val in pairs(date_parameters_list) do					-- for each date-holding parameter in the list
		if is_set (param_val.val) and
			not mw.ustring.match (param_val.val, patterns.ymd[1]) then			-- for those that are not ymd dates (ustring because here digits may not be Western)
				param_val.val, n = param_val.val:gsub ('%-', '–');				-- replace any hyphen with ndash
				if 0 ~= n then
					date_parameters_list[param_name].val = param_val.val;		-- update the list
					result = true;
				end
		end
	end
	return result;																-- so we know if any hyphens were replaced
end


--[[-------------------------&lt; D A T E _ N A M E _ X L A T E &gt;------------------------------------------------

Attempts to translate English date names to local-language date names using names supplied by MediaWiki's
date parser function.  This is simple name-for-name replacement and may not work for all languages.

if xlat_dig is true, this function will also translate Western (English) digits to the local language's digits.
This will also translate ymd dates.

]]

local function date_name_xlate (date_parameters_list, xlt_dig)
	local xlate;
	local mode;																	-- long or short month names
	local modified = false;
	local date;
	
	local sources_t = {
		{cfg.date_names.en.long, cfg.date_names.inv_local_long},				-- for translating long English month names to long local month names
		{cfg.date_names.en.short, cfg.date_names.inv_local_short},				-- short month names
		{cfg.date_names.en.quarter, cfg.date_names.inv_local_quarter},			-- quarter date names
		{cfg.date_names.en.season, cfg.date_names.inv_local_season},			-- season date nam
		{cfg.date_names.en.named, cfg.date_names.inv_local_named},				-- named dates
		}

	local function is_xlateable (month)											-- local function to get local date name that replaces existing English-language date name
		for _, date_names_t in ipairs (sources_t) do							-- for each sequence table in date_names_t
			if date_names_t[1][month] then										-- if date name is English month (long or short), quarter, season or named and
				if date_names_t[2][date_names_t[1][month]] then					-- if there is a matching local date name
					return date_names_t[2][date_names_t[1][month]];				-- return the local date name
				end
			end
		end
	end

	for param_name, param_val in pairs(date_parameters_list) do					-- for each date-holding parameter in the list
		if is_set(param_val.val) then											-- if the parameter has a value
			date = param_val.val;
			for month in mw.ustring.gmatch (date, '[%a ]+') do					-- iterate through all date names in the date (single date or date range)
				month = mw.text.trim (month);									-- this because quarterly dates contain whitespace
				xlate = is_xlateable (month);									-- get translate &lt;month&gt;; returns translation or nil
				
				if xlate then		
					date = mw.ustring.gsub (date, month, xlate);				-- replace the English with the translation
					date_parameters_list[param_name].val = date;				-- save the translated date
					modified = true;
				end
			end

			if xlt_dig then														-- shall we also translate digits?
				date = date:gsub ('%d', cfg.date_names.xlate_digits);			-- translate digits from Western to 'local digits'
				date_parameters_list[param_name].val = date;					-- save the translated date
				modified = true;
			end
		end
	end
	
	return modified;
end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local imported functions table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr, utilities_page_ptr)
	add_prop_cat = utilities_page_ptr.add_prop_cat ;							-- import functions from selected Module:Citation/CS1/Utilities module
	is_set = utilities_page_ptr.is_set;
	in_array = utilities_page_ptr.in_array;
	set_message = utilities_page_ptr.set_message;
	substitute = utilities_page_ptr.substitute;
	wrap_style = utilities_page_ptr.wrap_style;

	cfg = cfg_table_ptr;														-- import tables from selected Module:Citation/CS1/Configuration
end


--[[--------------------------&lt; A R C H I V E _ D A T E _ C H E C K &gt;------------------------------------------

Compare value in |archive-date= with the timestamp in Wayback machine urls.  Emits an error message when |archive-date=
does not match the timestamp.

]]

local function archive_date_check (archive_date, archive_url_timestamp)
	local good, archive_date_ts = pcall (lang_object.formatDate, lang_object, 'Ymd', archive_date);		-- |archive-date= value to YYYYMMDD format
--	local archive_date_ts = lang_object:formatDate ('Ymd', archive_date);		-- |archive-date= value to YYYYMMDD format

	if good then
		if not archive_url_timestamp:find (archive_date_ts, 1, true) then		-- plain text find; begin search at position 1
			set_message ('err_archive_date_url_ts_mismatch');					-- emit an error message
		end
	end
end


--[[--------------------------&lt; E X P O R T E D   F U N C T I O N S &gt;------------------------------------------
]]

return {																		-- return exported functions
	archive_date_check = archive_date_check,
	date_hyphen_to_dash = date_hyphen_to_dash,
	date_name_xlate = date_name_xlate,
	dates = dates,
	reformat_dates = reformat_dates,
	set_selected_modules = set_selected_modules,
	year_date_check = year_date_check,
	}</text>
      <sha1>h1et8hc4yy0nzlgfuigrj5tumodmw1t</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Identifiers</title>
    <ns>828</ns>
    <id>14</id>
    <revision>
      <id>18</id>
      <timestamp>2023-08-20T13:46:32Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;-------------------------------------- ]]  local has_accept_as_written, is_set, in_array, set_message, select_one,			-- functions in Module:Citation/CS1/Utilities 		substitute, make_wikilink;  local z;																		-- table of tables defined in Module:Citation/CS1/Utilities  local cfg;																		-- table of configuration tables that are defined in Module:Citation/CS1/Configuration   --[[-..."</comment>
      <origin>18</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="76658" sha1="sh0l2n4ahyihscjfw9ol31xgrbnds2a" xml:space="preserve">--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local has_accept_as_written, is_set, in_array, set_message, select_one,			-- functions in Module:Citation/CS1/Utilities
		substitute, make_wikilink;

local z;																		-- table of tables defined in Module:Citation/CS1/Utilities

local cfg;																		-- table of configuration tables that are defined in Module:Citation/CS1/Configuration


--[[--------------------------&lt; P A G E   S C O P E   V A R I A B L E S &gt;--------------------------------------

declare variables here that have page-wide scope that are not brought in from other modules; that are created here and used here

]]

local auto_link_urls = {};														-- holds identifier URLs for those identifiers that can auto-link |title=


--============================&lt;&lt; H E L P E R   F U N C T I O N S &gt;&gt;============================================

--[[--------------------------&lt; W I K I D A T A _ A R T I C L E _ N A M E _ G E T &gt;----------------------------

as an aid to internationalizing identifier-label wikilinks, gets identifier article names from Wikidata.

returns :&lt;lang code&gt;:&lt;article title&gt; when &lt;q&gt; has an &lt;article title&gt; for &lt;lang code&gt;; nil else

for identifiers that do not have q, returns nil

for wikis that do not have mw.wikibase installed, returns nil

]]

local function wikidata_article_name_get (q)
	if not is_set (q) or (q and not mw.wikibase) then							-- when no q number or when a q number but mw.wikibase not installed on this wiki
		return nil;																-- abandon
	end

	local wd_article;
	local this_wiki_code = cfg.this_wiki_code;									-- Wikipedia subdomain; 'en' for en.wikipedia.org

	wd_article = mw.wikibase.getSitelink (q, this_wiki_code .. 'wiki');			-- fetch article title from WD; nil when no title available at this wiki

	if wd_article then
		wd_article = table.concat ({':', this_wiki_code, ':', wd_article});		-- interwiki-style link without brackets if taken from WD; leading colon required
	end

	return wd_article;															-- article title from WD; nil else
end


--[[--------------------------&lt; L I N K _ L A B E L _ M A K E &gt;------------------------------------------------

common function to create identifier link label from handler table or from Wikidata

returns the first available of
	1. redirect from local wiki's handler table (if enabled)
	2. Wikidata (if there is a Wikidata entry for this identifier in the local wiki's language)
	3. label specified in the local wiki's handler table
	
]]

local function link_label_make (handler)
	local wd_article;
	
	if not (cfg.use_identifier_redirects and is_set (handler.redirect)) then	-- redirect has priority so if enabled and available don't fetch from Wikidata because expensive
		wd_article = wikidata_article_name_get (handler.q);						-- if Wikidata has an article title for this wiki, get it;
	end
	
	return (cfg.use_identifier_redirects and is_set (handler.redirect) and handler.redirect) or wd_article or handler.link;
end


--[[--------------------------&lt; E X T E R N A L _ L I N K _ I D &gt;----------------------------------------------

Formats a wiki-style external link

]]

local function external_link_id (options)
	local url_string = options.id;
	local ext_link;
	local this_wiki_code = cfg.this_wiki_code;									-- Wikipedia subdomain; 'en' for en.wikipedia.org
	local wd_article;															-- article title from Wikidata
	
	if options.encode == true or options.encode == nil then
		url_string = mw.uri.encode (url_string, 'PATH');
	end

	if options.auto_link and is_set (options.access) then
		auto_link_urls[options.auto_link] = table.concat ({options.prefix, url_string, options.suffix});
	end

	ext_link = mw.ustring.format ('[%s%s%s %s]', options.prefix, url_string, options.suffix or "", mw.text.nowiki (options.id));
	if is_set (options.access) then
		ext_link = substitute (cfg.presentation['ext-link-access-signal'], {cfg.presentation[options.access].class, cfg.presentation[options.access].title, ext_link});	-- add the free-to-read / paywall lock
	end

	return table.concat	({
		make_wikilink (link_label_make (options), options.label),				-- redirect, Wikidata link, or locally specified link (in that order)
		options.separator or '&amp;nbsp;',
		ext_link
		});
end


--[[--------------------------&lt; I N T E R N A L _ L I N K _ I D &gt;----------------------------------------------

Formats a wiki-style internal link

TODO: Does not currently need to support options.access, options.encode, auto-linking and COinS (as in external_link_id),
but may be needed in the future for :m:Interwiki_map custom-prefixes like :arxiv:, :bibcode:, :DOI:, :hdl:, :ISSN:,
:JSTOR:, :Openlibrary:, :PMID:, :RFC:.

]]

local function internal_link_id (options)
	local id = mw.ustring.gsub (options.id, '%d', cfg.date_names.local_digits);	-- translate 'local' digits to Western 0-9

	return table.concat (
		{
		make_wikilink (link_label_make (options), options.label),				-- wiki-link the identifier label
		options.separator or '&amp;nbsp;',											-- add the separator
		make_wikilink (
			table.concat (
				{
				options.prefix,
				id,																-- translated to Western digits
				options.suffix or ''
				}),
			substitute (cfg.presentation['bdi'], {'', mw.text.nowiki (options.id)})	-- bdi tags to prevent Latin script identifiers from being reversed at RTL language wikis
			);																	-- nowiki because MediaWiki still has magic links for ISBN and the like; TODO: is it really required?
		});
end


--[[--------------------------&lt; I S _ E M B A R G O E D &gt;------------------------------------------------------

Determines if a PMC identifier's online version is embargoed. Compares the date in |pmc-embargo-date= against
today's date.  If embargo date is in the future, returns the content of |pmc-embargo-date=; otherwise, returns
an empty string because the embargo has expired or because |pmc-embargo-date= was not set in this cite.

]]

local function is_embargoed (embargo)
	if is_set (embargo) then
		local lang = mw.getContentLanguage();
		local good1, embargo_date, todays_date;
		good1, embargo_date = pcall (lang.formatDate, lang, 'U', embargo);
		todays_date = lang:formatDate ('U');
	
		if good1 then															-- if embargo date is a good date
			if tonumber (embargo_date) &gt;= tonumber (todays_date) then			-- is embargo date is in the future?
				return embargo;													-- still embargoed
			else
				set_message ('maint_pmc_embargo');								-- embargo has expired; add main cat
				return '';														-- unset because embargo has expired
			end
		end
	end
	return '';																	-- |pmc-embargo-date= not set return empty string
end


--[=[-------------------------&lt; I S _ V A L I D _ R X I V _ D A T E &gt;------------------------------------------

for biorxiv, returns true if:
	2019-12-11T00:00Z &lt;= biorxiv_date &lt; today + 2 days
for medrxiv, returns true if:
	2020-01-01T00:00Z &lt;= medrxiv_date &lt; today + 2 days
	
The dated form of biorxiv identifier has a start date of 2019-12-11.  The Unix timestamp for that date is {{#time:U|2019-12-11}} = 1576022400
The medrxiv identifier has a start date of 2020-01-01.  The Unix timestamp for that date is {{#time:U|2020-01-01}} = 1577836800

&lt;rxiv_date&gt; is the date provided in those |biorxiv= parameter values that are dated and in |medrxiv= parameter values at time 00:00:00 UTC
&lt;today&gt; is the current date at time 00:00:00 UTC plus 48 hours
	if today's date is 2023-01-01T00:00:00 then
		adding 24 hours gives 2023-01-02T00:00:00 – one second more than today
		adding 24 hours gives 2023-01-03T00:00:00 – one second more than tomorrow

inputs:
	&lt;y&gt;, &lt;m&gt;, &lt;d&gt; – year, month, day parts of the date from the birxiv or medrxiv identifier
	&lt;select&gt; 'b' for biorxiv, 'm' for medrxiv; defaults to 'b'

]=]

local function is_valid_rxiv_date (y, m, d, select)
	if 0 == tonumber (m) and 12 &lt; tonumber (m) then								-- &lt;m&gt; must be a number 1–12
		return false;
	end
	if 0 == tonumber (d) and 31 &lt; tonumber (d) then								-- &lt;d&gt; must be a number 1–31; TODO: account for month length and leap yer?
		return false;
	end
	
	local rxiv_date = table.concat ({y, m, d}, '-');							-- make ymd date string
	local good1, good2;
	local rxiv_ts, tomorrow_ts;													-- to hold Unix timestamps representing the dates
	local lang_object = mw.getContentLanguage();

	good1, rxiv_ts = pcall (lang_object.formatDate, lang_object, 'U', rxiv_date);		-- convert rxiv_date value to Unix timestamp 
	good2, tomorrow_ts = pcall (lang_object.formatDate, lang_object, 'U', 'today + 2 days' );	-- today midnight + 2 days is one second more than all day tomorrow
	
	if good1 and good2 then														-- lang.formatDate() returns a timestamp in the local script which tonumber() may not understand
		rxiv_ts = tonumber (rxiv_ts) or lang_object:parseFormattedNumber (rxiv_ts);	-- convert to numbers for the comparison;
		tomorrow_ts = tonumber (tomorrow_ts) or lang_object:parseFormattedNumber (tomorrow_ts);
	else
		return false;															-- one or both failed to convert to Unix timestamp
	end

	local limit_ts = ((select and ('m' == select)) and 1577836800) or 1576022400;	-- choose the appropriate limit timesatmp

	return ((limit_ts &lt;= rxiv_ts) and (rxiv_ts &lt; tomorrow_ts))					-- limit_ts &lt;= rxiv_date &lt; tomorrow's date
end


--[[--------------------------&lt; IS _ V A L I D _ I S X N &gt;-----------------------------------------------------

ISBN-10 and ISSN validator code calculates checksum across all ISBN/ISSN digits including the check digit.
ISBN-13 is checked in isbn().

If the number is valid the result will be 0. Before calling this function, ISBN/ISSN must be checked for length
and stripped of dashes, spaces and other non-ISxN characters.

]]

local function is_valid_isxn (isxn_str, len)
	local temp = 0;
	isxn_str = { isxn_str:byte(1, len) };										-- make a table of byte values '0' → 0x30 .. '9' → 0x39, 'X' → 0x58
	len = len + 1;																-- adjust to be a loop counter
	for i, v in ipairs (isxn_str) do											-- loop through all of the bytes and calculate the checksum
		if v == string.byte ("X" ) then											-- if checkdigit is X (compares the byte value of 'X' which is 0x58)
			temp = temp + 10 * (len - i);										-- it represents 10 decimal
		else
			temp = temp + tonumber (string.char (v) )*(len-i);
		end
	end
	return temp % 11 == 0;														-- returns true if calculation result is zero
end


--[[--------------------------&lt; IS _ V A L I D _ I S X N _ 1 3 &gt;-----------------------------------------------

ISBN-13 and ISMN validator code calculates checksum across all 13 ISBN/ISMN digits including the check digit.
If the number is valid, the result will be 0. Before calling this function, ISBN-13/ISMN must be checked for length
and stripped of dashes, spaces and other non-ISxN-13 characters.

]]

local function is_valid_isxn_13 (isxn_str)
	local temp=0;
	
	isxn_str = { isxn_str:byte(1, 13) };										-- make a table of byte values '0' → 0x30 .. '9' → 0x39
	for i, v in ipairs (isxn_str) do
		temp = temp + (3 - 2*(i % 2)) * tonumber (string.char (v) );			-- multiply odd index digits by 1, even index digits by 3 and sum; includes check digit
	end
	return temp % 10 == 0;														-- sum modulo 10 is zero when ISBN-13/ISMN is correct
end


--[[--------------------------&lt; N O R M A L I Z E _ L C C N &gt;--------------------------------------------------

LCCN normalization (https://www.loc.gov/marc/lccn-namespace.html#normalization)
1. Remove all blanks.
2. If there is a forward slash (/) in the string, remove it, and remove all characters to the right of the forward slash.
3. If there is a hyphen in the string:
	a. Remove it.
	b. Inspect the substring following (to the right of) the (removed) hyphen. Then (and assuming that steps 1 and 2 have been carried out):
		1. All these characters should be digits, and there should be six or less. (not done in this function)
		2. If the length of the substring is less than 6, left-fill the substring with zeroes until the length is six.

Returns a normalized LCCN for lccn() to validate.  There is no error checking (step 3.b.1) performed in this function.

]]

local function normalize_lccn (lccn)
	lccn = lccn:gsub ("%s", "");												-- 1. strip whitespace

	if nil ~= string.find (lccn, '/') then
		lccn = lccn:match ("(.-)/");											-- 2. remove forward slash and all character to the right of it
	end

	local prefix
	local suffix
	prefix, suffix = lccn:match ("(.+)%-(.+)");									-- 3.a remove hyphen by splitting the string into prefix and suffix

	if nil ~= suffix then														-- if there was a hyphen
		suffix = string.rep("0", 6-string.len (suffix)) .. suffix;				-- 3.b.2 left fill the suffix with 0s if suffix length less than 6
		lccn = prefix..suffix;													-- reassemble the LCCN
	end
	
	return lccn;
	end


--============================&lt;&lt; I D E N T I F I E R   F U N C T I O N S &gt;&gt;====================================

--[[--------------------------&lt; A R X I V &gt;--------------------------------------------------------------------

See: https://arxiv.org/help/arxiv_identifier

format and error check arXiv identifier.  There are three valid forms of the identifier:
the first form, valid only between date codes 9107 and 0703, is:
	arXiv:&lt;archive&gt;.&lt;class&gt;/&lt;date code&gt;&lt;number&gt;&lt;version&gt;
where:
	&lt;archive&gt; is a string of alpha characters - may be hyphenated; no other punctuation
	&lt;class&gt; is a string of alpha characters - may be hyphenated; no other punctuation; not the same as |class= parameter which is not supported in this form
	&lt;date code&gt; is four digits in the form YYMM where YY is the last two digits of the four-digit year and MM is the month number January = 01
		first digit of YY for this form can only 9 and 0
	&lt;number&gt; is a three-digit number
	&lt;version&gt; is a 1 or more digit number preceded with a lowercase v; no spaces (undocumented)
	
the second form, valid from April 2007 through December 2014 is:
	arXiv:&lt;date code&gt;.&lt;number&gt;&lt;version&gt;
where:
	&lt;date code&gt; is four digits in the form YYMM where YY is the last two digits of the four-digit year and MM is the month number January = 01
	&lt;number&gt; is a four-digit number
	&lt;version&gt; is a 1 or more digit number preceded with a lowercase v; no spaces

the third form, valid from January 2015 is:
	arXiv:&lt;date code&gt;.&lt;number&gt;&lt;version&gt;
where:
	&lt;date code&gt; and &lt;version&gt; are as defined for 0704-1412
	&lt;number&gt; is a five-digit number

]]

local function arxiv (options)
	local id = options.id;
	local class = options.Class;												-- TODO: lowercase?
	local handler = options.handler;
	local year, month, version;
	local err_msg = false;														-- assume no error message
	local text;																	-- output text
	
	if id:match("^%a[%a%.%-]+/[90]%d[01]%d%d%d%d$") or id:match("^%a[%a%.%-]+/[90]%d[01]%d%d%d%dv%d+$") then	-- test for the 9107-0703 format with or without version
		year, month = id:match("^%a[%a%.%-]+/([90]%d)([01]%d)%d%d%d[v%d]*$");
		year = tonumber (year);
		month = tonumber (month);
		if ((not (90 &lt; year or 8 &gt; year)) or (1 &gt; month or 12 &lt; month)) or		-- if invalid year or invalid month
			((91 == year and 7 &gt; month) or (7 == year and 3 &lt; month)) then		-- if years ok, are starting and ending months ok?
				err_msg = true;													-- flag for error message
		end

	elseif id:match("^%d%d[01]%d%.%d%d%d%d$") or id:match("^%d%d[01]%d%.%d%d%d%dv%d+$") then	-- test for the 0704-1412 with or without version
		year, month = id:match("^(%d%d)([01]%d)%.%d%d%d%d[v%d]*$");
		year = tonumber (year);
		month = tonumber (month);
		if ((7 &gt; year) or (14 &lt; year) or (1 &gt; month or 12 &lt; month)) or			-- is year invalid or is month invalid? (doesn't test for future years)
			((7 == year) and (4 &gt; month)) then									-- when year is 07, is month invalid (before April)?
				err_msg = true;													-- flag for error message
		end

	elseif id:match("^%d%d[01]%d%.%d%d%d%d%d$") or id:match("^%d%d[01]%d%.%d%d%d%d%dv%d+$") then	-- test for the 1501- format with or without version
		year, month = id:match("^(%d%d)([01]%d)%.%d%d%d%d%d[v%d]*$");
		year = tonumber (year);
		month = tonumber (month);
		if ((15 &gt; year) or (1 &gt; month or 12 &lt; month)) then						-- is year invalid or is month invalid? (doesn't test for future years)
			err_msg = true;														-- flag for error message
		end

	else
		err_msg = true;															-- not a recognized format; flag for error message
	end

	if err_msg then
		options.coins_list_t['ARXIV'] = nil;									-- when error, unset so not included in COinS
	end
	
	local err_msg_t = {};
	if err_msg then
		set_message ('err_bad_arxiv');
	end

	text = external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
			prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode, access = handler.access});

	if is_set (class) then
		if id:match ('^%d+') then
			text = table.concat ({text, ' [[https://arxiv.org/archive/', class, ' ', class, ']]'});	-- external link within square brackets, not wikilink
		else
			set_message ('err_class_ignored');
		end
	end

	return text;
end


--[[--------------------------&lt; B I B C O D E &gt;--------------------------------------------------------------------

Validates (sort of) and formats a bibcode ID.

Format for bibcodes is specified here: https://adsabs.harvard.edu/abs_doc/help_pages/data.html#bibcodes

But, this: 2015arXiv151206696F is apparently valid so apparently, the only things that really matter are length, 19 characters
and first four digits must be a year.  This function makes these tests:
	length must be 19 characters
	characters in position
		1–4 must be digits and must represent a year in the range of 1000 – next year
		5 must be a letter
		6–8 must be letter, digit, ampersand, or dot (ampersand cannot directly precede a dot; &amp;. )
		9–18 must be letter, digit, or dot
		19 must be a letter or dot

]]

local function bibcode (options)
	local id = options.id;
	local access = options.access;
	local handler = options.handler;
	local ignore_invalid = options.accept;
	local err_type;
	local err_msg = '';
	local year;

	local text = external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
		prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode,
		access = access});
	
	if 19 ~= id:len() then
		err_type = cfg.err_msg_supl.length;
	else
		year = id:match ("^(%d%d%d%d)[%a][%w&amp;%.][%w&amp;%.][%w&amp;%.][%w.]+[%a%.]$");
		if not year then														-- if nil then no pattern match
			err_type = cfg.err_msg_supl.value;									-- so value error
		else
			local next_year = tonumber (os.date ('%Y')) + 1;					-- get the current year as a number and add one for next year
			year = tonumber (year);												-- convert year portion of bibcode to a number
			if (1000 &gt; year) or (year &gt; next_year) then
				err_type = cfg.err_msg_supl.year;								-- year out of bounds
			end
			if id:find('&amp;%.') then
				err_type = cfg.err_msg_supl.journal;							-- journal abbreviation must not have '&amp;.' (if it does it's missing a letter)
			end
			if id:match ('.........%.tmp%.') then								-- temporary bibcodes when positions 10–14 are '.tmp.'
				set_message ('maint_bibcode');
			end
		end
	end

	if is_set (err_type) and not ignore_invalid then							-- if there was an error detected and accept-as-written markup not used
		set_message ('err_bad_bibcode', {err_type});
		options.coins_list_t['BIBCODE'] = nil;									-- when error, unset so not included in COinS
	end

	return text;
end


--[[--------------------------&lt; B I O R X I V &gt;-----------------------------------------------------------------

Format bioRxiv ID and do simple error checking.  Before 2019-12-11, biorXiv IDs were 10.1101/ followed by exactly
6 digits.  After 2019-12-11, biorXiv IDs retained the six-digit identifier but prefixed that with a yyyy.mm.dd. 
date and suffixed with an optional version identifier.

The bioRxiv ID is the string of characters:
	https://doi.org/10.1101/078733 -&gt; 10.1101/078733
or a date followed by a six-digit number followed by an optional version indicator 'v' and one or more digits:
	https://www.biorxiv.org/content/10.1101/2019.12.11.123456v2 -&gt; 10.1101/2019.12.11.123456v2
	
see https://www.biorxiv.org/about-biorxiv

]]

local function biorxiv (options)
	local id = options.id;
	local handler = options.handler;
	local err_msg = true;														-- flag; assume that there will be an error
	
	local patterns = {
		'^10%.1101/%d%d%d%d%d%d$',												-- simple 6-digit identifier (before 2019-12-11)
		'^10%.1101/(20%d%d)%.(%d%d)%.(%d%d)%.%d%d%d%d%d%dv%d+$',				-- y.m.d. date + 6-digit identifier + version (after 2019-12-11)
		'^10%.1101/(20%d%d)%.(%d%d)%.(%d%d)%.%d%d%d%d%d%d$',					-- y.m.d. date + 6-digit identifier (after 2019-12-11)
		}
	
	for _, pattern in ipairs (patterns) do										-- spin through the patterns looking for a match
		if id:match (pattern) then
			local y, m, d = id:match (pattern);									-- found a match, attempt to get year, month and date from the identifier

			if m then															-- m is nil when id is the six-digit form
				if not is_valid_rxiv_date (y, m, d, 'b') then					-- validate the encoded date; 'b' for biorxiv limit
					break;														-- date fail; break out early so we don't unset the error message
				end
			end
			err_msg = nil;														-- we found a match so unset the error message
			break;																-- and done
		end
	end																			-- err_cat remains set here when no match

	if err_msg then
		options.coins_list_t['BIORXIV'] = nil;									-- when error, unset so not included in COinS
		set_message ('err_bad_biorxiv');										-- and set the error message
	end
	
	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
			prefix = handler.prefix, id = id, separator = handler.separator,
			encode = handler.encode, access = handler.access});
end


--[[--------------------------&lt; C I T E S E E R X &gt;------------------------------------------------------------

CiteSeerX use their own notion of "doi" (not to be confused with the identifiers resolved via doi.org).

The description of the structure of this identifier can be found at Help_talk:Citation_Style_1/Archive_26#CiteSeerX_id_structure

]]

local function citeseerx (options)
	local id = options.id;
	local handler = options.handler;
	local matched;

	local text = external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
		prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode,
		access = handler.access});
	
	matched = id:match ("^10%.1%.1%.[1-9]%d?%d?%d?%.[1-9]%d?%d?%d?$");
	if not matched then
		set_message ('err_bad_citeseerx' );
		options.coins_list_t['CITESEERX'] = nil;								-- when error, unset so not included in COinS
	end

	return text;
end


--[[--------------------------&lt; D O I &gt;------------------------------------------------------------------------

Formats a DOI and checks for DOI errors.

DOI names contain two parts: prefix and suffix separated by a forward slash.
	Prefix: directory indicator '10.' followed by a registrant code
	Suffix: character string of any length chosen by the registrant

This function checks a DOI name for: prefix/suffix.  If the DOI name contains spaces or endashes, or, if it ends
with a period or a comma, this function will emit a bad_doi error message.

DOI names are case-insensitive and can incorporate any printable Unicode characters so the test for spaces, endash,
and terminal punctuation may not be technically correct but it appears, that in practice these characters are rarely
if ever used in DOI names.

https://www.doi.org/doi_handbook/2_Numbering.html				-- 2.2 Syntax of a DOI name
https://www.doi.org/doi_handbook/2_Numbering.html#2.2.2			-- 2.2.2 DOI prefix

]]

local function doi (options)
	local id = options.id;
	local inactive = options.DoiBroken
	local access = options.access;
	local ignore_invalid = options.accept;
	local handler = options.handler;
	local err_flag;

	local text;
	if is_set (inactive) then
		local inactive_year = inactive:match("%d%d%d%d");						-- try to get the year portion from the inactive date
		local inactive_month, good;

		if is_set (inactive_year) then
			if 4 &lt; inactive:len() then											-- inactive date has more than just a year (could be anything)
				local lang_obj = mw.getContentLanguage();						-- get a language object for this wiki
				good, inactive_month = pcall (lang_obj.formatDate, lang_obj, 'F', inactive);	-- try to get the month name from the inactive date
				if not good then
					inactive_month = nil;										-- something went wrong so make sure this is unset
				end
			end
		end																		-- otherwise, |doi-broken-date= has something but it isn't a date
		
		if is_set (inactive_year) and is_set (inactive_month) then
			set_message ('maint_doi_inactive_dated', {inactive_year, inactive_month, ' '});
		elseif is_set (inactive_year) then
			set_message ('maint_doi_inactive_dated', {inactive_year, '', ''});
		else
			set_message ('maint_doi_inactive');
		end
		inactive = " (" .. cfg.messages['inactive'] .. ' ' .. inactive .. ')';
	end

	local registrant = mw.ustring.match (id, '^10%.([^/]+)/[^%s–]-[^%.,]$');	-- registrant set when DOI has the proper basic form

	local registrant_err_patterns = {											-- these patterns are for code ranges that are not supported 
		'^[^1-3]%d%d%d%d%.%d+$',												-- 5 digits with subcode (0xxxx, 40000+); accepts: 10000–39999
		'^[^1-6]%d%d%d%d$',														-- 5 digits without subcode (0xxxx, 60000+); accepts: 10000–69999
		'^[^1-9]%d%d%d%.%d+$',												-- 4 digits with subcode (0xxx); accepts: 1000–9999
		'^[^1-9]%d%d%d$',														-- 4 digits without subcode (0xxx); accepts: 1000–9999
		'^%d%d%d%d%d%d+',														-- 6 or more digits
		'^%d%d?%d?$',															-- less than 4 digits without subcode (3 digits with subcode is legitimate)
		'^%d%d?%.[%d%.]+',														-- 1 or 2 digits with subcode
		'^5555$',																-- test registrant will never resolve
		'[^%d%.]',																-- any character that isn't a digit or a dot
		}

	if not ignore_invalid then
		if registrant then														-- when DOI has proper form
			for i, pattern in ipairs (registrant_err_patterns) do				-- spin through error patterns
				if registrant:match (pattern) then								-- to validate registrant codes
					err_flag = set_message ('err_bad_doi');						-- when found, mark this DOI as bad
					break;														-- and done
				end
			end
		else
			err_flag = set_message ('err_bad_doi');								-- invalid directory or malformed
		end
	else
		set_message ('maint_doi_ignore');
	end

	if err_flag then
		options.coins_list_t['DOI'] = nil;										-- when error, unset so not included in COinS
	end
	
	text = external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
		prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode, access = access,
		auto_link = not (err_flag or is_set (inactive) or ignore_invalid) and 'doi' or nil -- do not auto-link when |doi-broken-date= has a value or when there is a DOI error or (to play it safe, after all, auto-linking is not essential) when invalid DOIs are ignored
		}) .. (inactive or '');

	return text;
end


--[[--------------------------&lt; H D L &gt;------------------------------------------------------------------------

Formats an HDL with minor error checking.

HDL names contain two parts: prefix and suffix separated by a forward slash.
	Prefix: character string using any character in the UCS-2 character set except '/'
	Suffix: character string of any length using any character in the UCS-2 character set chosen by the registrant

This function checks a HDL name for: prefix/suffix.  If the HDL name contains spaces, endashes, or, if it ends
with a period or a comma, this function will emit a bad_hdl error message.

HDL names are case-insensitive and can incorporate any printable Unicode characters so the test for endashes and
terminal punctuation may not be technically correct but it appears, that in practice these characters are rarely
if ever used in HDLs.

Query string parameters are named here: https://www.handle.net/proxy_servlet.html.  query strings are not displayed
but since '?' is an allowed character in an HDL, '?' followed by one of the query parameters is the only way we
have to detect the query string so that it isn't URL-encoded with the rest of the identifier.

]]

local function hdl (options)
	local id = options.id;
	local access = options.access;
	local handler = options.handler;
	local query_params = {														-- list of known query parameters from https://www.handle.net/proxy_servlet.html
		'noredirect',
		'ignore_aliases',
		'auth',
		'cert',
		'index',
		'type',
		'urlappend',
		'locatt',
		'action',
		}
	
	local hdl, suffix, param = id:match ('(.-)(%?(%a+).+)$');					-- look for query string
	local found;

	if hdl then																	-- when there are query strings, this is the handle identifier portion
		for _, q in ipairs (query_params) do									-- spin through the list of query parameters
			if param:match ('^' .. q) then										-- if the query string begins with one of the parameters
				found = true;													-- announce a find
				break;															-- and stop looking
			end
		end
	end

	if found then
		id = hdl;																-- found so replace id with the handle portion; this will be URL-encoded, suffix will not
	else
		suffix = '';															-- make sure suffix is empty string for concatenation else
	end

	local text = external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
			prefix = handler.prefix, id = id, suffix = suffix, separator = handler.separator, encode = handler.encode, access = access})

	if nil == id:match("^[^%s–]-/[^%s–]-[^%.,]$") then							-- HDL must contain a forward slash, must not contain spaces, endashes, and must not end with period or comma
		set_message ('err_bad_hdl' );
		options.coins_list_t['HDL'] = nil;										-- when error, unset so not included in COinS
	end

	return text;
end


--[[--------------------------&lt; I S B N &gt;----------------------------------------------------------------------

Determines whether an ISBN string is valid

]]

local function isbn (options)
	local isbn_str = options.id;
	local ignore_invalid = options.accept;
	local handler = options.handler;

	local function return_result (check, err_type)								-- local function to handle the various returns
		local ISBN = internal_link_id ({link = handler.link, label = handler.label, redirect = handler.redirect,
						prefix = handler.prefix, id = isbn_str, separator = handler.separator});
		if ignore_invalid then													-- if ignoring ISBN errors
			set_message ('maint_isbn_ignore');									-- add a maint category even when there is no error
		else																	-- here when not ignoring
			if not check then													-- and there is an error
				options.coins_list_t['ISBN'] = nil;								-- when error, unset so not included in COinS
				set_message ('err_bad_isbn', err_type);							-- set an error message
				return ISBN;										 			-- return id text
			end
		end
		return ISBN;															-- return id text
	end

	if nil ~= isbn_str:match ('[^%s-0-9X]') then
		return return_result (false, cfg.err_msg_supl.char);					-- fail if isbn_str contains anything but digits, hyphens, or the uppercase X
	end

	local id = isbn_str:gsub ('[%s-]', '');										-- remove hyphens and whitespace

	local len = id:len();
 
	if len ~= 10 and len ~= 13 then
		return return_result (false, cfg.err_msg_supl.length);					-- fail if incorrect length
	end

	if len == 10 then
		if id:match ('^%d*X?$') == nil then										-- fail if isbn_str has 'X' anywhere but last position
			return return_result (false, cfg.err_msg_supl.form);									
		end
		if not is_valid_isxn (id, 10) then										-- test isbn-10 for numerical validity
			return return_result (false, cfg.err_msg_supl.check);				-- fail if isbn-10 is not numerically valid
		end
		if id:find ('^63[01]') then												-- 630xxxxxxx and 631xxxxxxx are (apparently) not valid isbn group ids but are used by amazon as numeric identifiers (asin)
			return return_result (false, cfg.err_msg_supl.group);				-- fail if isbn-10 begins with 630/1
		end
		return return_result (true, cfg.err_msg_supl.check);					-- pass if isbn-10 is numerically valid
	else
		if id:match ('^%d+$') == nil then
			return return_result (false, cfg.err_msg_supl.char);				-- fail if ISBN-13 is not all digits
		end
		if id:match ('^97[89]%d*$') == nil then
			return return_result (false, cfg.err_msg_supl.prefix);				-- fail when ISBN-13 does not begin with 978 or 979
		end
		if id:match ('^9790') then
			return return_result (false, cfg.err_msg_supl.group);				-- group identifier '0' is reserved to ISMN
		end
		return return_result (is_valid_isxn_13 (id), cfg.err_msg_supl.check);
	end
end


--[[--------------------------&lt; A S I N &gt;----------------------------------------------------------------------

Formats a link to Amazon.  Do simple error checking: ASIN must be mix of 10 numeric or uppercase alpha
characters.  If a mix, first character must be uppercase alpha; if all numeric, ASINs must be 10-digit
ISBN. If 10-digit ISBN, add a maintenance category so a bot or AWB script can replace |asin= with |isbn=.
Error message if not 10 characters, if not ISBN-10, if mixed and first character is a digit.

|asin=630....... and |asin=631....... are (apparently) not a legitimate ISBN though it checksums as one; these
do not cause this function to emit the maint_asin message

This function is positioned here because it calls isbn()

]]

local function asin (options)
	local id = options.id;
	local domain = options.ASINTLD;
	
	local err_flag;

	if not id:match("^[%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u]$") then
		err_flag = set_message ('err_bad_asin');								-- ASIN is not a mix of 10 uppercase alpha and numeric characters
	else
		if id:match("^%d%d%d%d%d%d%d%d%d[%dX]$") then							-- if 10-digit numeric (or 9 digits with terminal X)
			if is_valid_isxn (id, 10) then										-- see if ASIN value is or validates as ISBN-10
				if not id:find ('^63[01]') then									-- 630xxxxxxx and 631xxxxxxx are (apparently) not a valid isbn prefixes but are used by amazon as a numeric identifier
					err_flag = set_message ('err_bad_asin');					-- ASIN has ISBN-10 form but begins with something other than 630/1 so probably an isbn 
				end
			elseif not is_set (err_flag) then
				err_flag = set_message ('err_bad_asin');						-- ASIN is not ISBN-10
			end
		elseif not id:match("^%u[%d%u]+$") then
			err_flag = set_message ('err_bad_asin');							-- asin doesn't begin with uppercase alpha
		end
	end
	if (not is_set (domain)) or in_array (domain, {'us'}) then					-- default: United States
		domain = "com";
	elseif in_array (domain, {'jp', 'uk'}) then									-- Japan, United Kingdom
		domain = "co." .. domain;
	elseif in_array (domain, {'z.cn'}) then 									-- China
		domain = "cn";
	elseif in_array (domain, {'au', 'br', 'mx', 'sg', 'tr'}) then				-- Australia, Brazil, Mexico, Singapore, Turkey
		domain = "com." .. domain;
	elseif not in_array (domain, {'ae', 'ca', 'cn', 'de', 'es', 'fr', 'in', 'it', 'nl', 'pl', 'sa', 'se', 'co.jp', 'co.uk', 'com', 'com.au', 'com.br', 'com.mx', 'com.sg', 'com.tr'}) then -- Arabic Emirates, Canada, China, Germany, Spain, France, Indonesia, Italy, Netherlands, Poland, Saudi Arabia, Sweden (as of 2021-03 Austria (.at), Liechtenstein (.li) and Switzerland (.ch) still redirect to the German site (.de) with special settings, so don't maintain local ASINs for them)
		err_flag = set_message ('err_bad_asin_tld');							-- unsupported asin-tld value
	end
	local handler = options.handler;

	if not is_set (err_flag) then
		options.coins_list_t['ASIN'] = handler.prefix .. domain .. "/dp/" .. id;	-- asin for coins
	else
		options.coins_list_t['ASIN'] = nil;										-- when error, unset so not included in COinS
	end
	
	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
		prefix = handler.prefix .. domain .. "/dp/",
		id = id, encode = handler.encode, separator = handler.separator})
end


--[[--------------------------&lt; I S M N &gt;----------------------------------------------------------------------

Determines whether an ISMN string is valid.  Similar to ISBN-13, ISMN is 13 digits beginning 979-0-... and uses the
same check digit calculations.  See https://www.ismn-international.org/download/Web_ISMN_Users_Manual_2008-6.pdf
section 2, pages 9–12.

ismn value not made part of COinS metadata because we don't have a url or isn't a COinS-defined identifier (rft.xxx)
or an identifier registered at info-uri.info (info:)

]]

local function ismn (options)
	local id = options.id;
	local handler = options.handler;
	local text;
	local valid_ismn = true;
	local id_copy;

	id_copy = id;																-- save a copy because this testing is destructive
	id = id:gsub ('[%s-]', '');													-- remove hyphens and white space

	if 13 ~= id:len() or id:match ("^9790%d*$" ) == nil then					-- ISMN must be 13 digits and begin with 9790
		valid_ismn = false;
	else
		valid_ismn=is_valid_isxn_13 (id);										-- validate ISMN
	end

	--	text = internal_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,		-- use this (or external version) when there is some place to link to
	--		prefix = handler.prefix, id = id_copy, separator = handler.separator, encode = handler.encode})

	text = table.concat (														-- because no place to link to yet
		{
		make_wikilink (link_label_make (handler), handler.label),
		handler.separator,
		id_copy
		});

	if false == valid_ismn then
		options.coins_list_t['ISMN'] = nil;										-- when error, unset so not included in COinS; not really necessary here because ismn not made part of COinS
		set_message ('err_bad_ismn');											-- create an error message if the ISMN is invalid
	end 
	
	return text;
end


--[[--------------------------&lt; I S S N &gt;----------------------------------------------------------------------

Validate and format an ISSN.  This code fixes the case where an editor has included an ISSN in the citation but
has separated the two groups of four digits with a space.  When that condition occurred, the resulting link looked
like this:

	|issn=0819 4327 gives: [https://www.worldcat.org/issn/0819 4327 0819 4327]	-- can't have spaces in an external link
	
This code now prevents that by inserting a hyphen at the ISSN midpoint.  It also validates the ISSN for length
and makes sure that the checkdigit agrees with the calculated value.  Incorrect length (8 digits), characters
other than 0-9 and X, or checkdigit / calculated value mismatch will all cause a check ISSN error message.  The
ISSN is always displayed with a hyphen, even if the ISSN was given as a single group of 8 digits.

]]

local function issn (options)
	local id = options.id;
	local handler = options.handler;
	local ignore_invalid = options.accept;

	local issn_copy = id;														-- save a copy of unadulterated ISSN; use this version for display if ISSN does not validate
	local text;
	local valid_issn = true;

	id = id:gsub ('[%s-]', '');													-- remove hyphens and whitespace

	if 8 ~= id:len() or nil == id:match ("^%d*X?$" ) then						-- validate the ISSN: 8 digits long, containing only 0-9 or X in the last position
		valid_issn = false;														-- wrong length or improper character
	else
		valid_issn = is_valid_isxn (id, 8);										-- validate ISSN
	end

	if true == valid_issn then
		id = string.sub (id, 1, 4 ) .. "-" .. string.sub (id, 5 );				-- if valid, display correctly formatted version
	else
		id = issn_copy;															-- if not valid, show the invalid ISSN with error message
	end

	text = external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
		prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode})

	if ignore_invalid then
		set_message ('maint_issn_ignore');
	else
		if false == valid_issn then
			options.coins_list_t['ISSN'] = nil;									-- when error, unset so not included in COinS
			set_message ('err_bad_issn', (options.hkey == 'EISSN') and 'e' or '');	-- create an error message if the ISSN is invalid
		end 
	end
	
	return text;
end


--[[--------------------------&lt; J F M &gt;-----------------------------------------------------------------------

A numerical identifier in the form nn.nnnn.nn

]]

local function jfm (options)
	local id = options.id;
	local handler = options.handler;
	local id_num;

	id_num = id:match ('^[Jj][Ff][Mm](.*)$');									-- identifier with jfm prefix; extract identifier

	if is_set (id_num) then
		set_message ('maint_jfm_format');
	else																		-- plain number without JFM prefix
		id_num = id;															-- if here id does not have prefix
	end

	if id_num and id_num:match('^%d%d%.%d%d%d%d%.%d%d$') then
		id = id_num;															-- jfm matches pattern
	else
		set_message ('err_bad_jfm' );											-- set an error message
		options.coins_list_t['JFM'] = nil;										-- when error, unset so not included in COinS
	end
	
	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
			prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode});
end


--[[--------------------------&lt; J S T O R &gt;--------------------------------------------------------------------

Format a JSTOR with some error checking

]]

local function jstor (options)
	local id = options.id;
	local access = options.access;
	local handler = options.handler;

	if id:find ('[Jj][Ss][Tt][Oo][Rr]') or id:find ('^https?://') or id:find ('%s') then
		set_message ('err_bad_jstor');											-- set an error message
		options.coins_list_t['JSTOR'] = nil;									-- when error, unset so not included in COinS
	end
	
	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
		prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode, access = access});
end


--[[--------------------------&lt; L C C N &gt;----------------------------------------------------------------------

Format LCCN link and do simple error checking.  LCCN is a character string 8-12 characters long. The length of
the LCCN dictates the character type of the first 1-3 characters; the rightmost eight are always digits.
https://oclc-research.github.io/infoURI-Frozen/info-uri.info/info:lccn/reg.html

length = 8 then all digits
length = 9 then lccn[1] is lowercase alpha
length = 10 then lccn[1] and lccn[2] are both lowercase alpha or both digits
length = 11 then lccn[1] is lower case alpha, lccn[2] and lccn[3] are both lowercase alpha or both digits
length = 12 then lccn[1] and lccn[2] are both lowercase alpha

]]

local function lccn (options)
	local lccn = options.id;
	local handler = options.handler;
	local err_flag;																-- presume that LCCN is valid
	local id = lccn;															-- local copy of the LCCN

	id = normalize_lccn (id);													-- get canonical form (no whitespace, hyphens, forward slashes)
	local len = id:len();														-- get the length of the LCCN

	if 8 == len then
		if id:match("[^%d]") then												-- if LCCN has anything but digits (nil if only digits)
			err_flag = set_message ('err_bad_lccn');							-- set an error message
		end
	elseif 9 == len then														-- LCCN should be adddddddd
		if nil == id:match("%l%d%d%d%d%d%d%d%d") then							-- does it match our pattern?
			err_flag = set_message ('err_bad_lccn');							-- set an error message
		end
	elseif 10 == len then														-- LCCN should be aadddddddd or dddddddddd
		if id:match("[^%d]") then												-- if LCCN has anything but digits (nil if only digits) ...
			if nil == id:match("^%l%l%d%d%d%d%d%d%d%d") then					-- ... see if it matches our pattern
				err_flag = set_message ('err_bad_lccn');						-- no match, set an error message
			end
		end
	elseif 11 == len then														-- LCCN should be aaadddddddd or adddddddddd
		if not (id:match("^%l%l%l%d%d%d%d%d%d%d%d") or id:match("^%l%d%d%d%d%d%d%d%d%d%d")) then	-- see if it matches one of our patterns
			err_flag = set_message ('err_bad_lccn');							-- no match, set an error message
		end
	elseif 12 == len then														-- LCCN should be aadddddddddd
		if not id:match("^%l%l%d%d%d%d%d%d%d%d%d%d") then						-- see if it matches our pattern
			err_flag = set_message ('err_bad_lccn');							-- no match, set an error message
		end
	else
		err_flag = set_message ('err_bad_lccn');								-- wrong length, set an error message
	end

	if not is_set (err_flag) and nil ~= lccn:find ('%s') then
		err_flag = set_message ('err_bad_lccn');								-- lccn contains a space, set an error message
	end

	if is_set (err_flag) then
		options.coins_list_t['LCCN'] = nil;										-- when error, unset so not included in COinS
	end

	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
			prefix = handler.prefix, id = lccn, separator = handler.separator, encode = handler.encode});
end


--[[--------------------------&lt; M E D R X I V &gt;-----------------------------------------------------------------

Format medRxiv ID and do simple error checking.  Similar to later bioRxiv IDs, medRxiv IDs are prefixed with a
yyyy.mm.dd. date and suffixed with an optional version identifier.  Ealiest date accepted is 2020.01.01

The medRxiv ID is a date followed by an eight-digit number followed by an optional version indicator 'v' and one or more digits:
	https://www.medrxiv.org/content/10.1101/2020.11.16.20232009v2 -&gt; 10.1101/2020.11.16.20232009v2

]]

local function medrxiv (options)
	local id = options.id;
	local handler = options.handler;
	local err_msg_flag = true;													-- flag; assume that there will be an error

	local patterns = {
		'%d%d%d%d%d%d%d%d$',													-- simple 8-digit identifier; these should be relatively rare
		'^10%.1101/(20%d%d)%.(%d%d)%.(%d%d)%.%d%d%d%d%d%d%d%dv%d+$',			-- y.m.d. date + 8-digit identifier + version (2020-01-01 and later)
		'^10%.1101/(20%d%d)%.(%d%d)%.(%d%d)%.%d%d%d%d%d%d%d%d$',				-- y.m.d. date + 8-digit identifier (2020-01-01 and later)
		}
	
	for _, pattern in ipairs (patterns) do										-- spin through the patterns looking for a match
		if id:match (pattern) then
			local y, m, d = id:match (pattern);									-- found a match, attempt to get year, month and date from the identifier

			if m then															-- m is nil when id is the 8-digit form
				if not is_valid_rxiv_date (y, m, d, 'b') then					-- validate the encoded date; 'b' for medrxiv limit
					break;														-- date fail; break out early so we don't unset the error message
				end
			end
			err_msg_flag = nil;													-- we found a match so unset the error message
			break;																-- and done
		end
	end																			-- &lt;err_msg_flag&gt; remains set here when no match

	if err_msg_flag then
		options.coins_list_t['MEDRXIV'] = nil;									-- when error, unset so not included in COinS
		set_message ('err_bad_medrxiv');										-- and set the error message
	end
	
	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
			prefix = handler.prefix, id = id, separator = handler.separator,
			encode = handler.encode, access = handler.access});
end


--[[--------------------------&lt; M R &gt;--------------------------------------------------------------------------

A seven digit number; if not seven digits, zero-fill leading digits to make seven digits.

]]

local function mr (options)
	local id = options.id;
	local handler = options.handler;
	local id_num;
	local id_len;

	id_num = id:match ('^[Mm][Rr](%d+)$');										-- identifier with mr prefix

	if is_set (id_num) then
		set_message ('maint_mr_format');										-- add maint cat
	else																		-- plain number without mr prefix
		id_num = id:match ('^%d+$');											-- if here id is all digits
	end

	id_len = id_num and id_num:len() or 0;
	if (7 &gt;= id_len) and (0 ~= id_len) then
		id = string.rep ('0', 7-id_len) .. id_num;								-- zero-fill leading digits
	else
		set_message ('err_bad_mr');												-- set an error message
		options.coins_list_t['MR'] = nil;										-- when error, unset so not included in COinS
	end
	
	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
			prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode});
end


--[[--------------------------&lt; O C L C &gt;----------------------------------------------------------------------

Validate and format an OCLC ID.  https://www.oclc.org/batchload/controlnumber.en.html {{dead link}}
archived at: https://web.archive.org/web/20161228233804/https://www.oclc.org/batchload/controlnumber.en.html

]]

local function oclc (options)
	local id = options.id;
	local handler = options.handler;
	local number;

	if id:match('^ocm%d%d%d%d%d%d%d%d$') then									-- ocm prefix and 8 digits; 001 field (12 characters)
		number = id:match('ocm(%d+)');											-- get the number
	elseif id:match('^ocn%d%d%d%d%d%d%d%d%d$') then								-- ocn prefix and 9 digits; 001 field (12 characters)
		number = id:match('ocn(%d+)');											-- get the number
	elseif id:match('^on%d%d%d%d%d%d%d%d%d%d+$') then							-- on prefix and 10 or more digits; 001 field (12 characters)
		number = id:match('^on(%d%d%d%d%d%d%d%d%d%d+)$');						-- get the number
	elseif id:match('^%(OCoLC%)[1-9]%d*$') then									-- (OCoLC) prefix and variable number digits; no leading zeros; 035 field
		number = id:match('%(OCoLC%)([1-9]%d*)');								-- get the number
		if 9 &lt; number:len() then
			number = nil;														-- constrain to 1 to 9 digits; change this when OCLC issues 10-digit numbers
		end
	elseif id:match('^%d+$') then												-- no prefix
		number = id;															-- get the number
		if 10 &lt; number:len() then
			number = nil;														-- constrain to 1 to 10 digits; change this when OCLC issues 11-digit numbers
		end
	end

	if number then																-- proper format
		id = number;															-- exclude prefix, if any, from external link
	else
		set_message ('err_bad_oclc')											-- add an error message if the id is malformed
		options.coins_list_t['OCLC'] = nil;										-- when error, unset so not included in COinS
	end
	
	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
		prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode});
end


--[[--------------------------&lt; O P E N L I B R A R Y &gt;--------------------------------------------------------

Formats an OpenLibrary link, and checks for associated errors.

]]

local function openlibrary (options)
	local id = options.id;
	local access = options.access;
	local handler = options.handler;
	local ident, code = id:gsub('^OL', ''):match("^(%d+([AMW]))$");				-- strip optional OL prefix followed immediately by digits followed by 'A', 'M', or 'W';
	local err_flag;
	local prefix = {															-- these are appended to the handler.prefix according to code
		['A']='authors/OL',
		['M']='books/OL',
		['W']='works/OL',
		['X']='OL'																-- not a code; spoof when 'code' in id is invalid
		};

	if not ident then
		code = 'X';																-- no code or id completely invalid
		ident = id;																-- copy id to ident so that we display the flawed identifier
		err_flag = set_message ('err_bad_ol');
	end

	if not is_set (err_flag) then
		options.coins_list_t['OL'] = handler.prefix .. prefix[code] .. ident;	-- experiment for ol coins
	else
		options.coins_list_t['OL'] = nil;										-- when error, unset so not included in COinS
	end

	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
		prefix = handler.prefix .. prefix[code],
		id = ident, separator = handler.separator, encode = handler.encode,
		access = access});
end


--[[--------------------------&lt; O S T I &gt;----------------------------------------------------------------------

Format OSTI and do simple error checking. OSTIs are sequential numbers beginning at 1 and counting up.  This
code checks the OSTI to see that it contains only digits and is less than test_limit specified in the configuration;
the value in test_limit will need to be updated periodically as more OSTIs are issued.

NB. 1018 is the lowest OSTI number found in the wild (so far) and resolving OK on the OSTI site

]]

local function osti (options)
	local id = options.id;
	local access = options.access;
	local handler = options.handler;

	if id:match("[^%d]") then													-- if OSTI has anything but digits
		set_message ('err_bad_osti');											-- set an error message
		options.coins_list_t['OSTI'] = nil;										-- when error, unset so not included in COinS
	else																		-- OSTI is only digits
		local id_num = tonumber (id);											-- convert id to a number for range testing
		if 1018 &gt; id_num or handler.id_limit &lt; id_num then						-- if OSTI is outside test limit boundaries
			set_message ('err_bad_osti');										-- set an error message
			options.coins_list_t['OSTI'] = nil;									-- when error, unset so not included in COinS
		end
	end
	
	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
			prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode, access = access});
end


--[[--------------------------&lt; P M C &gt;------------------------------------------------------------------------

Format a PMC, do simple error checking, and check for embargoed articles.

The embargo parameter takes a date for a value. If the embargo date is in the future the PMC identifier will not
be linked to the article.  If the embargo date is today or in the past, or if it is empty or omitted, then the
PMC identifier is linked to the article through the link at cfg.id_handlers['PMC'].prefix.

PMC embargo date testing is done in function is_embargoed () which is called earlier because when the citation
has |pmc=&lt;value&gt; but does not have a |url= then |title= is linked with the PMC link.  Function is_embargoed ()
returns the embargo date if the PMC article is still embargoed, otherwise it returns an empty string.

PMCs are sequential numbers beginning at 1 and counting up.  This code checks the PMC to see that it contains only digits and is less
than test_limit; the value in local variable test_limit will need to be updated periodically as more PMCs are issued.

]]

local function pmc (options)
	local id = options.id;
	local embargo = options.Embargo;											-- TODO: lowercase?
	local handler = options.handler;
	local err_flag;
	local id_num;
	local text;

	id_num = id:match ('^[Pp][Mm][Cc](%d+)$');									-- identifier with PMC prefix

	if is_set (id_num) then
		set_message ('maint_pmc_format');
	else																		-- plain number without PMC prefix
		id_num = id:match ('^%d+$');											-- if here id is all digits
	end

	if is_set (id_num) then														-- id_num has a value so test it
		id_num = tonumber (id_num);												-- convert id_num to a number for range testing
		if 1 &gt; id_num or handler.id_limit &lt; id_num then							-- if PMC is outside test limit boundaries
			err_flag = set_message ('err_bad_pmc');								-- set an error message
		else
			id = tostring (id_num);												-- make sure id is a string
		end
	else																		-- when id format incorrect
		err_flag = set_message ('err_bad_pmc');									-- set an error message
	end
	
	if is_set (embargo) and is_set (is_embargoed (embargo)) then				-- is PMC is still embargoed?
		text = table.concat (													-- still embargoed so no external link
			{
			make_wikilink (link_label_make (handler), handler.label),
			handler.separator,
			id,
			});
	else
		text = external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,	-- no embargo date or embargo has expired, ok to link to article
			prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode, access = handler.access,
			auto_link = not err_flag and 'pmc' or nil							-- do not auto-link when PMC has error
			});
	end

	if err_flag then
		options.coins_list_t['PMC'] = nil;										-- when error, unset so not included in COinS
	end

	return text;
end


--[[--------------------------&lt; P M I D &gt;----------------------------------------------------------------------

Format PMID and do simple error checking.  PMIDs are sequential numbers beginning at 1 and counting up.  This
code checks the PMID to see that it contains only digits and is less than test_limit; the value in local variable
test_limit will need to be updated periodically as more PMIDs are issued.

]]

local function pmid (options)
	local id = options.id;
	local handler = options.handler;

	if id:match("[^%d]") then													-- if PMID has anything but digits
		set_message ('err_bad_pmid');											-- set an error message
		options.coins_list_t['PMID'] = nil;										-- when error, unset so not included in COinS
	else																		-- PMID is only digits
		local id_num = tonumber (id);											-- convert id to a number for range testing
		if 1 &gt; id_num or handler.id_limit &lt; id_num then							-- if PMID is outside test limit boundaries
			set_message ('err_bad_pmid');										-- set an error message
			options.coins_list_t['PMID'] = nil;									-- when error, unset so not included in COinS
		end
	end
	
	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
			prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode});
end


--[[--------------------------&lt; R F C &gt;------------------------------------------------------------------------

Format RFC and do simple error checking. RFCs are sequential numbers beginning at 1 and counting up.  This
code checks the RFC to see that it contains only digits and is less than test_limit specified in the configuration;
the value in test_limit will need to be updated periodically as more RFCs are issued.

An index of all RFCs is here: https://tools.ietf.org/rfc/

]]

local function rfc (options)
	local id = options.id;
	local handler = options.handler;

	if id:match("[^%d]") then													-- if RFC has anything but digits
		set_message ('err_bad_rfc');											-- set an error message
		options.coins_list_t['RFC'] = nil;										-- when error, unset so not included in COinS
	else																		-- RFC is only digits
		local id_num = tonumber (id);											-- convert id to a number for range testing
		if 1 &gt; id_num or handler.id_limit &lt; id_num then							-- if RFC is outside test limit boundaries
			set_message ('err_bad_rfc');										-- set an error message
			options.coins_list_t['RFC'] = nil;									-- when error, unset so not included in COinS
		end
	end
	
	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
			prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode, access = handler.access});
end


--[[--------------------------&lt; S 2 C I D &gt;--------------------------------------------------------------------

Format an S2CID, do simple error checking

S2CIDs are sequential numbers beginning at 1 and counting up.  This code checks the S2CID to see that it is only
digits and is less than test_limit; the value in local variable test_limit will need to be updated periodically
as more S2CIDs are issued.

]]

local function s2cid (options)
	local id = options.id;
	local access = options.access;
	local handler = options.handler;
	local id_num;
	local text;
	
	id_num = id:match ('^[1-9]%d*$');											-- id must be all digits; must not begin with 0; no open access flag

 	if is_set (id_num) then														-- id_num has a value so test it
		id_num = tonumber (id_num);												-- convert id_num to a number for range testing
		if handler.id_limit &lt; id_num then										-- if S2CID is outside test limit boundaries
			set_message ('err_bad_s2cid');										-- set an error message
			options.coins_list_t['S2CID'] = nil;								-- when error, unset so not included in COinS
		end
	else																		-- when id format incorrect
		set_message ('err_bad_s2cid');											-- set an error message
		options.coins_list_t['S2CID'] = nil;									-- when error, unset so not included in COinS
	end

	text = external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
		prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode, access = access});

	return text;
end


--[[--------------------------&lt; S B N &gt;------------------------------------------------------------------------

9-digit form of ISBN-10; uses same check-digit validation when SBN is prefixed with an additional '0' to make 10 digits

sbn value not made part of COinS metadata because we don't have a url or isn't a COinS-defined identifier (rft.xxx)
or an identifier registered at info-uri.info (info:)

]]

local function sbn (options)
	local id = options.id;
	local ignore_invalid = options.accept;
	local handler = options.handler;
	local function return_result (check, err_type)								-- local function to handle the various returns
		local SBN = internal_link_id ({link = handler.link, label = handler.label, redirect = handler.redirect,
						prefix = handler.prefix, id = id, separator = handler.separator});
		if not ignore_invalid then												-- if not ignoring SBN errors
			if not check then
				options.coins_list_t['SBN'] = nil;								-- when error, unset so not included in COinS; not really necessary here because sbn not made part of COinS
				set_message ('err_bad_sbn', {err_type});						-- display an error message
				return SBN; 
			end
		else
			set_message ('maint_isbn_ignore');									-- add a maint category even when there is no error (ToDo: Possibly switch to separate message for SBNs only)
		end
		return SBN;
	end

	if id:match ('[^%s-0-9X]') then
		return return_result (false, cfg.err_msg_supl.char);					-- fail if SBN contains anything but digits, hyphens, or the uppercase X
	end

	local ident = id:gsub ('[%s-]', '');										-- remove hyphens and whitespace; they interfere with the rest of the tests

	if  9 ~= ident:len() then
		return return_result (false, cfg.err_msg_supl.length);					-- fail if incorrect length
	end

	if ident:match ('^%d*X?$') == nil then
		return return_result (false, cfg.err_msg_supl.form);					-- fail if SBN has 'X' anywhere but last position
	end

	return return_result (is_valid_isxn ('0' .. ident, 10), cfg.err_msg_supl.check);
end


--[[--------------------------&lt; S S R N &gt;----------------------------------------------------------------------

Format an SSRN, do simple error checking

SSRNs are sequential numbers beginning at 100? and counting up.  This code checks the SSRN to see that it is
only digits and is greater than 99 and less than test_limit; the value in local variable test_limit will need
to be updated periodically as more SSRNs are issued.

]]

local function ssrn (options)
	local id = options.id;
	local handler = options.handler;
	local id_num;
	local text;
	
	id_num = id:match ('^%d+$');												-- id must be all digits

	if is_set (id_num) then														-- id_num has a value so test it
		id_num = tonumber (id_num);												-- convert id_num to a number for range testing
		if 100 &gt; id_num or handler.id_limit &lt; id_num then						-- if SSRN is outside test limit boundaries
			set_message ('err_bad_ssrn');										-- set an error message
			options.coins_list_t['SSRN'] = nil;									-- when error, unset so not included in COinS
		end
	else																		-- when id format incorrect
		set_message ('err_bad_ssrn');											-- set an error message
		options.coins_list_t['SSRN'] = nil;										-- when error, unset so not included in COinS
	end
	
	text = external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
		prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode, access = options.access});

	return text;
end


--[[--------------------------&lt; U S E N E T _ I D &gt;------------------------------------------------------------

Validate and format a usenet message id.  Simple error checking, looks for 'id-left@id-right' not enclosed in
'&lt;' and/or '&gt;' angle brackets.

]]

local function usenet_id (options)
	local id = options.id;
	local handler = options.handler;

	local text = external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
		prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode})
 
	if not id:match('^.+@.+$') or not id:match('^[^&lt;].*[^&gt;]$') then				-- doesn't have '@' or has one or first or last character is '&lt; or '&gt;'
		set_message ('err_bad_usenet_id')										-- add an error message if the message id is invalid
		options.coins_list_t['USENETID'] = nil;									-- when error, unset so not included in COinS
	end 
	
	return text;
end


--[[--------------------------&lt; Z B L &gt;-----------------------------------------------------------------------

A numerical identifier in the form nnnn.nnnnn - leading zeros in the first quartet optional

format described here: http://emis.mi.sanu.ac.rs/ZMATH/zmath/en/help/search/

temporary format is apparently eight digits.  Anything else is an error

]]

local function zbl (options)
	local id = options.id;
	local handler = options.handler;

	if id:match('^%d%d%d%d%d%d%d%d$') then										-- is this identifier using temporary format?
		set_message ('maint_zbl');												-- yes, add maint cat
	elseif not id:match('^%d?%d?%d?%d%.%d%d%d%d%d$') then						-- not temporary, is it normal format?
		set_message ('err_bad_zbl');											-- no, set an error message
		options.coins_list_t['ZBL'] = nil;										-- when error, unset so not included in COinS
	end
	
	return external_link_id ({link = handler.link, label = handler.label, q = handler.q, redirect = handler.redirect,
			prefix = handler.prefix, id = id, separator = handler.separator, encode = handler.encode});
end


--============================&lt;&lt; I N T E R F A C E   F U N C T I O N S &gt;&gt;==========================================

--[[--------------------------&lt; E X T R A C T _ I D S &gt;------------------------------------------------------------

Populates ID table from arguments using configuration settings. Loops through cfg.id_handlers and searches args for
any of the parameters listed in each cfg.id_handlers['...'].parameters.  If found, adds the parameter and value to
the identifier list.  Emits redundant error message if more than one alias exists in args

]]

local function extract_ids (args)
	local id_list = {};															-- list of identifiers found in args
	for k, v in pairs (cfg.id_handlers) do										-- k is uppercase identifier name as index to cfg.id_handlers; e.g. cfg.id_handlers['ISBN'], v is a table
		v = select_one (args, v.parameters, 'err_redundant_parameters' );		-- v.parameters is a table of aliases for k; here we pick one from args if present
		if is_set (v) then id_list[k] = v; end									-- if found in args, add identifier to our list
	end
	return id_list;
end


--[[--------------------------&lt; E X T R A C T _ I D _ A C C E S S _ L E V E L S &gt;--------------------------------------

Fetches custom id access levels from arguments using configuration settings. Parameters which have a predefined access
level (e.g. arxiv) do not use this function as they are directly rendered as free without using an additional parameter.

returns a table of k/v pairs where k is same as the identifier's key in cfg.id_handlers and v is the assigned (valid) keyword

access-level values must match the case used in cfg.keywords_lists['id-access'] (lowercase unless there is some special reason for something else)

]]

local function extract_id_access_levels (args, id_list)
	local id_accesses_list = {};
	for k, v in pairs (cfg.id_handlers) do
		local access_param = v.custom_access;									-- name of identifier's access-level parameter
		if is_set (access_param) then
			local access_level = args[access_param];							-- get the assigned value if there is one
			if is_set (access_level) then
				if not in_array (access_level, cfg.keywords_lists['id-access']) then	-- exact match required
					set_message ('err_invalid_param_val', {access_param, access_level});	
					access_level = nil;											-- invalid so unset
				end
				if not is_set (id_list[k]) then									-- identifier access-level must have a matching identifier
					set_message ('err_param_access_requires_param', {k:lower()});	-- parameter name is uppercase in cfg.id_handlers (k); lowercase for error message
				end
				id_accesses_list[k] = cfg.keywords_xlate[access_level];			-- get translated keyword
			end
		end
	end
	return id_accesses_list;
end


--[[--------------------------&lt; B U I L D _ I D _ L I S T &gt;----------------------------------------------------

render the identifiers into a sorted sequence table

&lt;ID_list_coins_t&gt; is a table of k/v pairs where k is same as key in cfg.id_handlers and v is the assigned value
&lt;options_t&gt; is a table of various k/v option pairs provided in the call to new_build_id_list();
	modified by	this function and passed to all identifier rendering functions
&lt;access_levels_t&gt; is a table of k/v pairs where k is same as key in cfg.id_handlers and v is the assigned value (if valid)

returns a sequence table of sorted (by hkey - 'handler' key) rendered identifier strings

]]

local function build_id_list (ID_list_coins_t, options_t, access_levels_t)
	local ID_list_t = {};
	local accept;
	local func_map = {															--function map points to functions associated with hkey identifier
		['ARXIV'] = arxiv,
		['ASIN'] = asin,
		['BIBCODE'] = bibcode,
		['BIORXIV'] = biorxiv,
		['CITESEERX'] = citeseerx,
		['DOI'] = doi,
		['EISSN'] = issn,
		['HDL'] = hdl,
		['ISBN'] = isbn,
		['ISMN'] = ismn,
		['ISSN'] = issn,
		['JFM'] = jfm,
		['JSTOR'] = jstor,
		['LCCN'] = lccn,
		['MEDRXIV'] = medrxiv,
		['MR'] = mr,
		['OCLC'] = oclc,
		['OL'] = openlibrary,
		['OSTI'] = osti,
		['PMC'] = pmc,
		['PMID'] = pmid,
		['RFC']  = rfc,
		['S2CID'] = s2cid,
		['SBN'] = sbn,
		['SSRN'] = ssrn,
		['USENETID'] = usenet_id,
		['ZBL'] = zbl,
		}

	for hkey, v in pairs (ID_list_coins_t) do
		v, accept = has_accept_as_written (v);									-- remove accept-as-written markup if present; accept is boolean true when markup removed; false else
																				-- every function gets the options table with value v and accept boolean
		options_t.hkey = hkey;													-- ~/Configuration handler key
		options_t.id = v;														-- add that identifier value to the options table
		options_t.accept = accept;												-- add the accept boolean flag
		options_t.access = access_levels_t[hkey];								-- add the access level for those that have an |&lt;identifier-access= parameter
		options_t.handler = cfg.id_handlers[hkey];
		options_t.coins_list_t = ID_list_coins_t;								-- pointer to ID_list_coins_t; for |asin= and |ol=; also to keep erroneous values out of the citation's metadata
		options_t.coins_list_t[hkey] = v;										-- id value without accept-as-written markup for metadata
		
		if options_t.handler.access and not in_array (options_t.handler.access, cfg.keywords_lists['id-access']) then
			error (cfg.messages['unknown_ID_access'] .. options_t.handler.access);	-- here when handler access key set to a value not listed in list of allowed id access keywords
		end

		if func_map[hkey] then
			local id_text = func_map[hkey] (options_t);							-- call the function to get identifier text and any error message
			table.insert (ID_list_t, {hkey, id_text});							-- add identifier text to the output sequence table
		else
			error (cfg.messages['unknown_ID_key'] .. hkey);						-- here when func_map doesn't have a function for hkey
		end
	end

	local function comp (a, b)													-- used by following table.sort()
		return a[1]:lower() &lt; b[1]:lower();										-- sort by hkey
	end

	table.sort (ID_list_t, comp);												-- sequence table of tables sort	
	for k, v in ipairs (ID_list_t) do											-- convert sequence table of tables to simple sequence table of strings
		ID_list_t[k] = v[2];													-- v[2] is the identifier rendering from the call to the various functions in func_map{}
	end
	
	return ID_list_t;
end


--[[--------------------------&lt; O P T I O N S _ C H E C K &gt;----------------------------------------------------

check that certain option parameters have their associated identifier parameters with values

&lt;ID_list_coins_t&gt; is a table of k/v pairs where k is same as key in cfg.id_handlers and v is the assigned value
&lt;ID_support_t&gt; is a sequence table of tables created in citation0() where each subtable has four elements:
	[1] is the support parameter's assigned value; empty string if not set
	[2] is a text string same as key in cfg.id_handlers
	[3] is cfg.error_conditions key used to create error message
	[4] is original ID support parameter name used to create error message
	
returns nothing; on error emits an appropriate error message

]]

local function options_check (ID_list_coins_t, ID_support_t)
	for _, v in ipairs (ID_support_t) do
		if is_set (v[1]) and not ID_list_coins_t[v[2]] then						-- when support parameter has a value but matching identifier parameter is missing or empty
			set_message (v[3], (v[4]));											-- emit the appropriate error message
		end
	end
end


--[[--------------------------&lt; I D E N T I F I E R _ L I S T S _ G E T &gt;--------------------------------------

Creates two identifier lists: a k/v table of identifiers and their values to be used locally and for use in the
COinS metadata, and a sequence table of the rendered identifier strings that will be included in the rendered
citation.

]]

local function identifier_lists_get (args_t, options_t, ID_support_t)
	local ID_list_coins_t = extract_ids (args_t);										-- get a table of identifiers and their values for use locally and for use in COinS
	options_check (ID_list_coins_t, ID_support_t);										-- ID support parameters must have matching identifier parameters 
	local ID_access_levels_t = extract_id_access_levels (args_t, ID_list_coins_t);		-- get a table of identifier access levels
	local ID_list_t = build_id_list (ID_list_coins_t, options_t, ID_access_levels_t);	-- get a sequence table of rendered identifier strings

	return ID_list_t, ID_list_coins_t;											-- return the tables
end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local cfg table and imported functions table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr, utilities_page_ptr)
	cfg = cfg_table_ptr;

	has_accept_as_written = utilities_page_ptr.has_accept_as_written;			-- import functions from select Module:Citation/CS1/Utilities module
	is_set = utilities_page_ptr.is_set;								
	in_array = utilities_page_ptr.in_array;
	set_message = utilities_page_ptr.set_message;
	select_one = utilities_page_ptr.select_one;
	substitute = utilities_page_ptr.substitute;
	make_wikilink = utilities_page_ptr.make_wikilink;

	z = utilities_page_ptr.z;													-- table of tables in Module:Citation/CS1/Utilities
end


--[[--------------------------&lt; E X P O R T E D   F U N C T I O N S &gt;------------------------------------------
]]

return {
	auto_link_urls = auto_link_urls,											-- table of identifier URLs to be used when auto-linking |title=
	
	identifier_lists_get = identifier_lists_get,								-- experiment to replace individual calls to build_id_list(), extract_ids, extract_id_access_levels
	is_embargoed = is_embargoed;
	set_selected_modules = set_selected_modules;
	}</text>
      <sha1>sh0l2n4ahyihscjfw9ol31xgrbnds2a</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/COinS</title>
    <ns>828</ns>
    <id>15</id>
    <revision>
      <id>19</id>
      <timestamp>2023-08-20T13:49:11Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;-------------------------------------- ]]  local has_accept_as_written, is_set, in_array, remove_wiki_link, strip_apostrophe_markup;	-- functions in Module:Citation/CS1/Utilities  local cfg;																		-- table of configuration tables that are defined in Module:Citation/CS1/Configuration   --[[--------------------------&lt; M A K E _ C O I N S _ T I T L E &gt;----------------------------------------..."</comment>
      <origin>19</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="16572" sha1="9bz6mvz0mzk8yv0c75eqy8rm41au7y9" xml:space="preserve">--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local has_accept_as_written, is_set, in_array, remove_wiki_link, strip_apostrophe_markup;	-- functions in Module:Citation/CS1/Utilities

local cfg;																		-- table of configuration tables that are defined in Module:Citation/CS1/Configuration


--[[--------------------------&lt; M A K E _ C O I N S _ T I T L E &gt;----------------------------------------------

Makes a title for COinS from Title and / or ScriptTitle (or any other name-script pairs)

Apostrophe markup (bold, italics) is stripped from each value so that the COinS metadata isn't corrupted with strings
of %27%27...

]]

local function make_coins_title (title, script)
	title = has_accept_as_written (title);
	if is_set (title) then
		title = strip_apostrophe_markup (title);								-- strip any apostrophe markup
	else
		title = '';																-- if not set, make sure title is an empty string
	end
	if is_set (script) then
		script = script:gsub ('^%l%l%s*:%s*', '');								-- remove language prefix if present (script value may now be empty string)
		script = strip_apostrophe_markup (script);								-- strip any apostrophe markup
	else
		script = '';															-- if not set, make sure script is an empty string
	end
	if is_set (title) and is_set (script) then
		script = ' ' .. script;													-- add a space before we concatenate
	end
	return title .. script;														-- return the concatenation
end


--[[--------------------------&lt; E S C A P E _ L U A _ M A G I C _ C H A R S &gt;----------------------------------

Returns a string where all of Lua's magic characters have been escaped.  This is important because functions like
string.gsub() treat their pattern and replace strings as patterns, not literal strings.
]]

local function escape_lua_magic_chars (argument)
	argument = argument:gsub("%%", "%%%%");										-- replace % with %%
	argument = argument:gsub("([%^%$%(%)%.%[%]%*%+%-%?])", "%%%1");				-- replace all other Lua magic pattern characters
	return argument;
end


--[[--------------------------&lt; G E T _ C O I N S _ P A G E S &gt;------------------------------------------------

Extract page numbers from external wikilinks in any of the |page=, |pages=, or |at= parameters for use in COinS.

]]

local function get_coins_pages (pages)
	local pattern;
	if not is_set (pages) then return pages; end								-- if no page numbers then we're done
	
	while true do
		pattern = pages:match("%[(%w*:?//[^ ]+%s+)[%w%d].*%]");					-- pattern is the opening bracket, the URL and following space(s): "[url "
		if nil == pattern then break; end										-- no more URLs
		pattern = escape_lua_magic_chars (pattern);								-- pattern is not a literal string; escape Lua's magic pattern characters
		pages = pages:gsub(pattern, "");										-- remove as many instances of pattern as possible
	end
	pages = pages:gsub("[%[%]]", "");											-- remove the brackets
	pages = pages:gsub("–", "-" );												-- replace endashes with hyphens
	pages = pages:gsub("&amp;%w+;", "-" );											-- and replace HTML entities (&amp;ndash; etc.) with hyphens; do we need to replace numerical entities like &amp;#32; and the like?
	return pages;
end


--[=[-------------------------&lt; C O I N S _ R E P L A C E _ M A T H _ S T R I P M A R K E R &gt;------------------

There are three options for math markup rendering that depend on the editor's math preference settings.  These
settings are at [[Special:Preferences#mw-prefsection-rendering]] and are
	PNG images
	TeX source
	MathML with SVG or PNG fallback

All three are heavy with HTML and CSS which doesn't belong in the metadata.

Without this function, the metadata saved in the raw wikitext contained the rendering determined by the settings
of the last editor to save the page.

This function gets the rendered form of an equation according to the editor's preference before the page is saved.  It
then searches the rendering for the text equivalent of the rendered equation and replaces the rendering with that so
that the page is saved without extraneous HTML/CSS markup and with a reasonably readable text form of the equation.

When a replacement is made, this function returns true and the value with replacement; otherwise false and the initial
value.  To replace multipe equations it is necessary to call this function from within a loop.

]=]

local function coins_replace_math_stripmarker (value)
	local stripmarker = cfg.stripmarkers['math'];
	local rendering = value:match (stripmarker);								-- is there a math stripmarker

	if not rendering then														-- when value doesn't have a math stripmarker, abandon this test
		return false, value;
	end
	
	rendering = mw.text.unstripNoWiki (rendering);								-- convert stripmarker into rendered value (or nil? ''? when math render error)
	
	if rendering:match ('alt="[^"]+"') then										-- if PNG math option
		rendering = rendering:match ('alt="([^"]+)"');							-- extract just the math text
	elseif rendering:match ('$%s+.+%s+%$') then									-- if TeX math option; $ is legit character that is escapes as \$
		rendering = rendering:match ('$%s+(.+)%s+%$')							-- extract just the math text
	elseif rendering:match ('&lt;annotation[^&gt;]+&gt;.+&lt;/annotation&gt;') then			-- if MathML math option
		rendering = rendering:match ('&lt;annotation[^&gt;]+&gt;(.+)&lt;/annotation&gt;')		-- extract just the math text
	else
		return false, value;													-- had math stripmarker but not one of the three defined forms
	end
	
	return true, value:gsub (stripmarker, rendering, 1);
end


--[[--------------------------&lt; C O I N S _ C L E A N U P &gt;----------------------------------------------------

Cleanup parameter values for the metadata by removing or replacing invisible characters and certain HTML entities.

2015-12-10: there is a bug in mw.text.unstripNoWiki ().  It replaces math stripmarkers with the appropriate content
when it shouldn't.  See https://phabricator.wikimedia.org/T121085 and Wikipedia_talk:Lua#stripmarkers_and_mw.text.unstripNoWiki.28.29

TODO: move the replacement patterns and replacement values into a table in /Configuration similar to the invisible
characters table?

]]

local function coins_cleanup (value)
	local replaced = true;														-- default state to get the do loop running

	while replaced do															-- loop until all math stripmarkers replaced
		replaced, value = coins_replace_math_stripmarker (value);				-- replace math stripmarker with text representation of the equation
	end

	value = value:gsub (cfg.stripmarkers['math'], "MATH RENDER ERROR");			-- one or more couldn't be replaced; insert vague error message
	
	value = mw.text.unstripNoWiki (value);										-- replace nowiki stripmarkers with their content
	value = value:gsub ('&lt;span class="nowrap" style="padding%-left:0%.1em;"&gt;&amp;#39;(s?)&lt;/span&gt;', "'%1");	-- replace {{'}} or {{'s}} with simple apostrophe or apostrophe-s
	value = value:gsub ('&amp;nbsp;', ' ');											-- replace &amp;nbsp; entity with plain space
	value = value:gsub ('\226\128\138', ' ');									-- replace hair space with plain space
	if not mw.ustring.find (value, cfg.indic_script) then						-- don't remove zero-width joiner characters from indic script
		value = value:gsub ('&amp;zwj;', '');										-- remove &amp;zwj; entities
		value = mw.ustring.gsub (value, '[\226\128\141\226\128\139\194\173]', '');	-- remove zero-width joiner, zero-width space, soft hyphen
	end
	value = value:gsub ('[\009\010\013 ]+', ' ');								-- replace horizontal tab, line feed, carriage return with plain space
	return value;
end


--[[--------------------------&lt; C O I N S &gt;--------------------------------------------------------------------

COinS metadata (see &lt;http://ocoins.info/&gt;) allows automated tools to parse the citation information.

]]

local function COinS(data, class)
	if 'table' ~= type(data) or nil == next(data) then
		return '';
	end

	for k, v in pairs (data) do													-- spin through all of the metadata parameter values
		if 'ID_list' ~= k and 'Authors' ~= k then								-- except the ID_list and Author tables (author nowiki stripmarker done when Author table processed)
			data[k] = coins_cleanup (v);
		end
	end

	local ctx_ver = "Z39.88-2004";
	
	-- treat table strictly as an array with only set values.
	local OCinSoutput = setmetatable( {}, {
		__newindex = function(self, key, value)
			if is_set(value) then
				rawset( self, #self+1, table.concat{ key, '=', mw.uri.encode( remove_wiki_link( value ) ) } );
			end
		end
	});
	
	if in_array (class, {'arxiv', 'biorxiv', 'citeseerx', 'medrxiv', 'ssrn', 'journal', 'news', 'magazine'}) or
		(in_array (class, {'conference', 'interview', 'map', 'press release', 'web'}) and is_set(data.Periodical)) or
		('citation' == class and is_set(data.Periodical) and not is_set (data.Encyclopedia)) then
			OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:journal";			-- journal metadata identifier
			if in_array (class, {'arxiv', 'biorxiv', 'citeseerx', 'medrxiv', 'ssrn'}) then	-- set genre according to the type of citation template we are rendering
				OCinSoutput["rft.genre"] = "preprint";							-- cite arxiv, cite biorxiv, cite citeseerx, cite medrxiv, cite ssrn
			elseif 'conference' == class then
				OCinSoutput["rft.genre"] = "conference";						-- cite conference (when Periodical set)
			elseif 'web' == class then
				OCinSoutput["rft.genre"] = "unknown";							-- cite web (when Periodical set)
			else
				OCinSoutput["rft.genre"] = "article";							-- journal and other 'periodical' articles
			end
			OCinSoutput["rft.jtitle"] = data.Periodical;						-- journal only
			OCinSoutput["rft.atitle"] = data.Title;								-- 'periodical' article titles

																				-- these used only for periodicals
			OCinSoutput["rft.ssn"] = data.Season;								-- keywords: winter, spring, summer, fall
			OCinSoutput["rft.quarter"] = data.Quarter;							-- single digits 1-&gt;first quarter, etc.
			OCinSoutput["rft.chron"] = data.Chron;								-- free-form date components
			OCinSoutput["rft.volume"] = data.Volume;							-- does not apply to books
			OCinSoutput["rft.issue"] = data.Issue;
			OCinSoutput['rft.artnum'] = data.ArticleNumber;						-- {{cite journal}} only
			OCinSoutput["rft.pages"] = data.Pages;								-- also used in book metadata

	elseif 'thesis' ~= class then												-- all others except cite thesis are treated as 'book' metadata; genre distinguishes
		OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:book";					-- book metadata identifier
		if 'report' == class or 'techreport' == class then						-- cite report and cite techreport
			OCinSoutput["rft.genre"] = "report";
		elseif 'conference' == class then										-- cite conference when Periodical not set
			OCinSoutput["rft.genre"] = "conference";
			OCinSoutput["rft.atitle"] = data.Chapter;							-- conference paper as chapter in proceedings (book)
		elseif in_array (class, {'book', 'citation', 'encyclopaedia', 'interview', 'map'}) then
			if is_set (data.Chapter) then
				OCinSoutput["rft.genre"] = "bookitem";
				OCinSoutput["rft.atitle"] = data.Chapter;						-- book chapter, encyclopedia article, interview in a book, or map title
			else
				if 'map' == class or 'interview' == class then
					OCinSoutput["rft.genre"] = 'unknown';						-- standalone map or interview
				else
					OCinSoutput["rft.genre"] = 'book';							-- book and encyclopedia
				end
			end
		else	-- {'audio-visual', 'AV-media-notes', 'DVD-notes', 'episode', 'interview', 'mailinglist', 'map', 'newsgroup', 'podcast', 'press release', 'serial', 'sign', 'speech', 'web'}
			OCinSoutput["rft.genre"] = "unknown";
		end
		OCinSoutput["rft.btitle"] = data.Title;									-- book only
		OCinSoutput["rft.place"] = data.PublicationPlace;						-- book only
		OCinSoutput["rft.series"] = data.Series;								-- book only
		OCinSoutput["rft.pages"] = data.Pages;									-- book, journal
		OCinSoutput["rft.edition"] = data.Edition;								-- book only
		OCinSoutput["rft.pub"] = data.PublisherName;							-- book and dissertation
		
	else																		-- cite thesis
		OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:dissertation";			-- dissertation metadata identifier
		OCinSoutput["rft.title"] = data.Title;									-- dissertation (also patent but that is not yet supported)
		OCinSoutput["rft.degree"] = data.Degree;								-- dissertation only
		OCinSoutput['rft.inst'] = data.PublisherName;							-- book and dissertation
	end
	-- NB. Not currently supported are "info:ofi/fmt:kev:mtx:patent", "info:ofi/fmt:kev:mtx:dc", "info:ofi/fmt:kev:mtx:sch_svc", "info:ofi/fmt:kev:mtx:ctx"
																				-- and now common parameters (as much as possible)
	OCinSoutput["rft.date"] = data.Date;										-- book, journal, dissertation

	for k, v in pairs( data.ID_list ) do										-- what to do about these? For now assume that they are common to all?
		if k == 'ISBN' then v = v:gsub( "[^-0-9X]", "" ); end
		local id = cfg.id_handlers[k].COinS;
		if string.sub( id or "", 1, 4 ) == 'info' then							-- for ids that are in the info:registry
			OCinSoutput["rft_id"] = table.concat{ id, "/", v };
		elseif string.sub (id or "", 1, 3 ) == 'rft' then						-- for isbn, issn, eissn, etc. that have defined COinS keywords
			OCinSoutput[ id ] = v;
		elseif 'url' == id then													-- for urls that are assembled in ~/Identifiers; |asin= and |ol=
			OCinSoutput["rft_id"] = table.concat ({data.ID_list[k], "#id-name=", cfg.id_handlers[k].label});
		elseif id then															-- when cfg.id_handlers[k].COinS is not nil so urls created here
			OCinSoutput["rft_id"] = table.concat{ cfg.id_handlers[k].prefix, v, cfg.id_handlers[k].suffix or '', "#id-name=", cfg.id_handlers[k].label };	-- others; provide a URL and indicate identifier name as #fragment (human-readable, but transparent to browsers)
		end
	end

	local last, first;
	for k, v in ipairs( data.Authors ) do
		last, first = coins_cleanup (v.last), coins_cleanup (v.first or '');	-- replace any nowiki stripmarkers, non-printing or invisible characters
		if k == 1 then															-- for the first author name only
			if is_set(last) and is_set(first) then								-- set these COinS values if |first= and |last= specify the first author name
				OCinSoutput["rft.aulast"] = last;								-- book, journal, dissertation
				OCinSoutput["rft.aufirst"] = first;								-- book, journal, dissertation
			elseif is_set(last) then 
				OCinSoutput["rft.au"] = last;									-- book, journal, dissertation -- otherwise use this form for the first name
			end
		else																	-- for all other authors
			if is_set(last) and is_set(first) then
				OCinSoutput["rft.au"] = table.concat{ last, ", ", first };		-- book, journal, dissertation
			elseif is_set(last) then
				OCinSoutput["rft.au"] = last;									-- book, journal, dissertation
			end
			-- TODO: At present we do not report "et al.". Add anything special if this condition applies?
		end
	end

	OCinSoutput.rft_id = data.URL;
	OCinSoutput.rfr_id = table.concat{ "info:sid/", mw.site.server:match( "[^/]*$" ), ":", data.RawPage };

	-- TODO: Add optional extra info:
	-- rfr_dat=#REVISION&lt;version&gt; (referrer private data)
	-- ctx_id=&lt;data.RawPage&gt;#&lt;ref&gt; (identifier for the context object)
	-- ctx_tim=&lt;ts&gt; (timestamp in format yyyy-mm-ddThh:mm:ssTZD or yyyy-mm-dd)
	-- ctx_enc=info:ofi/enc:UTF-8 (character encoding)
	
	OCinSoutput = setmetatable( OCinSoutput, nil );

	-- sort with version string always first, and combine.
	-- table.sort( OCinSoutput );
	table.insert( OCinSoutput, 1, "ctx_ver=" .. ctx_ver ); -- such as "Z39.88-2004"
	return table.concat(OCinSoutput, "&amp;");
end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local cfg table and imported functions table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr, utilities_page_ptr)
	cfg = cfg_table_ptr;

	has_accept_as_written = utilities_page_ptr.has_accept_as_written;			-- import functions from selected Module:Citation/CS1/Utilities module
	is_set = utilities_page_ptr.is_set;
	in_array = utilities_page_ptr.in_array;
	remove_wiki_link = utilities_page_ptr.remove_wiki_link;
	strip_apostrophe_markup = utilities_page_ptr.strip_apostrophe_markup;
end


--[[--------------------------&lt; E X P O R T E D   F U N C T I O N S &gt;------------------------------------------
]]

return {
	make_coins_title = make_coins_title,
	get_coins_pages = get_coins_pages,
	COinS = COinS,
	set_selected_modules = set_selected_modules,
	}</text>
      <sha1>9bz6mvz0mzk8yv0c75eqy8rm41au7y9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Reflist/styles.css</title>
    <ns>10</ns>
    <id>16</id>
    <revision>
      <id>20</id>
      <timestamp>2023-08-20T14:12:13Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "/* {{pp|small=yes}} */ /* can we remove the font size declarations? .references gets a font-size in  * common.css that is always 90, and there is nothing else in reflist out in  * the wild. May affect column sizes.  */ .reflist { 	font-size: 90%;            /* Default font-size */ 	margin-bottom: 0.5em; 	list-style-type: decimal; }  .reflist .references { 	font-size: 100%;           /* Reset font-size when nested in div.reflist */ 	margin-bottom: 0;          /* Avoid dou..."</comment>
      <origin>20</origin>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text bytes="1407" sha1="9pglv18rwto8wyb2wiymxh52wdd5ut0" xml:space="preserve">/* {{pp|small=yes}} */
/* can we remove the font size declarations? .references gets a font-size in
 * common.css that is always 90, and there is nothing else in reflist out in
 * the wild. May affect column sizes.
 */
.reflist {
	font-size: 90%;            /* Default font-size */
	margin-bottom: 0.5em;
	list-style-type: decimal;
}

.reflist .references {
	font-size: 100%;           /* Reset font-size when nested in div.reflist */
	margin-bottom: 0;          /* Avoid double margin when nested in div.reflist */
	list-style-type: inherit;  /* Enable custom list style types */
}

/* columns-2 and columns-3 are legacy for "2 or more" column view from when the
 * template was implemented with column-count.
 */
.reflist-columns-2 {
	column-width: 30em;
}

.reflist-columns-3 {
	column-width: 25em;
}

/* Reset top margin for lists embedded in columns */
.reflist-columns {
	margin-top: 0.3em;
}

.reflist-columns ol {
	margin-top: 0;
}

/* Avoid elements breaking between columns */
.reflist-columns li {
	page-break-inside: avoid; /* Removed from CSS in favor of break-inside c. 2020 */
	break-inside: avoid-column;
}

.reflist-upper-alpha {
	list-style-type: upper-alpha;
}

.reflist-upper-roman {
	list-style-type: upper-roman;
}

.reflist-lower-alpha {
	list-style-type: lower-alpha;
}

.reflist-lower-greek {
	list-style-type: lower-greek;
}

.reflist-lower-roman {
	list-style-type: lower-roman;
}</text>
      <sha1>9pglv18rwto8wyb2wiymxh52wdd5ut0</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Infobox/styles.css</title>
    <ns>828</ns>
    <id>17</id>
    <revision>
      <id>21</id>
      <timestamp>2023-08-20T14:14:49Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "/* {{pp|small=y}} */ /*  * This TemplateStyles sheet deliberately does NOT include the full set of  * infobox styles. We are still working to migrate all of the manual  * infoboxes. See [[MediaWiki talk:Common.css/to do#Infobox]]  * DO NOT ADD THEM HERE  */ /*  * not strictly certain these styles are necessary since the modules now  * exclusively output infobox-subbox or infobox, not both  * just replicating the module faithfully  */ .infobox-subbox { 	padding: 0; 	borde..."</comment>
      <origin>21</origin>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text bytes="980" sha1="r79dlpm7l4hm8tdp6d2jr4blcsyis2v" xml:space="preserve">/* {{pp|small=y}} */
/*
 * This TemplateStyles sheet deliberately does NOT include the full set of
 * infobox styles. We are still working to migrate all of the manual
 * infoboxes. See [[MediaWiki talk:Common.css/to do#Infobox]]
 * DO NOT ADD THEM HERE
 */
/*
 * not strictly certain these styles are necessary since the modules now
 * exclusively output infobox-subbox or infobox, not both
 * just replicating the module faithfully
 */
.infobox-subbox {
	padding: 0;
	border: none;
	margin: -3px;
	width: auto;
	min-width: 100%;
	font-size: 100%;
	clear: none;
	float: none;
	background-color: transparent;
}

.infobox-3cols-child {
	margin: auto;
}

.infobox .navbar {
	font-size: 100%;
}

/* T281642 */
body.skin-minerva .infobox-header,
body.skin-minerva .infobox-subheader,
body.skin-minerva  .infobox-above,
body.skin-minerva .infobox-title,
body.skin-minerva  .infobox-image,
body.skin-minerva  .infobox-full-data,
body.skin-minerva .infobox-below {
	text-align: center;
}</text>
      <sha1>r79dlpm7l4hm8tdp6d2jr4blcsyis2v</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/styles.css</title>
    <ns>828</ns>
    <id>18</id>
    <revision>
      <id>22</id>
      <timestamp>2023-08-20T14:17:51Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "/* {{pp|small=yes}} */ /* can we remove the font size declarations? .references gets a font-size in  * common.css that is always 90, and there is nothing else in reflist out in  * the wild. May affect column sizes.  */ .reflist { 	font-size: 90%;            /* Default font-size */ 	margin-bottom: 0.5em; 	list-style-type: decimal; }  .reflist .references { 	font-size: 100%;           /* Reset font-size when nested in div.reflist */ 	margin-bottom: 0;          /* Avoid dou..."</comment>
      <origin>22</origin>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text bytes="1407" sha1="9pglv18rwto8wyb2wiymxh52wdd5ut0" xml:space="preserve">/* {{pp|small=yes}} */
/* can we remove the font size declarations? .references gets a font-size in
 * common.css that is always 90, and there is nothing else in reflist out in
 * the wild. May affect column sizes.
 */
.reflist {
	font-size: 90%;            /* Default font-size */
	margin-bottom: 0.5em;
	list-style-type: decimal;
}

.reflist .references {
	font-size: 100%;           /* Reset font-size when nested in div.reflist */
	margin-bottom: 0;          /* Avoid double margin when nested in div.reflist */
	list-style-type: inherit;  /* Enable custom list style types */
}

/* columns-2 and columns-3 are legacy for "2 or more" column view from when the
 * template was implemented with column-count.
 */
.reflist-columns-2 {
	column-width: 30em;
}

.reflist-columns-3 {
	column-width: 25em;
}

/* Reset top margin for lists embedded in columns */
.reflist-columns {
	margin-top: 0.3em;
}

.reflist-columns ol {
	margin-top: 0;
}

/* Avoid elements breaking between columns */
.reflist-columns li {
	page-break-inside: avoid; /* Removed from CSS in favor of break-inside c. 2020 */
	break-inside: avoid-column;
}

.reflist-upper-alpha {
	list-style-type: upper-alpha;
}

.reflist-upper-roman {
	list-style-type: upper-roman;
}

.reflist-lower-alpha {
	list-style-type: lower-alpha;
}

.reflist-lower-greek {
	list-style-type: lower-greek;
}

.reflist-lower-roman {
	list-style-type: lower-roman;
}</text>
      <sha1>9pglv18rwto8wyb2wiymxh52wdd5ut0</sha1>
    </revision>
    <revision>
      <id>23</id>
      <parentid>22</parentid>
      <timestamp>2023-08-20T14:18:58Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <origin>23</origin>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text bytes="2566" sha1="npr5wevy2mlh45kdko0s9avddt4bftk" xml:space="preserve">/* Protection icon
the following line controls the page-protection icon in the upper right corner
it must remain within this comment
	{{sandbox other||{{pp-template}}}}

*/

/* Overrides
Some wikis do not override user agent default styles for HTML &lt;cite&gt; and &lt;q&gt;,
unlike en.wp. On en.wp, keep these the same as [[MediaWiki:Common.css]].

The word-wrap and :target styles were moved here from Common.css.
On en.wp, keep these the same as [[Template:Citation/styles.css]].
*/
cite.citation {
	font-style: inherit; /* Remove italics for &lt;cite&gt; */
	/* Break long urls, etc., rather than overflowing box */
	word-wrap: break-word;
}

.citation q {
	quotes: '"' '"' "'" "'"; /* Straight quote marks for &lt;q&gt; */
}

/* Highlight linked elements (such as clicked references) in blue */

/* ID and URL access
Both core and Common.css have selector .mw-parser-output a[href$=".pdf"].external
for PDF pages. All TemplateStyles pages are hoisted to .mw-parser-output. We need
to have specificity equal to a[href$=".pdf"].external for locks to override PDF icon.
That's essentially 2 classes and 1 element.

the .id-lock-... selectors are for use by non-citation templates like
{{Catalog lookup link}} which do not have to handle PDF links
*/
.id-lock-free a,

.id-lock-limited a,
.id-lock-registration a,
.citation .cs1-lock-limited a,

.id-lock-subscription a,

/* Wikisource
Wikisource icon when |chapter= or |title= is wikilinked to Wikisource
as in cite wikisource
*/

/* Errors and maintenance */
.cs1-code {
	/* &lt;code&gt;...&lt;/code&gt; style override: mediawiki's css definition is specified here:
	https://git.wikimedia.org/blob/mediawiki%2Fcore.git/
		69cd73811f7aadd093050dbf20ed70ef0b42a713/skins%2Fcommon%2FcommonElements.css#L199
	*/
	color: inherit;
	background: inherit;
	border: none;
	padding: inherit;
}

.cs1-hidden-error {
	display: none;
	color: #d33;
}

.cs1-visible-error {
	color: #d33;
}

.cs1-maint {
	display: none;
	color: #3a3;
	margin-left: 0.3em;
}

/* Small text size
Set small text size in one place. 0.95 (here) * 0.9 (from references list) is
~0.85, which is the lower bound for size for accessibility. Old styling for this
was just 0.85. We could write the rule so that when this template is inside
references/reflist, only then does it multiply by 0.95; else multiply by 0.85 */
.cs1-format {
	font-size: 95%;
}

/* kerning */
.cs1-kern-left {
	padding-left: 0.2em;
}

.cs1-kern-right {
	padding-right: 0.2em;
}

/* selflinks – avoid bold font style when cs1|2 template links to the current page */
.citation .mw-selflink {
	font-weight: inherit;
}</text>
      <sha1>npr5wevy2mlh45kdko0s9avddt4bftk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Template other</title>
    <ns>10</ns>
    <id>19</id>
    <revision>
      <id>24</id>
      <timestamp>2023-08-20T14:28:54Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "{{#switch:   &lt;!--If no or empty "demospace" parameter then detect namespace--&gt;   {{#if:{{{demospace|}}}   | {{lc: {{{demospace}}} }}    &lt;!--Use lower case "demospace"--&gt;   | {{#ifeq:{{NAMESPACE}}|{{ns:Template}}     | template     | other     }}   }} | template = {{{1|}}} | other | #default = {{{2|}}} }}&lt;!--End switch--&gt;&lt;noinclude&gt;  {{documentation}} &lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt; &lt;/noinclude&gt;"</comment>
      <origin>24</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="435" sha1="0tcssjmltwl7y5v3f5wj2kqciaabqly" xml:space="preserve">{{#switch:
  &lt;!--If no or empty "demospace" parameter then detect namespace--&gt;
  {{#if:{{{demospace|}}}
  | {{lc: {{{demospace}}} }}    &lt;!--Use lower case "demospace"--&gt;
  | {{#ifeq:{{NAMESPACE}}|{{ns:Template}}
    | template
    | other
    }}
  }}
| template = {{{1|}}}
| other
| #default = {{{2|}}}
}}&lt;!--End switch--&gt;&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>0tcssjmltwl7y5v3f5wj2kqciaabqly</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Main other</title>
    <ns>10</ns>
    <id>20</id>
    <revision>
      <id>25</id>
      <timestamp>2023-08-20T14:31:27Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "{{#switch:   &lt;!--If no or empty "demospace" parameter then detect namespace--&gt;   {{#if:{{{demospace|}}}    | {{lc: {{{demospace}}} }}    &lt;!--Use lower case "demospace"--&gt;   | {{#ifeq:{{NAMESPACE}}|{{ns:0}}     | main     | other     }}    }} | main     = {{{1|}}} | other | #default = {{{2|}}} }}&lt;noinclude&gt;  {{documentation}} &lt;!-- Add categories to the /doc subpage; interwikis go to Wikidata, thank you! --&gt; &lt;/noinclude&gt;"</comment>
      <origin>25</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="422" sha1="fqcj40f1ojeitvtz4m2eefrp1ymhi6o" xml:space="preserve">{{#switch:
  &lt;!--If no or empty "demospace" parameter then detect namespace--&gt;
  {{#if:{{{demospace|}}} 
  | {{lc: {{{demospace}}} }}    &lt;!--Use lower case "demospace"--&gt;
  | {{#ifeq:{{NAMESPACE}}|{{ns:0}}
    | main
    | other
    }} 
  }}
| main     = {{{1|}}}
| other
| #default = {{{2|}}}
}}&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add categories to the /doc subpage; interwikis go to Wikidata, thank you! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>fqcj40f1ojeitvtz4m2eefrp1ymhi6o</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Check for unknown parameters</title>
    <ns>828</ns>
    <id>21</id>
    <revision>
      <id>26</id>
      <timestamp>2023-08-20T14:41:52Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "-- This module may be used to compare the arguments passed to the parent -- with a list of arguments, returning a specified result if an argument is -- not on the list local p = {}  local function trim(s) 	return s:match('^%s*(.-)%s*$') end  local function isnotempty(s) 	return s and s:match('%S') end  local function clean(text) 	-- Return text cleaned for display and truncated if too long. 	-- Strip markers are replaced with dummy text representing the original wikitext..."</comment>
      <origin>26</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="3312" sha1="h9rooqvu67gk81cpbiswol48lpmwmym" xml:space="preserve">-- This module may be used to compare the arguments passed to the parent
-- with a list of arguments, returning a specified result if an argument is
-- not on the list
local p = {}

local function trim(s)
	return s:match('^%s*(.-)%s*$')
end

local function isnotempty(s)
	return s and s:match('%S')
end

local function clean(text)
	-- Return text cleaned for display and truncated if too long.
	-- Strip markers are replaced with dummy text representing the original wikitext.
	local pos, truncated
	local function truncate(text)
		if truncated then
			return ''
		end
		if mw.ustring.len(text) &gt; 25 then
			truncated = true
			text = mw.ustring.sub(text, 1, 25) .. '...'
		end
		return mw.text.nowiki(text)
	end
	local parts = {}
	for before, tag, remainder in text:gmatch('([^\127]*)\127[^\127]*%-(%l+)%-[^\127]*\127()') do
		pos = remainder
		table.insert(parts, truncate(before) .. '&amp;lt;' .. tag .. '&amp;gt;...&amp;lt;/' .. tag .. '&amp;gt;')
	end
	table.insert(parts, truncate(text:sub(pos or 1)))
	return table.concat(parts)
end

function p._check(args, pargs)
	if type(args) ~= "table" or type(pargs) ~= "table" then
		-- TODO: error handling
		return
	end

	-- create the list of known args, regular expressions, and the return string
	local knownargs = {}
	local regexps = {}
	for k, v in pairs(args) do
		if type(k) == 'number' then
			v = trim(v)
			knownargs[v] = 1
		elseif k:find('^regexp[1-9][0-9]*$') then
			table.insert(regexps, '^' .. v .. '$')
		end
	end

	-- loop over the parent args, and make sure they are on the list
	local ignoreblank = isnotempty(args['ignoreblank'])
	local showblankpos = isnotempty(args['showblankpositional'])
	local values = {}
	for k, v in pairs(pargs) do
		if type(k) == 'string' and knownargs[k] == nil then
			local knownflag = false
			for _, regexp in ipairs(regexps) do
				if mw.ustring.match(k, regexp) then
					knownflag = true
					break
				end
			end
			if not knownflag and ( not ignoreblank or isnotempty(v) )  then
				table.insert(values, clean(k))
			end
		elseif type(k) == 'number' and knownargs[tostring(k)] == nil then
			local knownflag = false
			for _, regexp in ipairs(regexps) do
				if mw.ustring.match(tostring(k), regexp) then
					knownflag = true
					break
				end
			end
			if not knownflag and ( showblankpos or isnotempty(v) ) then
				table.insert(values, k .. ' = ' .. clean(v))
			end
		end
	end

	-- add results to the output tables
	local res = {}
	if #values &gt; 0 then
		local unknown_text = args['unknown'] or 'Found _VALUE_, '

		if mw.getCurrentFrame():preprocess( "{{REVISIONID}}" ) == "" then
			local preview_text = args['preview']
			if isnotempty(preview_text) then
				preview_text = require('Module:If preview')._warning({preview_text})
			elseif preview == nil then
				preview_text = unknown_text
			end
			unknown_text = preview_text
		end
		for _, v in pairs(values) do
			-- Fix odd bug for | = which gets stripped to the empty string and
			-- breaks category links
			if v == '' then v = ' ' end

			-- avoid error with v = 'example%2' ("invalid capture index")
			local r = unknown_text:gsub('_VALUE_', {_VALUE_ = v})
			table.insert(res, r)
		end
	end

	return table.concat(res)
end

function p.check(frame)
	local args = frame.args
	local pargs = frame:getParent().args
	return p._check(args, pargs)
end

return p</text>
      <sha1>h9rooqvu67gk81cpbiswol48lpmwmym</sha1>
    </revision>
  </page>
  <page>
    <title>Template:URL</title>
    <ns>10</ns>
    <id>22</id>
    <revision>
      <id>27</id>
      <timestamp>2023-08-20T14:44:54Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "&lt;includeonly&gt;{{#invoke:URL|url}}&lt;/includeonly&gt;{{#invoke:Check for unknown parameters|check|unknown={{main other|[[Category:Pages using URL template with unknown parameters|_VALUE_{{PAGENAME}}]]}}|preview=Page using [[Template:URL]] with unknown parameter "_VALUE_"|ignoreblank=y | 1 | 2 }}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;"</comment>
      <origin>27</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="329" sha1="a3iaiir0mhs0y2mdlkbw2snyhxnxqwu" xml:space="preserve">&lt;includeonly&gt;{{#invoke:URL|url}}&lt;/includeonly&gt;{{#invoke:Check for unknown parameters|check|unknown={{main other|[[Category:Pages using URL template with unknown parameters|_VALUE_{{PAGENAME}}]]}}|preview=Page using [[Template:URL]] with unknown parameter "_VALUE_"|ignoreblank=y | 1 | 2 }}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>a3iaiir0mhs0y2mdlkbw2snyhxnxqwu</sha1>
    </revision>
  </page>
  <page>
    <title>Module:URL</title>
    <ns>828</ns>
    <id>23</id>
    <revision>
      <id>28</id>
      <timestamp>2023-08-20T14:46:43Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "-- -- This module implements {{URL}} -- -- See unit tests at [[Module:URL/testcases]]  local p = {}   local function safeUri(s) 	local success, uri = pcall(function() 		return mw.uri.new(s) 	end) 	if success then 		return uri 	end end  local function extractUrl(args) 	for name, val in pairs(args) do 		if name ~= 2 and name ~= "msg" then 			local url = name .. "=" .. val; 			url = mw.ustring.gsub(url, '^[Hh][Tt][Tt][Pp]([Ss]?):(/?)([^/])', 'http%1://%3') 			local uri = sa..."</comment>
      <origin>28</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="4153" sha1="gixxb57tc26pz8o8bkotc73wlgavvuj" xml:space="preserve">--
-- This module implements {{URL}}
--
-- See unit tests at [[Module:URL/testcases]]

local p = {}
 
local function safeUri(s)
	local success, uri = pcall(function()
		return mw.uri.new(s)
	end)
	if success then
		return uri
	end
end

local function extractUrl(args)
	for name, val in pairs(args) do
		if name ~= 2 and name ~= "msg" then
			local url = name .. "=" .. val;
			url = mw.ustring.gsub(url, '^[Hh][Tt][Tt][Pp]([Ss]?):(/?)([^/])', 'http%1://%3')
			local uri = safeUri(url);
			if uri and uri.host then
				return url
			end
		end
	end
end

function p._url(url, text, msg)
	url = mw.text.trim(url or '')
	text = mw.text.trim(text or '')
	local nomsg = (msg or ''):sub(1,1):lower() == "n" or msg == 'false' -- boolean: true if msg is "false" or starts with n or N

	if url == '' then
		if text == '' then
			if nomsg then
				return nil
			else
				return mw.getCurrentFrame():expandTemplate{ title = 'tlx', args = { 'URL', "''example.com''", "''optional display text''" } }
			end
		else
			return text
		end
	end

	-- If the URL contains any unencoded spaces, encode them, because MediaWiki will otherwise interpret a space as the end of the URL.
	url = mw.ustring.gsub(url, '%s', function(s) return mw.uri.encode(s, 'PATH') end)

	-- If there is an empty query string or fragment id, remove it as it will cause mw.uri.new to throw an error
	url = mw.ustring.gsub(url, '#$', '')
	url = mw.ustring.gsub(url, '%?$', '')

	-- If it's an HTTP[S] URL without the double slash, fix it.
	url = mw.ustring.gsub(url, '^[Hh][Tt][Tt][Pp]([Ss]?):(/?)([^/])', 'http%1://%3')

	local uri = safeUri(url)

	-- Handle URL's without a protocol and URL's that are protocol-relative, 
	-- e.g. www.example.com/foo or www.example.com:8080/foo, and //www.example.com/foo
	if uri and (not uri.protocol or (uri.protocol and not uri.host)) and url:sub(1, 2) ~= '//' then
		url = 'http://' .. url
		uri = safeUri(url)
	end

	if text == '' then
		if uri then
			if uri.path == '/' then uri.path = '' end

			local port = ''
			if uri.port then port = ':' .. uri.port end

			text = mw.ustring.lower(uri.host or '') .. port .. (uri.relativePath or '')

			-- Add &lt;wbr&gt; before _/.-# sequences
			text = mw.ustring.gsub(text,"(/+)","&lt;wbr/&gt;%1")      -- This entry MUST be the first. "&lt;wbr/&gt;" has a "/" in it, you know.
			text = mw.ustring.gsub(text,"(%.+)","&lt;wbr/&gt;%1")
			-- text = mw.ustring.gsub(text,"(%-+)","&lt;wbr/&gt;%1") 	-- DISABLED for now
			text = mw.ustring.gsub(text,"(%#+)","&lt;wbr/&gt;%1")
			text = mw.ustring.gsub(text,"(_+)","&lt;wbr/&gt;%1")
		else -- URL is badly-formed, so just display whatever was passed in
			text = url
		end
	end

	return mw.ustring.format('&lt;span class="url"&gt;[%s %s]&lt;/span&gt;', url, text)
end

--[[
The main entry point for calling from Template:URL.
--]]
function p.url(frame)
	local templateArgs = frame.args
	local parentArgs = frame:getParent().args
	local url = templateArgs[1] or parentArgs[1]
	local text = templateArgs[2] or parentArgs[2] or ''
	local msg = templateArgs.msg or parentArgs.msg or ''
	url = url or extractUrl(templateArgs) or extractUrl(parentArgs) or ''
	return p._url(url, text, msg)
end

--[[
The entry point for calling from the forked Template:URL2.
This function returns no message by default.
It strips out wiki-link markup, html tags, and everything after a space.
--]]
function p.url2(frame)
	local templateArgs = frame.args
	local parentArgs = frame:getParent().args
	local url = templateArgs[1] or parentArgs[1]
	local text = templateArgs[2] or parentArgs[2] or ''
	-- default to no message
	local msg = templateArgs.msg or parentArgs.msg or 'no'
	url = url or extractUrl(templateArgs) or extractUrl(parentArgs) or ''
	-- if the url came from a Wikidata call, it might have a pen icon appended
	-- we want to keep that and add it back at the end.
	local u1, penicon = mw.ustring.match( url, "(.*)(&amp;nbsp;&lt;span class='penicon.*)" )
	if penicon then url = u1 end
	-- strip out html tags and [ ] from url
	url = (url or ''):gsub("&lt;[^&gt;]*&gt;", ""):gsub("[%[%]]", "")
	-- truncate anything after a space
	url = url:gsub("%%20", " "):gsub(" .*", "")
	return (p._url(url, text, msg) or "") .. (penicon or "")
end

return p</text>
      <sha1>gixxb57tc26pz8o8bkotc73wlgavvuj</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Plainlist</title>
    <ns>10</ns>
    <id>24</id>
    <revision>
      <id>29</id>
      <timestamp>2023-08-20T14:49:51Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "&lt;templatestyles src="Plainlist/styles.css"/&gt;&lt;div class="plainlist {{{class|}}}" {{#if:{{{style|}}}{{{indent|}}}|style="{{#if:{{{indent|}}}|margin-left: {{#expr:{{{indent}}}*1.6}}em;}} {{{style|}}}"}}&gt;{{#if:{{{1|}}}| {{{1}}} &lt;/div&gt;}}&lt;noinclude&gt;&lt;/div&gt; {{documentation}} &lt;/noinclude&gt;"</comment>
      <origin>29</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="280" sha1="aauem8fvp0apfdx4hoaa24a9q951cds" xml:space="preserve">&lt;templatestyles src="Plainlist/styles.css"/&gt;&lt;div class="plainlist {{{class|}}}" {{#if:{{{style|}}}{{{indent|}}}|style="{{#if:{{{indent|}}}|margin-left: {{#expr:{{{indent}}}*1.6}}em;}} {{{style|}}}"}}&gt;{{#if:{{{1|}}}|
{{{1}}}
&lt;/div&gt;}}&lt;noinclude&gt;&lt;/div&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>aauem8fvp0apfdx4hoaa24a9q951cds</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Plainlist/styles.css</title>
    <ns>10</ns>
    <id>25</id>
    <revision>
      <id>30</id>
      <timestamp>2023-08-20T14:51:16Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "/* {{pp-template|small=yes}} */ .plainlist ol, .plainlist ul { 	line-height: inherit; 	list-style: none; 	margin: 0; 	padding: 0; /* Reset Minerva default */ }  .plainlist ol li, .plainlist ul li { 	margin-bottom: 0; }"</comment>
      <origin>30</origin>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text bytes="218" sha1="9iguthb0t8w7c89r3am2dbgv55d4w1c" xml:space="preserve">/* {{pp-template|small=yes}} */
.plainlist ol,
.plainlist ul {
	line-height: inherit;
	list-style: none;
	margin: 0;
	padding: 0; /* Reset Minerva default */
}

.plainlist ol li,
.plainlist ul li {
	margin-bottom: 0;
}</text>
      <sha1>9iguthb0t8w7c89r3am2dbgv55d4w1c</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Start date and age</title>
    <ns>10</ns>
    <id>26</id>
    <revision>
      <id>31</id>
      <timestamp>2023-08-20T14:54:08Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "&lt;includeonly&gt;&lt;!--       IMPLEMENTATION OF DATE  --&gt;{{#if: {{{1|}}}&lt;!--   --&gt;|{{#if: {{{2|}}}&lt;!--      --&gt;|{{#if: {{{3|}}}&lt;!--         --&gt;|{{#ifeq:{{yesno|{{{df|no}}}}}|yes&lt;!--            --&gt;|{{#expr:{{{3}}}}}&amp;nbsp;{{MONTHNAME|{{{2}}}}}&lt;!--            --&gt;|{{MONTHNAME|{{{2}}}}}&amp;nbsp;{{#expr:{{{3}a}}}},&lt;!--            --&gt;}} {{{1}}}&lt;!--         --&gt;|{{MONTHNAME|{{{2}}}}}&amp;nbsp;{{{1}}}&lt;!--         --&gt;}}&lt;!--      --&gt;|{{{1}}}&lt;!--      --&gt;}}&lt;!--      --&gt;&lt;span class="noprint"&gt;{{#if..."</comment>
      <origin>31</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1876" sha1="0d6qpc52oum8m8hpk2j8tfc3lbocazy" xml:space="preserve">&lt;includeonly&gt;&lt;!--

     IMPLEMENTATION OF DATE

--&gt;{{#if: {{{1|}}}&lt;!--
  --&gt;|{{#if: {{{2|}}}&lt;!--
     --&gt;|{{#if: {{{3|}}}&lt;!--
        --&gt;|{{#ifeq:{{yesno|{{{df|no}}}}}|yes&lt;!--
           --&gt;|{{#expr:{{{3}}}}}&amp;nbsp;{{MONTHNAME|{{{2}}}}}&lt;!--
           --&gt;|{{MONTHNAME|{{{2}}}}}&amp;nbsp;{{#expr:{{{3}a}}}},&lt;!--
           --&gt;}} {{{1}}}&lt;!--
        --&gt;|{{MONTHNAME|{{{2}}}}}&amp;nbsp;{{{1}}}&lt;!--
        --&gt;}}&lt;!--
     --&gt;|{{{1}}}&lt;!--
     --&gt;}}&lt;!--
     --&gt;&lt;span class="noprint"&gt;{{#ifeq:{{yesno|{{{paren|{{{p|no}}}}}}}}|yes||&amp;#059;}}&lt;!--
     --&gt;{{#ifeq:{{yesno|{{{br|no}}}}}|yes|&lt;br/&gt;|&amp;#032;}}&lt;!--
     --&gt;{{#ifeq:{{yesno|{{{paren|{{{p|no}}}}}}}}|yes|(}}&lt;!--
     --&gt;{{#if: {{{2|}}}&lt;!--
       --&gt;|{{#if: {{{3|}}}&lt;!--
          --&gt;|{{time ago|{{{1}}}-{{{2}}}-{{{3}}}|min_magnitude=days}}&lt;!--
          --&gt;|{{years or months ago|{{{1}}}|{{#time:n|1-{{trim|{{{2}}}}}-1}}}}&lt;!--
          --&gt;}}&lt;!--
       --&gt;|{{#iferror:{{#expr:{{{1}}}}}&lt;!--
          --&gt;|{{time ago|{{{1}}}|min_magnitude=days}}&lt;!--
          --&gt;|{{years or months ago|{{{1}}}}}&lt;!--
          --&gt;}}&lt;!--
       --&gt;}}&lt;!--
     --&gt;{{#ifeq:{{yesno|{{{paren|{{{p|no}}}}}}}}|yes|)}}&lt;/span&gt;&lt;!--
  --&gt;|&lt;!--first parameter is missing.--&gt;{{#if: {{{2|}}}|{{Error|Error: first parameter is missing.|tag=span}}&lt;!--
                                    --&gt;|{{#if: {{{3|}}}|{{Error|Error: first parameter is missing.|tag=span}} }} }}&lt;!--
--&gt;}}&lt;!--

     IMPLEMENTATION OF microformat date classes

--&gt;&lt;span style="display:none"&gt;&amp;#160;(&lt;span class="{{#ifeq:{{yesno|{{{end|no}}}}}|yes|dtend|bday dtstart published updated}}"&gt;&lt;!--
--&gt;{{#if: {{{1|}}}&lt;!--
  --&gt;|{{{1}}}&lt;!--
   --&gt;{{#if: {{{2|}}}&lt;!--
     --&gt;| -{{#time:m|1-{{trim|{{{2}}}}}-1}}&lt;!--
       --&gt;{{#if: {{{3|}}}&lt;!--
         --&gt;| -{{padleft:{{{3}}}|2|0}}&lt;!--
         --&gt;}}&lt;!--
     --&gt;}}&lt;!--
  --&gt;}}&lt;!--
--&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>0d6qpc52oum8m8hpk2j8tfc3lbocazy</sha1>
    </revision>
    <revision>
      <id>37</id>
      <parentid>31</parentid>
      <timestamp>2023-08-20T15:09:01Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <origin>37</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1875" sha1="10rgyk9zmehgbypadang1wa3rwwkugp" xml:space="preserve">&lt;includeonly&gt;&lt;!--

     IMPLEMENTATION OF DATE

--&gt;{{#if: {{{1|}}}&lt;!--
  --&gt;|{{#if: {{{2|}}}&lt;!--
     --&gt;|{{#if: {{{3|}}}&lt;!--
        --&gt;|{{#ifeq:{{yesno|{{{df|no}}}}}|yes&lt;!--
           --&gt;|{{#expr:{{{3}}}}}&amp;nbsp;{{MONTHNAME|{{{2}}}}}&lt;!--
           --&gt;|{{MONTHNAME|{{{2}}}}}&amp;nbsp;{{#expr:{{{3}}}}},&lt;!--
           --&gt;}} {{{1}}}&lt;!--
        --&gt;|{{MONTHNAME|{{{2}}}}}&amp;nbsp;{{{1}}}&lt;!--
        --&gt;}}&lt;!--
     --&gt;|{{{1}}}&lt;!--
     --&gt;}}&lt;!--
     --&gt;&lt;span class="noprint"&gt;{{#ifeq:{{yesno|{{{paren|{{{p|no}}}}}}}}|yes||&amp;#059;}}&lt;!--
     --&gt;{{#ifeq:{{yesno|{{{br|no}}}}}|yes|&lt;br/&gt;|&amp;#032;}}&lt;!--
     --&gt;{{#ifeq:{{yesno|{{{paren|{{{p|no}}}}}}}}|yes|(}}&lt;!--
     --&gt;{{#if: {{{2|}}}&lt;!--
       --&gt;|{{#if: {{{3|}}}&lt;!--
          --&gt;|{{time ago|{{{1}}}-{{{2}}}-{{{3}}}|min_magnitude=days}}&lt;!--
          --&gt;|{{years or months ago|{{{1}}}|{{#time:n|1-{{trim|{{{2}}}}}-1}}}}&lt;!--
          --&gt;}}&lt;!--
       --&gt;|{{#iferror:{{#expr:{{{1}}}}}&lt;!--
          --&gt;|{{time ago|{{{1}}}|min_magnitude=days}}&lt;!--
          --&gt;|{{years or months ago|{{{1}}}}}&lt;!--
          --&gt;}}&lt;!--
       --&gt;}}&lt;!--
     --&gt;{{#ifeq:{{yesno|{{{paren|{{{p|no}}}}}}}}|yes|)}}&lt;/span&gt;&lt;!--
  --&gt;|&lt;!--first parameter is missing.--&gt;{{#if: {{{2|}}}|{{Error|Error: first parameter is missing.|tag=span}}&lt;!--
                                    --&gt;|{{#if: {{{3|}}}|{{Error|Error: first parameter is missing.|tag=span}} }} }}&lt;!--
--&gt;}}&lt;!--

     IMPLEMENTATION OF microformat date classes

--&gt;&lt;span style="display:none"&gt;&amp;#160;(&lt;span class="{{#ifeq:{{yesno|{{{end|no}}}}}|yes|dtend|bday dtstart published updated}}"&gt;&lt;!--
--&gt;{{#if: {{{1|}}}&lt;!--
  --&gt;|{{{1}}}&lt;!--
   --&gt;{{#if: {{{2|}}}&lt;!--
     --&gt;| -{{#time:m|1-{{trim|{{{2}}}}}-1}}&lt;!--
       --&gt;{{#if: {{{3|}}}&lt;!--
         --&gt;| -{{padleft:{{{3}}}|2|0}}&lt;!--
         --&gt;}}&lt;!--
     --&gt;}}&lt;!--
  --&gt;}}&lt;!--
--&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>10rgyk9zmehgbypadang1wa3rwwkugp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:MONTHNAME</title>
    <ns>10</ns>
    <id>27</id>
    <revision>
      <id>32</id>
      <timestamp>2023-08-20T14:56:01Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "&lt;includeonly&gt;{{#if:{{{1|}}}|{{#switch:{{MONTHNUMBER|{{{1}}}}}|1=January|2=February|3=March|4=April|5=May|6=June|7=July|8=August|9=September|10=October|11=November|12=December|Incorrect required parameter 1=''month''!}}|Missing required parameter 1=''month''!}}&lt;/includeonly&gt;&lt;noinclude&gt;  {{Documentation}} &lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt; &lt;/noinclude&gt;"</comment>
      <origin>32</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="387" sha1="4cf5sge5nt8b4gwjre9u8yifa3kstt2" xml:space="preserve">&lt;includeonly&gt;{{#if:{{{1|}}}|{{#switch:{{MONTHNUMBER|{{{1}}}}}|1=January|2=February|3=March|4=April|5=May|6=June|7=July|8=August|9=September|10=October|11=November|12=December|Incorrect required parameter 1=''month''!}}|Missing required parameter 1=''month''!}}&lt;/includeonly&gt;&lt;noinclude&gt;

{{Documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>4cf5sge5nt8b4gwjre9u8yifa3kstt2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Time ago</title>
    <ns>10</ns>
    <id>28</id>
    <revision>
      <id>33</id>
      <timestamp>2023-08-20T14:57:55Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "{{#invoke:Time ago|main}}&lt;noinclude&gt; {{documentation}} &lt;!-- Categories go in the /doc subpage and interwikis go in Wikidata. --&gt; &lt;/noinclude&gt;"</comment>
      <origin>33</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="141" sha1="mzprrwbd409g2cer41ys035v9oay1od" xml:space="preserve">{{#invoke:Time ago|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go in the /doc subpage and interwikis go in Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>mzprrwbd409g2cer41ys035v9oay1od</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Time ago</title>
    <ns>828</ns>
    <id>29</id>
    <revision>
      <id>34</id>
      <timestamp>2023-08-20T14:58:55Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "-- Implement [[Template:Time ago]]  local numberSpell, yesno  -- lazy load  function numberSpell(arg) 	numberSpell = require('Module:NumberSpell')._main 	return numberSpell(arg) end  function yesno(arg) 	yesno = require('Module:Yesno') 	return yesno(arg) end  local p = {}  -- Table to convert entered text values to numeric values. local timeText = { 	['seconds'] = 1, 	['minutes'] = 60, 	['hours'] = 3600, 	['days'] = 86400, 	['weeks'] = 604800, 	['months'] = 2629800,  --..."</comment>
      <origin>34</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="5112" sha1="owi7m6sdgrso49bzrq9mha9ire8l3cs" xml:space="preserve">-- Implement [[Template:Time ago]]

local numberSpell, yesno  -- lazy load

function numberSpell(arg)
	numberSpell = require('Module:NumberSpell')._main
	return numberSpell(arg)
end

function yesno(arg)
	yesno = require('Module:Yesno')
	return yesno(arg)
end

local p = {}

-- Table to convert entered text values to numeric values.
local timeText = {
	['seconds'] = 1,
	['minutes'] = 60,
	['hours'] = 3600,
	['days'] = 86400,
	['weeks'] = 604800,
	['months'] = 2629800,  -- 365.25 * 24 * 60 * 60 / 12
	['years'] = 31557600
}

-- Table containing tables of possible units to use in output.
local timeUnits = {
	[1] = { 'second', 'seconds', "second's", "seconds'" },
	[60] = { 'minute', 'minutes', "minutes'", "minutes'" },
	[3600] = { 'hour', 'hours', "hour's", "hours'" },
	[86400] = { 'day', 'days', "day's", "days'" },
	[604800] = { 'week', 'weeks', "week's", "weeks'", unit = 'w' },
	[2629800] = { 'month', 'months', "month's", "months'", unit = 'm'  },
	[31557600] = { 'year', 'years', "year's", "years'", unit = 'y'  }
}

function p._main( args )
	-- Initialize variables
	local lang = mw.language.getContentLanguage()
	local auto_magnitude_num
	local min_magnitude_num
	local magnitude = args.magnitude
	local min_magnitude = args.min_magnitude
	local purge = args.purge

	-- Add a purge link if something (usually "yes") is entered into the purge parameter
	if purge then
		purge = ' &lt;span class="plainlinks"&gt;([' .. mw.title.getCurrentTitle():fullUrl('action=purge') .. ' purge])&lt;/span&gt;'
	else
		purge = ''
	end

	-- Check that the entered timestamp is valid. If it isn't, then give an error message.
	local success, inputTime = pcall( lang.formatDate, lang, 'xnU', args[1] )
	if not success then
		return '&lt;strong class="error"&gt;Error: first parameter cannot be parsed as a date or time.&lt;/strong&gt;'
	end

	-- Store the difference between the current time and the inputted time, as well as its absolute value.
	local timeDiff = lang:formatDate( 'xnU' ) - inputTime
	local absTimeDiff = math.abs( timeDiff )

	if magnitude then
		auto_magnitude_num = 0
		min_magnitude_num = timeText[magnitude]
	else
		-- Calculate the appropriate unit of time if it was not specified as an argument.
		local autoMagnitudeData = {
			{ factor = 2, amn = 31557600 },
			{ factor = 2, amn = 2629800 },
			{ factor = 2, amn = 86400 },
			{ factor = 2, amn = 3600 },
			{ factor = 2, amn = 60 }
		}
		for _, t in ipairs( autoMagnitudeData ) do
			if absTimeDiff / t.amn &gt;= t.factor then
				auto_magnitude_num = t.amn
				break
			end
		end
		auto_magnitude_num = auto_magnitude_num or 1
		if min_magnitude then
			min_magnitude_num = timeText[min_magnitude]
		else
			min_magnitude_num = -1
		end
	end

	if not min_magnitude_num then
		-- Default to seconds if an invalid magnitude is entered.
		min_magnitude_num = 1
	end

	local result_num
	local magnitude_num = math.max( min_magnitude_num, auto_magnitude_num )
	local unit = timeUnits[magnitude_num].unit
	if unit and absTimeDiff &gt;= 864000 then
		local Date = require('Module:Date')._Date
		local input = lang:formatDate('Y-m-d H:i:s', args[1])  -- Date needs a clean date
		input = Date(input)
		if input then
			local id
			if input.hour == 0 and input.minute == 0 then
				id = 'currentdate'
			else
				id = 'currentdatetime'
			end
			result_num = (Date(id) - input):age(unit)
		end
	end
	result_num = result_num or math.floor ( absTimeDiff / magnitude_num )

	local punctuation_key, suffix
	if timeDiff &gt;= 0 then -- Past
		if result_num == 1 then
			punctuation_key = 1
		else
			punctuation_key = 2
		end
		if args.ago == '' then
			suffix = ''
		else
			suffix = ' ' .. (args.ago or 'ago')
		end
	else -- Future
		if args.ago == '' then
			suffix = ''
			if result_num == 1 then
				punctuation_key = 1
			else
				punctuation_key = 2
			end
		else
			suffix = ' time'
			if result_num == 1 then
				punctuation_key = 3
			else
				punctuation_key = 4
			end
		end
	end
	local result_unit = timeUnits[ magnitude_num ][ punctuation_key ]

	-- Convert numerals to words if appropriate.
	local spell_out = args.spellout
	local spell_out_max = tonumber(args.spelloutmax)
	local result_num_text
	if spell_out and (
		( spell_out == 'auto' and 1 &lt;= result_num and result_num &lt;= 9 and result_num &lt;= ( spell_out_max or 9 ) ) or
		( yesno( spell_out ) and 1 &lt;= result_num and result_num &lt;= 100 and result_num &lt;= ( spell_out_max or 100 ) )
		)
	then
		result_num_text = numberSpell( result_num )
	else
		result_num_text = tostring( result_num )
	end
	
	-- numeric or string
	local numeric_out = args.numeric
	local result = ""
	if numeric_out then
		result = tostring( result_num )
	else
		result = result_num_text .. ' ' .. result_unit .. suffix -- Spaces for suffix have been added in earlier.
	end

	return result .. purge
end

function p.main( frame )
	local args = require( 'Module:Arguments' ).getArgs( frame, {
		valueFunc = function( k, v )
			if v then
				v = v:match( '^%s*(.-)%s*$' ) -- Trim whitespace.
				if k == 'ago' or v ~= '' then
					return v
				end
			end
			return nil
		end,
		wrappers = 'Template:Time ago'
	})
	return p._main( args )
end

return p</text>
      <sha1>owi7m6sdgrso49bzrq9mha9ire8l3cs</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Arguments</title>
    <ns>828</ns>
    <id>30</id>
    <revision>
      <id>35</id>
      <timestamp>2023-08-20T15:00:43Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "-- This module provides easy processing of arguments passed to Scribunto from -- #invoke. It is intended for use by other Lua modules, and should not be -- called from #invoke directly.  local libraryUtil = require('libraryUtil') local checkType = libraryUtil.checkType  local arguments = {}  -- Generate four different tidyVal functions, so that we don't have to check the -- options every time we call it.  local function tidyValDefault(key, val) 	if type(val) == 'string'..."</comment>
      <origin>35</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="10054" sha1="5qx9tzlul9ser30uxj9nbasjt92cevn" xml:space="preserve">-- This module provides easy processing of arguments passed to Scribunto from
-- #invoke. It is intended for use by other Lua modules, and should not be
-- called from #invoke directly.

local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType

local arguments = {}

-- Generate four different tidyVal functions, so that we don't have to check the
-- options every time we call it.

local function tidyValDefault(key, val)
	if type(val) == 'string' then
		val = val:match('^%s*(.-)%s*$')
		if val == '' then
			return nil
		else
			return val
		end
	else
		return val
	end
end

local function tidyValTrimOnly(key, val)
	if type(val) == 'string' then
		return val:match('^%s*(.-)%s*$')
	else
		return val
	end
end

local function tidyValRemoveBlanksOnly(key, val)
	if type(val) == 'string' then
		if val:find('%S') then
			return val
		else
			return nil
		end
	else
		return val
	end
end

local function tidyValNoChange(key, val)
	return val
end

local function matchesTitle(given, title)
	local tp = type( given )
	return (tp == 'string' or tp == 'number') and mw.title.new( given ).prefixedText == title
end

local translate_mt = { __index = function(t, k) return k end }

function arguments.getArgs(frame, options)
	checkType('getArgs', 1, frame, 'table', true)
	checkType('getArgs', 2, options, 'table', true)
	frame = frame or {}
	options = options or {}

	--[[
	-- Set up argument translation.
	--]]
	options.translate = options.translate or {}
	if getmetatable(options.translate) == nil then
		setmetatable(options.translate, translate_mt)
	end
	if options.backtranslate == nil then
		options.backtranslate = {}
		for k,v in pairs(options.translate) do
			options.backtranslate[v] = k
		end
	end
	if options.backtranslate and getmetatable(options.backtranslate) == nil then
		setmetatable(options.backtranslate, {
			__index = function(t, k)
				if options.translate[k] ~= k then
					return nil
				else
					return k
				end
			end
		})
	end

	--[[
	-- Get the argument tables. If we were passed a valid frame object, get the
	-- frame arguments (fargs) and the parent frame arguments (pargs), depending
	-- on the options set and on the parent frame's availability. If we weren't
	-- passed a valid frame object, we are being called from another Lua module
	-- or from the debug console, so assume that we were passed a table of args
	-- directly, and assign it to a new variable (luaArgs).
	--]]
	local fargs, pargs, luaArgs
	if type(frame.args) == 'table' and type(frame.getParent) == 'function' then
		if options.wrappers then
			--[[
			-- The wrappers option makes Module:Arguments look up arguments in
			-- either the frame argument table or the parent argument table, but
			-- not both. This means that users can use either the #invoke syntax
			-- or a wrapper template without the loss of performance associated
			-- with looking arguments up in both the frame and the parent frame.
			-- Module:Arguments will look up arguments in the parent frame
			-- if it finds the parent frame's title in options.wrapper;
			-- otherwise it will look up arguments in the frame object passed
			-- to getArgs.
			--]]
			local parent = frame:getParent()
			if not parent then
				fargs = frame.args
			else
				local title = parent:getTitle():gsub('/sandbox$', '')
				local found = false
				if matchesTitle(options.wrappers, title) then
					found = true
				elseif type(options.wrappers) == 'table' then
					for _,v in pairs(options.wrappers) do
						if matchesTitle(v, title) then
							found = true
							break
						end
					end
				end

				-- We test for false specifically here so that nil (the default) acts like true.
				if found or options.frameOnly == false then
					pargs = parent.args
				end
				if not found or options.parentOnly == false then
					fargs = frame.args
				end
			end
		else
			-- options.wrapper isn't set, so check the other options.
			if not options.parentOnly then
				fargs = frame.args
			end
			if not options.frameOnly then
				local parent = frame:getParent()
				pargs = parent and parent.args or nil
			end
		end
		if options.parentFirst then
			fargs, pargs = pargs, fargs
		end
	else
		luaArgs = frame
	end

	-- Set the order of precedence of the argument tables. If the variables are
	-- nil, nothing will be added to the table, which is how we avoid clashes
	-- between the frame/parent args and the Lua args.
	local argTables = {fargs}
	argTables[#argTables + 1] = pargs
	argTables[#argTables + 1] = luaArgs

	--[[
	-- Generate the tidyVal function. If it has been specified by the user, we
	-- use that; if not, we choose one of four functions depending on the
	-- options chosen. This is so that we don't have to call the options table
	-- every time the function is called.
	--]]
	local tidyVal = options.valueFunc
	if tidyVal then
		if type(tidyVal) ~= 'function' then
			error(
				"bad value assigned to option 'valueFunc'"
					.. '(function expected, got '
					.. type(tidyVal)
					.. ')',
				2
			)
		end
	elseif options.trim ~= false then
		if options.removeBlanks ~= false then
			tidyVal = tidyValDefault
		else
			tidyVal = tidyValTrimOnly
		end
	else
		if options.removeBlanks ~= false then
			tidyVal = tidyValRemoveBlanksOnly
		else
			tidyVal = tidyValNoChange
		end
	end

	--[[
	-- Set up the args, metaArgs and nilArgs tables. args will be the one
	-- accessed from functions, and metaArgs will hold the actual arguments. Nil
	-- arguments are memoized in nilArgs, and the metatable connects all of them
	-- together.
	--]]
	local args, metaArgs, nilArgs, metatable = {}, {}, {}, {}
	setmetatable(args, metatable)

	local function mergeArgs(tables)
		--[[
		-- Accepts multiple tables as input and merges their keys and values
		-- into one table. If a value is already present it is not overwritten;
		-- tables listed earlier have precedence. We are also memoizing nil
		-- values, which can be overwritten if they are 's' (soft).
		--]]
		for _, t in ipairs(tables) do
			for key, val in pairs(t) do
				if metaArgs[key] == nil and nilArgs[key] ~= 'h' then
					local tidiedVal = tidyVal(key, val)
					if tidiedVal == nil then
						nilArgs[key] = 's'
					else
						metaArgs[key] = tidiedVal
					end
				end
			end
		end
	end

	--[[
	-- Define metatable behaviour. Arguments are memoized in the metaArgs table,
	-- and are only fetched from the argument tables once. Fetching arguments
	-- from the argument tables is the most resource-intensive step in this
	-- module, so we try and avoid it where possible. For this reason, nil
	-- arguments are also memoized, in the nilArgs table. Also, we keep a record
	-- in the metatable of when pairs and ipairs have been called, so we do not
	-- run pairs and ipairs on the argument tables more than once. We also do
	-- not run ipairs on fargs and pargs if pairs has already been run, as all
	-- the arguments will already have been copied over.
	--]]

	metatable.__index = function (t, key)
		--[[
		-- Fetches an argument when the args table is indexed. First we check
		-- to see if the value is memoized, and if not we try and fetch it from
		-- the argument tables. When we check memoization, we need to check
		-- metaArgs before nilArgs, as both can be non-nil at the same time.
		-- If the argument is not present in metaArgs, we also check whether
		-- pairs has been run yet. If pairs has already been run, we return nil.
		-- This is because all the arguments will have already been copied into
		-- metaArgs by the mergeArgs function, meaning that any other arguments
		-- must be nil.
		--]]
		if type(key) == 'string' then
			key = options.translate[key]
		end
		local val = metaArgs[key]
		if val ~= nil then
			return val
		elseif metatable.donePairs or nilArgs[key] then
			return nil
		end
		for _, argTable in ipairs(argTables) do
			local argTableVal = tidyVal(key, argTable[key])
			if argTableVal ~= nil then
				metaArgs[key] = argTableVal
				return argTableVal
			end
		end
		nilArgs[key] = 'h'
		return nil
	end

	metatable.__newindex = function (t, key, val)
		-- This function is called when a module tries to add a new value to the
		-- args table, or tries to change an existing value.
		if type(key) == 'string' then
			key = options.translate[key]
		end
		if options.readOnly then
			error(
				'could not write to argument table key "'
					.. tostring(key)
					.. '"; the table is read-only',
				2
			)
		elseif options.noOverwrite and args[key] ~= nil then
			error(
				'could not write to argument table key "'
					.. tostring(key)
					.. '"; overwriting existing arguments is not permitted',
				2
			)
		elseif val == nil then
			--[[
			-- If the argument is to be overwritten with nil, we need to erase
			-- the value in metaArgs, so that __index, __pairs and __ipairs do
			-- not use a previous existing value, if present; and we also need
			-- to memoize the nil in nilArgs, so that the value isn't looked
			-- up in the argument tables if it is accessed again.
			--]]
			metaArgs[key] = nil
			nilArgs[key] = 'h'
		else
			metaArgs[key] = val
		end
	end

	local function translatenext(invariant)
		local k, v = next(invariant.t, invariant.k)
		invariant.k = k
		if k == nil then
			return nil
		elseif type(k) ~= 'string' or not options.backtranslate then
			return k, v
		else
			local backtranslate = options.backtranslate[k]
			if backtranslate == nil then
				-- Skip this one. This is a tail call, so this won't cause stack overflow
				return translatenext(invariant)
			else
				return backtranslate, v
			end
		end
	end

	metatable.__pairs = function ()
		-- Called when pairs is run on the args table.
		if not metatable.donePairs then
			mergeArgs(argTables)
			metatable.donePairs = true
		end
		return translatenext, { t = metaArgs }
	end

	local function inext(t, i)
		-- This uses our __index metamethod
		local v = t[i + 1]
		if v ~= nil then
			return i + 1, v
		end
	end

	metatable.__ipairs = function (t)
		-- Called when ipairs is run on the args table.
		return inext, t, 0
	end

	return args
end

return arguments</text>
      <sha1>5qx9tzlul9ser30uxj9nbasjt92cevn</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Date</title>
    <ns>828</ns>
    <id>31</id>
    <revision>
      <id>36</id>
      <timestamp>2023-08-20T15:02:41Z</timestamp>
      <contributor>
        <ip>172.22.0.1</ip>
      </contributor>
      <comment>Created page with "-- Date functions for use by other modules. -- I18N and time zones are not supported.  local MINUS = '−'  -- Unicode U+2212 MINUS SIGN local floor = math.floor  local Date, DateDiff, diffmt  -- forward declarations local uniq = { 'unique identifier' }  local function is_date(t) 	-- The system used to make a date read-only means there is no unique 	-- metatable that is conveniently accessible to check. 	return type(t) == 'table' and t._id == uniq end  local function is_..."</comment>
      <origin>36</origin>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="47959" sha1="8htfjg7cmqlbgysia559pe52c5tetp5" xml:space="preserve">-- Date functions for use by other modules.
-- I18N and time zones are not supported.

local MINUS = '−'  -- Unicode U+2212 MINUS SIGN
local floor = math.floor

local Date, DateDiff, diffmt  -- forward declarations
local uniq = { 'unique identifier' }

local function is_date(t)
	-- The system used to make a date read-only means there is no unique
	-- metatable that is conveniently accessible to check.
	return type(t) == 'table' and t._id == uniq
end

local function is_diff(t)
	return type(t) == 'table' and getmetatable(t) == diffmt
end

local function _list_join(list, sep)
	return table.concat(list, sep)
end

local function collection()
	-- Return a table to hold items.
	return {
		n = 0,
		add = function (self, item)
			self.n = self.n + 1
			self[self.n] = item
		end,
		join = _list_join,
	}
end

local function strip_to_nil(text)
	-- If text is a string, return its trimmed content, or nil if empty.
	-- Otherwise return text (convenient when Date fields are provided from
	-- another module which may pass a string, a number, or another type).
	if type(text) == 'string' then
		text = text:match('(%S.-)%s*$')
	end
	return text
end

local function is_leap_year(year, calname)
	-- Return true if year is a leap year.
	if calname == 'Julian' then
		return year % 4 == 0
	end
	return (year % 4 == 0 and year % 100 ~= 0) or year % 400 == 0
end

local function days_in_month(year, month, calname)
	-- Return number of days (1..31) in given month (1..12).
	if month == 2 and is_leap_year(year, calname) then
		return 29
	end
	return ({ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 })[month]
end

local function h_m_s(time)
	-- Return hour, minute, second extracted from fraction of a day.
	time = floor(time * 24 * 3600 + 0.5)  -- number of seconds
	local second = time % 60
	time = floor(time / 60)
	return floor(time / 60), time % 60, second
end

local function hms(date)
	-- Return fraction of a day from date's time, where (0 &lt;= fraction &lt; 1)
	-- if the values are valid, but could be anything if outside range.
	return (date.hour + (date.minute + date.second / 60) / 60) / 24
end

local function julian_date(date)
	-- Return jd, jdz from a Julian or Gregorian calendar date where
	--   jd = Julian date and its fractional part is zero at noon
	--   jdz = same, but assume time is 00:00:00 if no time given
	-- http://www.tondering.dk/claus/cal/julperiod.php#formula
	-- Testing shows this works for all dates from year -9999 to 9999!
	-- JDN 0 is the 24-hour period starting at noon UTC on Monday
	--    1 January 4713 BC  = (-4712, 1, 1)   Julian calendar
	--   24 November 4714 BC = (-4713, 11, 24) Gregorian calendar
	local offset
	local a = floor((14 - date.month)/12)
	local y = date.year + 4800 - a
	if date.calendar == 'Julian' then
		offset = floor(y/4) - 32083
	else
		offset = floor(y/4) - floor(y/100) + floor(y/400) - 32045
	end
	local m = date.month + 12*a - 3
	local jd = date.day + floor((153*m + 2)/5) + 365*y + offset
	if date.hastime then
		jd = jd + hms(date) - 0.5
		return jd, jd
	end
	return jd, jd - 0.5
end

local function set_date_from_jd(date)
	-- Set the fields of table date from its Julian date field.
	-- Return true if date is valid.
	-- http://www.tondering.dk/claus/cal/julperiod.php#formula
	-- This handles the proleptic Julian and Gregorian calendars.
	-- Negative Julian dates are not defined but they work.
	local calname = date.calendar
	local low, high  -- min/max limits for date ranges −9999-01-01 to 9999-12-31
	if calname == 'Gregorian' then
		low, high = -1930999.5, 5373484.49999
	elseif calname == 'Julian' then
		low, high = -1931076.5, 5373557.49999
	else
		return
	end
	local jd = date.jd
	if not (type(jd) == 'number' and low &lt;= jd and jd &lt;= high) then
		return
	end
	local jdn = floor(jd)
	if date.hastime then
		local time = jd - jdn  -- 0 &lt;= time &lt; 1
		if time &gt;= 0.5 then    -- if at or after midnight of next day
			jdn = jdn + 1
			time = time - 0.5
		else
			time = time + 0.5
		end
		date.hour, date.minute, date.second = h_m_s(time)
	else
		date.second = 0
		date.minute = 0
		date.hour = 0
	end
	local b, c
	if calname == 'Julian' then
		b = 0
		c = jdn + 32082
	else  -- Gregorian
		local a = jdn + 32044
		b = floor((4*a + 3)/146097)
		c = a - floor(146097*b/4)
	end
	local d = floor((4*c + 3)/1461)
	local e = c - floor(1461*d/4)
	local m = floor((5*e + 2)/153)
	date.day = e - floor((153*m + 2)/5) + 1
	date.month = m + 3 - 12*floor(m/10)
	date.year = 100*b + d - 4800 + floor(m/10)
	return true
end

local function fix_numbers(numbers, y, m, d, H, M, S, partial, hastime, calendar)
	-- Put the result of normalizing the given values in table numbers.
	-- The result will have valid m, d values if y is valid; caller checks y.
	-- The logic of PHP mktime is followed where m or d can be zero to mean
	-- the previous unit, and -1 is the one before that, etc.
	-- Positive values carry forward.
	local date
	if not (1 &lt;= m and m &lt;= 12) then
		date = Date(y, 1, 1)
		if not date then return end
		date = date + ((m - 1) .. 'm')
		y, m = date.year, date.month
	end
	local days_hms
	if not partial then
		if hastime and H and M and S then
			if not (0 &lt;= H and H &lt;= 23 and
					0 &lt;= M and M &lt;= 59 and
					0 &lt;= S and S &lt;= 59) then
				days_hms = hms({ hour = H, minute = M, second = S })
			end
		end
		if days_hms or not (1 &lt;= d and d &lt;= days_in_month(y, m, calendar)) then
			date = date or Date(y, m, 1)
			if not date then return end
			date = date + (d - 1 + (days_hms or 0))
			y, m, d = date.year, date.month, date.day
			if days_hms then
				H, M, S = date.hour, date.minute, date.second
			end
		end
	end
	numbers.year = y
	numbers.month = m
	numbers.day = d
	if days_hms then
		-- Don't set H unless it was valid because a valid H will set hastime.
		numbers.hour = H
		numbers.minute = M
		numbers.second = S
	end
end

local function set_date_from_numbers(date, numbers, options)
	-- Set the fields of table date from numeric values.
	-- Return true if date is valid.
	if type(numbers) ~= 'table' then
		return
	end
	local y = numbers.year   or date.year
	local m = numbers.month  or date.month
	local d = numbers.day    or date.day
	local H = numbers.hour
	local M = numbers.minute or date.minute or 0
	local S = numbers.second or date.second or 0
	local need_fix
	if y and m and d then
		date.partial = nil
		if not (-9999 &lt;= y and y &lt;= 9999 and
			1 &lt;= m and m &lt;= 12 and
			1 &lt;= d and d &lt;= days_in_month(y, m, date.calendar)) then
				if not date.want_fix then
					return
				end
				need_fix = true
		end
	elseif y and date.partial then
		if d or not (-9999 &lt;= y and y &lt;= 9999) then
			return
		end
		if m and not (1 &lt;= m and m &lt;= 12) then
			if not date.want_fix then
				return
			end
			need_fix = true
		end
	else
		return
	end
	if date.partial then
		H = nil  -- ignore any time
		M = nil
		S = nil
	else
		if H then
			-- It is not possible to set M or S without also setting H.
			date.hastime = true
		else
			H = 0
		end
		if not (0 &lt;= H and H &lt;= 23 and
				0 &lt;= M and M &lt;= 59 and
				0 &lt;= S and S &lt;= 59) then
			if date.want_fix then
				need_fix = true
			else
				return
			end
		end
	end
	date.want_fix = nil
	if need_fix then
		fix_numbers(numbers, y, m, d, H, M, S, date.partial, date.hastime, date.calendar)
		return set_date_from_numbers(date, numbers, options)
	end
	date.year = y    -- -9999 to 9999 ('n BC' → year = 1 - n)
	date.month = m   -- 1 to 12 (may be nil if partial)
	date.day = d     -- 1 to 31 (* = nil if partial)
	date.hour = H    -- 0 to 59 (*)
	date.minute = M  -- 0 to 59 (*)
	date.second = S  -- 0 to 59 (*)
	if type(options) == 'table' then
		for _, k in ipairs({ 'am', 'era', 'format' }) do
			if options[k] then
				date.options[k] = options[k]
			end
		end
	end
	return true
end

local function make_option_table(options1, options2)
	-- If options1 is a string, return a table with its settings, or
	-- if it is a table, use its settings.
	-- Missing options are set from table options2 or defaults.
	-- If a default is used, a flag is set so caller knows the value was not intentionally set.
	-- Valid option settings are:
	-- am: 'am', 'a.m.', 'AM', 'A.M.'
	--     'pm', 'p.m.', 'PM', 'P.M.' (each has same meaning as corresponding item above)
	-- era: 'BCMINUS', 'BCNEGATIVE', 'BC', 'B.C.', 'BCE', 'B.C.E.', 'AD', 'A.D.', 'CE', 'C.E.'
	-- Option am = 'am' does not mean the hour is AM; it means 'am' or 'pm' is used, depending on the hour,
	--    and am = 'pm' has the same meaning.
	-- Similarly, era = 'BC' means 'BC' is used if year &lt;= 0.
	-- BCMINUS displays a MINUS if year &lt; 0 and the display format does not include %{era}.
	-- BCNEGATIVE is similar but displays a hyphen.
	local result = { bydefault = {} }
	if type(options1) == 'table' then
		result.am = options1.am
		result.era = options1.era
	elseif type(options1) == 'string' then
		-- Example: 'am:AM era:BC' or 'am=AM era=BC'.
		for item in options1:gmatch('%S+') do
			local lhs, rhs = item:match('^(%w+)[:=](.+)$')
			if lhs then
				result[lhs] = rhs
			end
		end
	end
	options2 = type(options2) == 'table' and options2 or {}
	local defaults = { am = 'am', era = 'BC' }
	for k, v in pairs(defaults) do
		if not result[k] then
			if options2[k] then
				result[k] = options2[k]
			else
				result[k] = v
				result.bydefault[k] = true
			end
		end
	end
	return result
end

local ampm_options = {
	-- lhs = input text accepted as an am/pm option
	-- rhs = code used internally
	['am']   = 'am',
	['AM']   = 'AM',
	['a.m.'] = 'a.m.',
	['A.M.'] = 'A.M.',
	['pm']   = 'am',  -- same as am
	['PM']   = 'AM',
	['p.m.'] = 'a.m.',
	['P.M.'] = 'A.M.',
}

local era_text = {
	-- Text for displaying an era with a positive year (after adjusting
	-- by replacing year with 1 - year if date.year &lt;= 0).
	-- options.era = { year&lt;=0 , year&gt;0 }
	['BCMINUS']    = { 'BC'    , ''    , isbc = true, sign = MINUS },
	['BCNEGATIVE'] = { 'BC'    , ''    , isbc = true, sign = '-'   },
	['BC']         = { 'BC'    , ''    , isbc = true },
	['B.C.']       = { 'B.C.'  , ''    , isbc = true },
	['BCE']        = { 'BCE'   , ''    , isbc = true },
	['B.C.E.']     = { 'B.C.E.', ''    , isbc = true },
	['AD']         = { 'BC'    , 'AD'   },
	['A.D.']       = { 'B.C.'  , 'A.D.' },
	['CE']         = { 'BCE'   , 'CE'   },
	['C.E.']       = { 'B.C.E.', 'C.E.' },
}

local function get_era_for_year(era, year)
	return (era_text[era] or era_text['BC'])[year &gt; 0 and 2 or 1] or ''
end

local function strftime(date, format, options)
	-- Return date formatted as a string using codes similar to those
	-- in the C strftime library function.
	local sformat = string.format
	local shortcuts = {
		['%c'] = '%-I:%M %p %-d %B %-Y %{era}',  -- date and time: 2:30 pm 1 April 2016
		['%x'] = '%-d %B %-Y %{era}',            -- date:          1 April 2016
		['%X'] = '%-I:%M %p',                    -- time:          2:30 pm
	}
	if shortcuts[format] then
		format = shortcuts[format]
	end
	local codes = {
		a = { field = 'dayabbr' },
		A = { field = 'dayname' },
		b = { field = 'monthabbr' },
		B = { field = 'monthname' },
		u = { fmt = '%d'  , field = 'dowiso' },
		w = { fmt = '%d'  , field = 'dow' },
		d = { fmt = '%02d', fmt2 = '%d', field = 'day' },
		m = { fmt = '%02d', fmt2 = '%d', field = 'month' },
		Y = { fmt = '%04d', fmt2 = '%d', field = 'year' },
		H = { fmt = '%02d', fmt2 = '%d', field = 'hour' },
		M = { fmt = '%02d', fmt2 = '%d', field = 'minute' },
		S = { fmt = '%02d', fmt2 = '%d', field = 'second' },
		j = { fmt = '%03d', fmt2 = '%d', field = 'dayofyear' },
		I = { fmt = '%02d', fmt2 = '%d', field = 'hour', special = 'hour12' },
		p = { field = 'hour', special = 'am' },
	}
	options = make_option_table(options, date.options)
	local amopt = options.am
	local eraopt = options.era
	local function replace_code(spaces, modifier, id)
		local code = codes[id]
		if code then
			local fmt = code.fmt
			if modifier == '-' and code.fmt2 then
				fmt = code.fmt2
			end
			local value = date[code.field]
			if not value then
				return nil  -- an undefined field in a partial date
			end
			local special = code.special
			if special then
				if special == 'hour12' then
					value = value % 12
					value = value == 0 and 12 or value
				elseif special == 'am' then
					local ap = ({
						['a.m.'] = { 'a.m.', 'p.m.' },
						['AM'] = { 'AM', 'PM' },
						['A.M.'] = { 'A.M.', 'P.M.' },
					})[ampm_options[amopt]] or { 'am', 'pm' }
					return (spaces == '' and '' or '&amp;nbsp;') .. (value &lt; 12 and ap[1] or ap[2])
				end
			end
			if code.field == 'year' then
				local sign = (era_text[eraopt] or {}).sign
				if not sign or format:find('%{era}', 1, true) then
					sign = ''
					if value &lt;= 0 then
						value = 1 - value
					end
				else
					if value &gt;= 0 then
						sign = ''
					else
						value = -value
					end
				end
				return spaces .. sign .. sformat(fmt, value)
			end
			return spaces .. (fmt and sformat(fmt, value) or value)
		end
	end
	local function replace_property(spaces, id)
		if id == 'era' then
			-- Special case so can use local era option.
			local result = get_era_for_year(eraopt, date.year)
			if result == '' then
				return ''
			end
			return (spaces == '' and '' or '&amp;nbsp;') .. result
		end
		local result = date[id]
		if type(result) == 'string' then
			return spaces .. result
		end
		if type(result) == 'number' then
			return  spaces .. tostring(result)
		end
		if type(result) == 'boolean' then
			return  spaces .. (result and '1' or '0')
		end
		-- This occurs if id is an undefined field in a partial date, or is the name of a function.
		return nil
	end
	local PERCENT = '\127PERCENT\127'
	return (format
		:gsub('%%%%', PERCENT)
		:gsub('(%s*)%%{(%w+)}', replace_property)
		:gsub('(%s*)%%(%-?)(%a)', replace_code)
		:gsub(PERCENT, '%%')
	)
end

local function _date_text(date, fmt, options)
	-- Return a formatted string representing the given date.
	if not is_date(date) then
		error('date:text: need a date (use "date:text()" with a colon)', 2)
	end
	if type(fmt) == 'string' and fmt:match('%S') then
		if fmt:find('%', 1, true) then
			return strftime(date, fmt, options)
		end
	elseif date.partial then
		fmt = date.month and 'my' or 'y'
	else
		fmt = 'dmy'
		if date.hastime then
			fmt = (date.second &gt; 0 and 'hms ' or 'hm ') .. fmt
		end
	end
	local function bad_format()
		-- For consistency with other format processing, return given format
		-- (or cleaned format if original was not a string) if invalid.
		return mw.text.nowiki(fmt)
	end
	if date.partial then
		-- Ignore days in standard formats like 'ymd'.
		if fmt == 'ym' or fmt == 'ymd' then
			fmt = date.month and '%Y-%m %{era}' or '%Y %{era}'
		elseif fmt == 'my' or fmt == 'dmy' or fmt == 'mdy' then
			fmt = date.month and '%B %-Y %{era}' or '%-Y %{era}'
		elseif fmt == 'y' then
			fmt = date.month and '%-Y %{era}' or '%-Y %{era}'
		else
			return bad_format()
		end
		return strftime(date, fmt, options)
	end
	local function hm_fmt()
		local plain = make_option_table(options, date.options).bydefault.am
		return plain and '%H:%M' or '%-I:%M %p'
	end
	local need_time = date.hastime
	local t = collection()
	for item in fmt:gmatch('%S+') do
		local f
		if item == 'hm' then
			f = hm_fmt()
			need_time = false
		elseif item == 'hms' then
			f = '%H:%M:%S'
			need_time = false
		elseif item == 'ymd' then
			f = '%Y-%m-%d %{era}'
		elseif item == 'mdy' then
			f = '%B %-d, %-Y %{era}'
		elseif item == 'dmy' then
			f = '%-d %B %-Y %{era}'
		else
			return bad_format()
		end
		t:add(f)
	end
	fmt = t:join(' ')
	if need_time then
		fmt = hm_fmt() .. ' ' .. fmt
	end
	return strftime(date, fmt, options)
end

local day_info = {
	-- 0=Sun to 6=Sat
	[0] = { 'Sun', 'Sunday' },
	{ 'Mon', 'Monday' },
	{ 'Tue', 'Tuesday' },
	{ 'Wed', 'Wednesday' },
	{ 'Thu', 'Thursday' },
	{ 'Fri', 'Friday' },
	{ 'Sat', 'Saturday' },
}

local month_info = {
	-- 1=Jan to 12=Dec
	{ 'Jan', 'January' },
	{ 'Feb', 'February' },
	{ 'Mar', 'March' },
	{ 'Apr', 'April' },
	{ 'May', 'May' },
	{ 'Jun', 'June' },
	{ 'Jul', 'July' },
	{ 'Aug', 'August' },
	{ 'Sep', 'September' },
	{ 'Oct', 'October' },
	{ 'Nov', 'November' },
	{ 'Dec', 'December' },
}

local function name_to_number(text, translate)
	if type(text) == 'string' then
		return translate[text:lower()]
	end
end

local function day_number(text)
	return name_to_number(text, {
		sun = 0, sunday = 0,
		mon = 1, monday = 1,
		tue = 2, tuesday = 2,
		wed = 3, wednesday = 3,
		thu = 4, thursday = 4,
		fri = 5, friday = 5,
		sat = 6, saturday = 6,
	})
end

local function month_number(text)
	return name_to_number(text, {
		jan = 1, january = 1,
		feb = 2, february = 2,
		mar = 3, march = 3,
		apr = 4, april = 4,
		may = 5,
		jun = 6, june = 6,
		jul = 7, july = 7,
		aug = 8, august = 8,
		sep = 9, september = 9, sept = 9,
		oct = 10, october = 10,
		nov = 11, november = 11,
		dec = 12, december = 12,
	})
end

local function _list_text(list, fmt)
	-- Return a list of formatted strings from a list of dates.
	if not type(list) == 'table' then
		error('date:list:text: need "list:text()" with a colon', 2)
	end
	local result = { join = _list_join }
	for i, date in ipairs(list) do
		result[i] = date:text(fmt)
	end
	return result
end

local function _date_list(date, spec)
	-- Return a possibly empty numbered table of dates meeting the specification.
	-- Dates in the list are in ascending order (oldest date first).
	-- The spec should be a string of form "&lt;count&gt; &lt;day&gt; &lt;op&gt;"
	-- where each item is optional and
	--   count = number of items wanted in list
	--   day = abbreviation or name such as Mon or Monday
	--   op = &gt;, &gt;=, &lt;, &lt;= (default is &gt; meaning after date)
	-- If no count is given, the list is for the specified days in date's month.
	-- The default day is date's day.
	-- The spec can also be a positive or negative number:
	--   -5 is equivalent to '5 &lt;'
	--   5  is equivalent to '5' which is '5 &gt;'
	if not is_date(date) then
		error('date:list: need a date (use "date:list()" with a colon)', 2)
	end
	local list = { text = _list_text }
	if date.partial then
		return list
	end
	local count, offset, operation
	local ops = {
		['&gt;='] = { before = false, include = true  },
		['&gt;']  = { before = false, include = false },
		['&lt;='] = { before = true , include = true  },
		['&lt;']  = { before = true , include = false },
	}
	if spec then
		if type(spec) == 'number' then
			count = floor(spec + 0.5)
			if count &lt; 0 then
				count = -count
				operation = ops['&lt;']
			end
		elseif type(spec) == 'string' then
			local num, day, op = spec:match('^%s*(%d*)%s*(%a*)%s*([&lt;&gt;=]*)%s*$')
			if not num then
				return list
			end
			if num ~= '' then
				count = tonumber(num)
			end
			if day ~= '' then
				local dow = day_number(day:gsub('[sS]$', ''))  -- accept plural days
				if not dow then
					return list
				end
				offset = dow - date.dow
			end
			operation = ops[op]
		else
			return list
		end
	end
	offset = offset or 0
	operation = operation or ops['&gt;']
	local datefrom, dayfirst, daylast
	if operation.before then
		if offset &gt; 0 or (offset == 0 and not operation.include) then
			offset = offset - 7
		end
		if count then
			if count &gt; 1 then
				offset = offset - 7*(count - 1)
			end
			datefrom = date + offset
		else
			daylast = date.day + offset
			dayfirst = daylast % 7
			if dayfirst == 0 then
				dayfirst = 7
			end
		end
	else
		if offset &lt; 0 or (offset == 0 and not operation.include) then
			offset = offset + 7
		end
		if count then
			datefrom = date + offset
		else
			dayfirst = date.day + offset
			daylast = date.monthdays
		end
	end
	if not count then
		if daylast &lt; dayfirst then
			return list
		end
		count = floor((daylast - dayfirst)/7) + 1
		datefrom = Date(date, {day = dayfirst})
	end
	for i = 1, count do
		if not datefrom then break end  -- exceeds date limits
		list[i] = datefrom
		datefrom = datefrom + 7
	end
	return list
end

-- A table to get the current date/time (UTC), but only if needed.
local current = setmetatable({}, {
	__index = function (self, key)
		local d = os.date('!*t')
		self.year = d.year
		self.month = d.month
		self.day = d.day
		self.hour = d.hour
		self.minute = d.min
		self.second = d.sec
		return rawget(self, key)
	end })

local function extract_date(newdate, text)
	-- Parse the date/time in text and return n, o where
	--   n = table of numbers with date/time fields
	--   o = table of options for AM/PM or AD/BC or format, if any
	-- or return nothing if date is known to be invalid.
	-- Caller determines if the values in n are valid.
	-- A year must be positive ('1' to '9999'); use 'BC' for BC.
	-- In a y-m-d string, the year must be four digits to avoid ambiguity
	-- ('0001' to '9999'). The only way to enter year &lt;= 0 is by specifying
	-- the date as three numeric parameters like ymd Date(-1, 1, 1).
	-- Dates of form d/m/y, m/d/y, y/m/d are rejected as potentially ambiguous.
	local date, options = {}, {}
	if text:sub(-1) == 'Z' then
		-- Extract date/time from a Wikidata timestamp.
		-- The year can be 1 to 16 digits but this module handles 1 to 4 digits only.
		-- Examples: '+2016-06-21T14:30:00Z', '-0000000180-00-00T00:00:00Z'.
		local sign, y, m, d, H, M, S = text:match('^([+%-])(%d+)%-(%d%d)%-(%d%d)T(%d%d):(%d%d):(%d%d)Z$')
		if sign then
			y = tonumber(y)
			if sign == '-' and y &gt; 0 then
				y = -y
			end
			if y &lt;= 0 then
				options.era = 'BCE'
			end
			date.year = y
			m = tonumber(m)
			d = tonumber(d)
			H = tonumber(H)
			M = tonumber(M)
			S = tonumber(S)
			if m == 0 then
				newdate.partial = true
				return date, options
			end
			date.month = m
			if d == 0 then
				newdate.partial = true
				return date, options
			end
			date.day = d
			if H &gt; 0 or M &gt; 0 or S &gt; 0 then
				date.hour = H
				date.minute = M
				date.second = S
			end
			return date, options
		end
		return
	end
	local function extract_ymd(item)
		-- Called when no day or month has been set.
		local y, m, d = item:match('^(%d%d%d%d)%-(%w+)%-(%d%d?)$')
		if y then
			if date.year then
				return
			end
			if m:match('^%d%d?$') then
				m = tonumber(m)
			else
				m = month_number(m)
			end
			if m then
				date.year = tonumber(y)
				date.month = m
				date.day = tonumber(d)
				return true
			end
		end
	end
	local function extract_day_or_year(item)
		-- Called when a day would be valid, or
		-- when a year would be valid if no year has been set and partial is set.
		local number, suffix = item:match('^(%d%d?%d?%d?)(.*)$')
		if number then
			local n = tonumber(number)
			if #number &lt;= 2 and n &lt;= 31 then
				suffix = suffix:lower()
				if suffix == '' or suffix == 'st' or suffix == 'nd' or suffix == 'rd' or suffix == 'th' then
					date.day = n
					return true
				end
			elseif suffix == '' and newdate.partial and not date.year then
				date.year = n
				return true
			end
		end
	end
	local function extract_month(item)
		-- A month must be given as a name or abbreviation; a number could be ambiguous.
		local m = month_number(item)
		if m then
			date.month = m
			return true
		end
	end
	local function extract_time(item)
		local h, m, s = item:match('^(%d%d?):(%d%d)(:?%d*)$')
		if date.hour or not h then
			return
		end
		if s ~= '' then
			s = s:match('^:(%d%d)$')
			if not s then
				return
			end
		end
		date.hour = tonumber(h)
		date.minute = tonumber(m)
		date.second = tonumber(s)  -- nil if empty string
		return true
	end
	local item_count = 0
	local index_time
	local function set_ampm(item)
		local H = date.hour
		if H and not options.am and index_time + 1 == item_count then
			options.am = ampm_options[item]  -- caller checked this is not nil
			if item:match('^[Aa]') then
				if not (1 &lt;= H and H &lt;= 12) then
					return
				end
				if H == 12 then
					date.hour = 0
				end
			else
				if not (1 &lt;= H and H &lt;= 23) then
					return
				end
				if H &lt;= 11 then
					date.hour = H + 12
				end
			end
			return true
		end
	end
	for item in text:gsub(',', ' '):gsub('&amp;nbsp;', ' '):gmatch('%S+') do
		item_count = item_count + 1
		if era_text[item] then
			-- Era is accepted in peculiar places.
			if options.era then
				return
			end
			options.era = item
		elseif ampm_options[item] then
			if not set_ampm(item) then
				return
			end
		elseif item:find(':', 1, true) then
			if not extract_time(item) then
				return
			end
			index_time = item_count
		elseif date.day and date.month then
			if date.year then
				return  -- should be nothing more so item is invalid
			end
			if not item:match('^(%d%d?%d?%d?)$') then
				return
			end
			date.year = tonumber(item)
		elseif date.day then
			if not extract_month(item) then
				return
			end
		elseif date.month then
			if not extract_day_or_year(item) then
				return
			end
		elseif extract_month(item) then
			options.format = 'mdy'
		elseif extract_ymd(item) then
			options.format = 'ymd'
		elseif extract_day_or_year(item) then
			if date.day then
				options.format = 'dmy'
			end
		else
			return
		end
	end
	if not date.year or date.year == 0 then
		return
	end
	local era = era_text[options.era]
	if era and era.isbc then
		date.year = 1 - date.year
	end
	return date, options
end

local function autofill(date1, date2)
	-- Fill any missing month or day in each date using the
	-- corresponding component from the other date, if present,
	-- or with 1 if both dates are missing the month or day.
	-- This gives a good result for calculating the difference
	-- between two partial dates when no range is wanted.
	-- Return filled date1, date2 (two full dates).
	local function filled(a, b)
		-- Return date a filled, if necessary, with month and/or day from date b.
		-- The filled day is truncated to fit the number of days in the month.
		local fillmonth, fillday
		if not a.month then
			fillmonth = b.month or 1
		end
		if not a.day then
			fillday = b.day or 1
		end
		if fillmonth or fillday then  -- need to create a new date
			a = Date(a, {
				month = fillmonth,
				day = math.min(fillday or a.day, days_in_month(a.year, fillmonth or a.month, a.calendar))
			})
		end
		return a
	end
	return filled(date1, date2), filled(date2, date1)
end

local function date_add_sub(lhs, rhs, is_sub)
	-- Return a new date from calculating (lhs + rhs) or (lhs - rhs),
	-- or return nothing if invalid.
	-- The result is nil if the calculated date exceeds allowable limits.
	-- Caller ensures that lhs is a date; its properties are copied for the new date.
	if lhs.partial then
		-- Adding to a partial is not supported.
		-- Can subtract a date or partial from a partial, but this is not called for that.
		return
	end
	local function is_prefix(text, word, minlen)
		local n = #text
		return (minlen or 1) &lt;= n and n &lt;= #word and text == word:sub(1, n)
	end
	local function do_days(n)
		local forcetime, jd
		if floor(n) == n then
			jd = lhs.jd
		else
			forcetime = not lhs.hastime
			jd = lhs.jdz
		end
		jd = jd + (is_sub and -n or n)
		if forcetime then
			jd = tostring(jd)
			if not jd:find('.', 1, true) then
				jd = jd .. '.0'
			end
		end
		return Date(lhs, 'juliandate', jd)
	end
	if type(rhs) == 'number' then
		-- Add/subtract days, including fractional days.
		return do_days(rhs)
	end
	if type(rhs) == 'string' then
		-- rhs is a single component like '26m' or '26 months' (with optional sign).
		-- Fractions like '3.25d' are accepted for the units which are handled as days.
		local sign, numstr, id = rhs:match('^%s*([+-]?)([%d%.]+)%s*(%a+)$')
		if sign then
			if sign == '-' then
				is_sub = not (is_sub and true or false)
			end
			local y, m, days
			local num = tonumber(numstr)
			if not num then
				return
			end
			id = id:lower()
			if is_prefix(id, 'years') then
				y = num
				m = 0
			elseif is_prefix(id, 'months') then
				y = floor(num / 12)
				m = num % 12
			elseif is_prefix(id, 'weeks') then
				days = num * 7
			elseif is_prefix(id, 'days') then
				days = num
			elseif is_prefix(id, 'hours') then
				days = num / 24
			elseif is_prefix(id, 'minutes', 3) then
				days = num / (24 * 60)
			elseif is_prefix(id, 'seconds') then
				days = num / (24 * 3600)
			else
				return
			end
			if days then
				return do_days(days)
			end
			if numstr:find('.', 1, true) then
				return
			end
			if is_sub then
				y = -y
				m = -m
			end
			assert(-11 &lt;= m and m &lt;= 11)
			y = lhs.year + y
			m = lhs.month + m
			if m &gt; 12 then
				y = y + 1
				m = m - 12
			elseif m &lt; 1 then
				y = y - 1
				m = m + 12
			end
			local d = math.min(lhs.day, days_in_month(y, m, lhs.calendar))
			return Date(lhs, y, m, d)
		end
	end
	if is_diff(rhs) then
		local days = rhs.age_days
		if (is_sub or false) ~= (rhs.isnegative or false) then
			days = -days
		end
		return lhs + days
	end
end

local full_date_only = {
	dayabbr = true,
	dayname = true,
	dow = true,
	dayofweek = true,
	dowiso = true,
	dayofweekiso = true,
	dayofyear = true,
	gsd = true,
	juliandate = true,
	jd = true,
	jdz = true,
	jdnoon = true,
}

-- Metatable for a date's calculated fields.
local datemt = {
	__index = function (self, key)
		if rawget(self, 'partial') then
			if full_date_only[key] then return end
			if key == 'monthabbr' or key == 'monthdays' or key == 'monthname' then
				if not self.month then return end
			end
		end
		local value
		if key == 'dayabbr' then
			value = day_info[self.dow][1]
		elseif key == 'dayname' then
			value = day_info[self.dow][2]
		elseif key == 'dow' then
			value = (self.jdnoon + 1) % 7  -- day-of-week 0=Sun to 6=Sat
		elseif key == 'dayofweek' then
			value = self.dow
		elseif key == 'dowiso' then
			value = (self.jdnoon % 7) + 1  -- ISO day-of-week 1=Mon to 7=Sun
		elseif key == 'dayofweekiso' then
			value = self.dowiso
		elseif key == 'dayofyear' then
			local first = Date(self.year, 1, 1, self.calendar).jdnoon
			value = self.jdnoon - first + 1  -- day-of-year 1 to 366
		elseif key == 'era' then
			-- Era text (never a negative sign) from year and options.
			value = get_era_for_year(self.options.era, self.year)
		elseif key == 'format' then
			value = self.options.format or 'dmy'
		elseif key == 'gsd' then
			-- GSD = 1 from 00:00:00 to 23:59:59 on 1 January 1 AD Gregorian calendar,
			-- which is from jd 1721425.5 to 1721426.49999.
			value = floor(self.jd - 1721424.5)
		elseif key == 'juliandate' or key == 'jd' or key == 'jdz' then
			local jd, jdz = julian_date(self)
			rawset(self, 'juliandate', jd)
			rawset(self, 'jd', jd)
			rawset(self, 'jdz', jdz)
			return key == 'jdz' and jdz or jd
		elseif key == 'jdnoon' then
			-- Julian date at noon (an integer) on the calendar day when jd occurs.
			value = floor(self.jd + 0.5)
		elseif key == 'isleapyear' then
			value = is_leap_year(self.year, self.calendar)
		elseif key == 'monthabbr' then
			value = month_info[self.month][1]
		elseif key == 'monthdays' then
			value = days_in_month(self.year, self.month, self.calendar)
		elseif key == 'monthname' then
			value = month_info[self.month][2]
		end
		if value ~= nil then
			rawset(self, key, value)
			return value
		end
	end,
}

-- Date operators.
local function mt_date_add(lhs, rhs)
	if not is_date(lhs) then
		lhs, rhs = rhs, lhs  -- put date on left (it must be a date for this to have been called)
	end
	return date_add_sub(lhs, rhs)
end

local function mt_date_sub(lhs, rhs)
	if is_date(lhs) then
		if is_date(rhs) then
			return DateDiff(lhs, rhs)
		end
		return date_add_sub(lhs, rhs, true)
	end
end

local function mt_date_concat(lhs, rhs)
	return tostring(lhs) .. tostring(rhs)
end

local function mt_date_tostring(self)
	return self:text()
end

local function mt_date_eq(lhs, rhs)
	-- Return true if dates identify same date/time where, for example,
	-- Date(-4712, 1, 1, 'Julian') == Date(-4713, 11, 24, 'Gregorian') is true.
	-- This is called only if lhs and rhs have the same type and the same metamethod.
	if lhs.partial or rhs.partial then
		-- One date is partial; the other is a partial or a full date.
		-- The months may both be nil, but must be the same.
		return lhs.year == rhs.year and lhs.month == rhs.month and lhs.calendar == rhs.calendar
	end
	return lhs.jdz == rhs.jdz
end

local function mt_date_lt(lhs, rhs)
	-- Return true if lhs &lt; rhs, for example,
	-- Date('1 Jan 2016') &lt; Date('06:00 1 Jan 2016') is true.
	-- This is called only if lhs and rhs have the same type and the same metamethod.
	if lhs.partial or rhs.partial then
		-- One date is partial; the other is a partial or a full date.
		if lhs.calendar ~= rhs.calendar then
			return lhs.calendar == 'Julian'
		end
		if lhs.partial then
			lhs = lhs.partial.first
		end
		if rhs.partial then
			rhs = rhs.partial.first
		end
	end
	return lhs.jdz &lt; rhs.jdz
end

--[[ Examples of syntax to construct a date:
Date(y, m, d, 'julian')             default calendar is 'gregorian'
Date(y, m, d, H, M, S, 'julian')
Date('juliandate', jd, 'julian')    if jd contains "." text output includes H:M:S
Date('currentdate')
Date('currentdatetime')
Date('1 April 1995', 'julian')      parse date from text
Date('1 April 1995 AD', 'julian')   using an era sets a flag to do the same for output
Date('04:30:59 1 April 1995', 'julian')
Date(date)                          copy of an existing date
Date(date, t)                       same, updated with y,m,d,H,M,S fields from table t
Date(t)                       		date with y,m,d,H,M,S fields from table t
]]
function Date(...)  -- for forward declaration above
	-- Return a table holding a date assuming a uniform calendar always applies
	-- (proleptic Gregorian calendar or proleptic Julian calendar), or
	-- return nothing if date is invalid.
	-- A partial date has a valid year, however its month may be nil, and
	-- its day and time fields are nil.
	-- Field partial is set to false (if a full date) or a table (if a partial date).
	local calendars = { julian = 'Julian', gregorian = 'Gregorian' }
	local newdate = {
		_id = uniq,
		calendar = 'Gregorian',  -- default is Gregorian calendar
		hastime = false,  -- true if input sets a time
		hour = 0,  -- always set hour/minute/second so don't have to handle nil
		minute = 0,
		second = 0,
		options = {},
		list = _date_list,
		subtract = function (self, rhs, options)
			return DateDiff(self, rhs, options)
		end,
		text = _date_text,
	}
	local argtype, datetext, is_copy, jd_number, tnums
	local numindex = 0
	local numfields = { 'year', 'month', 'day', 'hour', 'minute', 'second' }
	local numbers = {}
	for _, v in ipairs({...}) do
		v = strip_to_nil(v)
		local vlower = type(v) == 'string' and v:lower() or nil
		if v == nil then
			-- Ignore empty arguments after stripping so modules can directly pass template parameters.
		elseif calendars[vlower] then
			newdate.calendar = calendars[vlower]
		elseif vlower == 'partial' then
			newdate.partial = true
		elseif vlower == 'fix' then
			newdate.want_fix = true
		elseif is_date(v) then
			-- Copy existing date (items can be overridden by other arguments).
			if is_copy or tnums then
				return
			end
			is_copy = true
			newdate.calendar = v.calendar
			newdate.partial = v.partial
			newdate.hastime = v.hastime
			newdate.options = v.options
			newdate.year = v.year
			newdate.month = v.month
			newdate.day = v.day
			newdate.hour = v.hour
			newdate.minute = v.minute
			newdate.second = v.second
		elseif type(v) == 'table' then
			if tnums then
				return
			end
			tnums = {}
			local tfields = { year=1, month=1, day=1, hour=2, minute=2, second=2 }
			for tk, tv in pairs(v) do
				if tfields[tk] then
					tnums[tk] = tonumber(tv)
				end
				if tfields[tk] == 2 then
					newdate.hastime = true
				end
			end
		else
			local num = tonumber(v)
			if not num and argtype == 'setdate' and numindex == 1 then
				num = month_number(v)
			end
			if num then
				if not argtype then
					argtype = 'setdate'
				end
				if argtype == 'setdate' and numindex &lt; 6 then
					numindex = numindex + 1
					numbers[numfields[numindex]] = num
				elseif argtype == 'juliandate' and not jd_number then
					jd_number = num
					if type(v) == 'string' then
						if v:find('.', 1, true) then
							newdate.hastime = true
						end
					elseif num ~= floor(num) then
						-- The given value was a number. The time will be used
						-- if the fractional part is nonzero.
						newdate.hastime = true
					end
				else
					return
				end
			elseif argtype then
				return
			elseif type(v) == 'string' then
				if v == 'currentdate' or v == 'currentdatetime' or v == 'juliandate' then
					argtype = v
				else
					argtype = 'datetext'
					datetext = v
				end
			else
				return
			end
		end
	end
	if argtype == 'datetext' then
		if tnums or not set_date_from_numbers(newdate, extract_date(newdate, datetext)) then
			return
		end
	elseif argtype == 'juliandate' then
		newdate.partial = nil
		newdate.jd = jd_number
		if not set_date_from_jd(newdate) then
			return
		end
	elseif argtype == 'currentdate' or argtype == 'currentdatetime' then
		newdate.partial = nil
		newdate.year = current.year
		newdate.month = current.month
		newdate.day = current.day
		if argtype == 'currentdatetime' then
			newdate.hour = current.hour
			newdate.minute = current.minute
			newdate.second = current.second
			newdate.hastime = true
		end
		newdate.calendar = 'Gregorian'  -- ignore any given calendar name
	elseif argtype == 'setdate' then
		if tnums or not set_date_from_numbers(newdate, numbers) then
			return
		end
	elseif not (is_copy or tnums) then
		return
	end
	if tnums then
		newdate.jd = nil  -- force recalculation in case jd was set before changes from tnums
		if not set_date_from_numbers(newdate, tnums) then
			return
		end
	end
	if newdate.partial then
		local year = newdate.year
		local month = newdate.month
		local first = Date(year, month or 1, 1, newdate.calendar)
		month = month or 12
		local last = Date(year, month, days_in_month(year, month), newdate.calendar)
		newdate.partial = { first = first, last = last }
	else
		newdate.partial = false  -- avoid index lookup
	end
	setmetatable(newdate, datemt)
	local readonly = {}
	local mt = {
		__index = newdate,
		__newindex = function(t, k, v) error('date.' .. tostring(k) .. ' is read-only', 2) end,
		__add = mt_date_add,
		__sub = mt_date_sub,
		__concat = mt_date_concat,
		__tostring = mt_date_tostring,
		__eq = mt_date_eq,
		__lt = mt_date_lt,
	}
	return setmetatable(readonly, mt)
end

local function _diff_age(diff, code, options)
	-- Return a tuple of integer values from diff as specified by code, except that
	-- each integer may be a list of two integers for a diff with a partial date, or
	-- return nil if the code is not supported.
	-- If want round, the least significant unit is rounded to nearest whole unit.
	-- For a duration, an extra day is added.
	local wantround, wantduration, wantrange
	if type(options) == 'table' then
		wantround = options.round
		wantduration = options.duration
		wantrange = options.range
	else
		wantround = options
	end
	if not is_diff(diff) then
		local f = wantduration and 'duration' or 'age'
		error(f .. ': need a date difference (use "diff:' .. f .. '()" with a colon)', 2)
	end
	if diff.partial then
		-- Ignore wantround, wantduration.
		local function choose(v)
			if type(v) == 'table' then
				if not wantrange or v[1] == v[2] then
					-- Example: Date('partial', 2005) - Date('partial', 2001) gives
					-- diff.years = { 3, 4 } to show the range of possible results.
					-- If do not want a range, choose the second value as more expected.
					return v[2]
				end
			end
			return v
		end
		if code == 'ym' or code == 'ymd' then
			if not wantrange and diff.iszero then
				-- This avoids an unexpected result such as
				-- Date('partial', 2001) - Date('partial', 2001)
				-- giving diff = { years = 0, months = { 0, 11 } }
				-- which would be reported as 0 years and 11 months.
				return 0, 0
			end
			return choose(diff.partial.years), choose(diff.partial.months)
		end
		if code == 'y' then
			return choose(diff.partial.years)
		end
		if code == 'm' or code == 'w' or code == 'd' then
			return choose({ diff.partial.mindiff:age(code), diff.partial.maxdiff:age(code) })
		end
		return nil
	end
	local extra_days = wantduration and 1 or 0
	if code == 'wd' or code == 'w' or code == 'd' then
		local offset = wantround and 0.5 or 0
		local days = diff.age_days + extra_days
		if code == 'wd' or code == 'd' then
			days = floor(days + offset)
			if code == 'd' then
				return days
			end
			return floor(days/7), days % 7
		end
		return floor(days/7 + offset)
	end
	local H, M, S = diff.hours, diff.minutes, diff.seconds
	if code == 'dh' or code == 'dhm' or code == 'dhms' or code == 'h' or code == 'hm' or code == 'hms' or code == 'M' or code == 's' then
		local days = floor(diff.age_days + extra_days)
		local inc_hour
		if wantround then
			if code == 'dh' or code == 'h' then
				if M &gt;= 30 then
					inc_hour = true
				end
			elseif code == 'dhm' or code == 'hm' then
				if S &gt;= 30 then
					M = M + 1
					if M &gt;= 60 then
						M = 0
						inc_hour = true
					end
				end
			elseif code == 'M' then
				if S &gt;= 30 then
					M = M + 1
				end
			else
				-- Nothing needed because S is an integer.
			end
			if inc_hour then
				H = H + 1
				if H &gt;= 24 then
					H = 0
					days = days + 1
				end
			end
		end
		if code == 'dh' or code == 'dhm' or code == 'dhms' then
			if code == 'dh' then
				return days, H
			elseif code == 'dhm' then
				return days, H, M
			else
				return days, H, M, S
			end
		end
		local hours = days * 24 + H
		if code == 'h' then
			return hours
		elseif code == 'hm' then
			return hours, M
		elseif code == 'M' or code == 's' then
			M = hours * 60 + M
			if code == 'M' then
				return M
			end
			return M * 60 + S
		end
		return hours, M, S
	end
	if wantround then
		local inc_hour
		if code == 'ymdh' or code == 'ymwdh' then
			if M &gt;= 30 then
				inc_hour = true
			end
		elseif code == 'ymdhm' or code == 'ymwdhm' then
			if S &gt;= 30 then
				M = M + 1
				if M &gt;= 60 then
					M = 0
					inc_hour = true
				end
			end
		elseif code == 'ymd' or code == 'ymwd' or code == 'yd' or code == 'md' then
			if H &gt;= 12 then
				extra_days = extra_days + 1
			end
		end
		if inc_hour then
			H = H + 1
			if H &gt;= 24 then
				H = 0
				extra_days = extra_days + 1
			end
		end
	end
	local y, m, d = diff.years, diff.months, diff.days
	if extra_days &gt; 0 then
		d = d + extra_days
		if d &gt; 28 or code == 'yd' then
			-- Recalculate in case have passed a month.
			diff = diff.date1 + extra_days - diff.date2
			y, m, d = diff.years, diff.months, diff.days
		end
	end
	if code == 'ymd' then
		return y, m, d
	elseif code == 'yd' then
		if y &gt; 0 then
			-- It is known that diff.date1 &gt; diff.date2.
			diff = diff.date1 - (diff.date2 + (y .. 'y'))
		end
		return y, floor(diff.age_days)
	elseif code == 'md' then
		return y * 12 + m, d
	elseif code == 'ym' or code == 'm' then
		if wantround then
			if d &gt;= 16 then
				m = m + 1
				if m &gt;= 12 then
					m = 0
					y = y + 1
				end
			end
		end
		if code == 'ym' then
			return y, m
		end
		return y * 12 + m
	elseif code == 'ymw' then
		local weeks = floor(d/7)
		if wantround then
			local days = d % 7
			if days &gt; 3 or (days == 3 and H &gt;= 12) then
				weeks = weeks + 1
			end
		end
		return y, m, weeks
	elseif code == 'ymwd' then
		return y, m, floor(d/7), d % 7
	elseif code == 'ymdh' then
		return y, m, d, H
	elseif code == 'ymwdh' then
		return y, m, floor(d/7), d % 7, H
	elseif code == 'ymdhm' then
		return y, m, d, H, M
	elseif code == 'ymwdhm' then
		return y, m, floor(d/7), d % 7, H, M
	end
	if code == 'y' then
		if wantround and m &gt;= 6 then
			y = y + 1
		end
		return y
	end
	return nil
end

local function _diff_duration(diff, code, options)
	if type(options) ~= 'table' then
		options = { round = options }
	end
	options.duration = true
	return _diff_age(diff, code, options)
end

-- Metatable for some operations on date differences.
diffmt = {  -- for forward declaration above
	__concat = function (lhs, rhs)
		return tostring(lhs) .. tostring(rhs)
	end,
	__tostring = function (self)
		return tostring(self.age_days)
	end,
	__index = function (self, key)
		local value
		if key == 'age_days' then
			if rawget(self, 'partial') then
				local function jdz(date)
					return (date.partial and date.partial.first or date).jdz
				end
				value = jdz(self.date1) - jdz(self.date2)
			else
				value = self.date1.jdz - self.date2.jdz
			end
		end
		if value ~= nil then
			rawset(self, key, value)
			return value
		end
	end,
}

function DateDiff(date1, date2, options)  -- for forward declaration above
	-- Return a table with the difference between two dates (date1 - date2).
	-- The difference is negative if date1 is older than date2.
	-- Return nothing if invalid.
	-- If d = date1 - date2 then
	--     date1 = date2 + d
	-- If date1 &gt;= date2 and the dates have no H:M:S time specified then
	--     date1 = date2 + (d.years..'y') + (d.months..'m') + d.days
	-- where the larger time units are added first.
	-- The result of Date(2015,1,x) + '1m' is Date(2015,2,28) for
	-- x = 28, 29, 30, 31. That means, for example,
	--     d = Date(2015,3,3) - Date(2015,1,31)
	-- gives d.years, d.months, d.days = 0, 1, 3 (excluding date1).
	if not (is_date(date1) and is_date(date2) and date1.calendar == date2.calendar) then
		return
	end
	local wantfill
	if type(options) == 'table' then
		wantfill = options.fill
	end
	local isnegative = false
	local iszero = false
	if date1 &lt; date2 then
		isnegative = true
		date1, date2 = date2, date1
	elseif date1 == date2 then
		iszero = true
	end
	-- It is known that date1 &gt;= date2 (period is from date2 to date1).
	if date1.partial or date2.partial then
		-- Two partial dates might have timelines:
		---------------------A=================B--- date1 is from A to B inclusive
		--------C=======D-------------------------- date2 is from C to D inclusive
		-- date1 &gt; date2 iff A &gt; C (date1.partial.first &gt; date2.partial.first)
		-- The periods can overlap ('April 2001' - '2001'):
		-------------A===B------------------------- A=2001-04-01  B=2001-04-30
		--------C=====================D------------ C=2001-01-01  D=2001-12-31
		if wantfill then
			date1, date2 = autofill(date1, date2)
		else
			local function zdiff(date1, date2)
				local diff = date1 - date2
				if diff.isnegative then
					return date1 - date1  -- a valid diff in case we call its methods
				end
				return diff
			end
			local function getdate(date, which)
				return date.partial and date.partial[which] or date
			end
			local maxdiff = zdiff(getdate(date1, 'last'), getdate(date2, 'first'))
			local mindiff = zdiff(getdate(date1, 'first'), getdate(date2, 'last'))
			local years, months
			if maxdiff.years == mindiff.years then
				years = maxdiff.years
				if maxdiff.months == mindiff.months then
					months = maxdiff.months
				else
					months = { mindiff.months, maxdiff.months }
				end
			else
				years = { mindiff.years, maxdiff.years }
			end
			return setmetatable({
				date1 = date1,
				date2 = date2,
				partial = {
					years = years,
					months = months,
					maxdiff = maxdiff,
					mindiff = mindiff,
				},
				isnegative = isnegative,
				iszero = iszero,
				age = _diff_age,
				duration = _diff_duration,
			}, diffmt)
		end
	end
	local y1, m1 = date1.year, date1.month
	local y2, m2 = date2.year, date2.month
	local years = y1 - y2
	local months = m1 - m2
	local d1 = date1.day + hms(date1)
	local d2 = date2.day + hms(date2)
	local days, time
	if d1 &gt;= d2 then
		days = d1 - d2
	else
		months = months - 1
		-- Get days in previous month (before the "to" date) given December has 31 days.
		local dpm = m1 &gt; 1 and days_in_month(y1, m1 - 1, date1.calendar) or 31
		if d2 &gt;= dpm then
			days = d1 - hms(date2)
		else
			days = dpm - d2 + d1
		end
	end
	if months &lt; 0 then
		years = years - 1
		months = months + 12
	end
	days, time = math.modf(days)
	local H, M, S = h_m_s(time)
	return setmetatable({
		date1 = date1,
		date2 = date2,
		partial = false,  -- avoid index lookup
		years = years,
		months = months,
		days = days,
		hours = H,
		minutes = M,
		seconds = S,
		isnegative = isnegative,
		iszero = iszero,
		age = _diff_age,
		duration = _diff_duration,
	}, diffmt)
end

return {
	_current = current,
	_Date = Date,
	_days_in_month = days_in_month,
}</text>
      <sha1>8htfjg7cmqlbgysia559pe52c5tetp5</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite web</title>
    <ns>10</ns>
    <id>32</id>
    <revision>
      <id>38</id>
      <timestamp>2023-08-21T13:13:11Z</timestamp>
      <contributor>
        <ip>172.30.0.1</ip>
      </contributor>
      <comment>Created page with "&lt;includeonly&gt;{{#invoke:citation/CS1|citation |CitationClass=web }}&lt;/includeonly&gt;&lt;noinclude&gt; {{documentation}} &lt;/noinclude&gt;"</comment>
      <origin>38</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="122" sha1="rcgmbcxu7hvs583g1f3rzz4c4dkizda" xml:space="preserve">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=web
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>rcgmbcxu7hvs583g1f3rzz4c4dkizda</sha1>
    </revision>
  </page>
  <page>
    <title>MediaWiki:Common.css</title>
    <ns>8</ns>
    <id>33</id>
    <revision>
      <id>39</id>
      <timestamp>2023-08-21T14:51:19Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "/*  * This is the CSS common to all desktop skins on en.Wikipedia.  * Styling inside .mw-parser-output should generally use TemplateStyles.  */ /* Reset italic styling set by user agent */ cite, dfn { 	font-style: inherit; }  /* Straight quote marks for &lt;q&gt; */ q { 	quotes: '"' '"' "'" "'"; }  /* Avoid collision of blockquote with floating elements by swapping margin and padding */ blockquote { 	overflow: hidden; 	margin: 1em 0; 	padding: 0 40px; }  /* Consistent size for..."</comment>
      <origin>39</origin>
      <model>css</model>
      <format>text/css</format>
      <text bytes="10770" sha1="d1tcw18tlyefphyc7o8bpvyuv8xal5w" xml:space="preserve">/*
 * This is the CSS common to all desktop skins on en.Wikipedia.
 * Styling inside .mw-parser-output should generally use TemplateStyles.
 */
/* Reset italic styling set by user agent */
cite,
dfn {
	font-style: inherit;
}

/* Straight quote marks for &lt;q&gt; */
q {
	quotes: '"' '"' "'" "'";
}

/* Avoid collision of blockquote with floating elements by swapping margin and padding */
blockquote {
	overflow: hidden;
	margin: 1em 0;
	padding: 0 40px;
}

/* Consistent size for &lt;small&gt;, &lt;sub&gt; and &lt;sup&gt; */
small {
	font-size: 85%;
}

.mw-body-content sub,
.mw-body-content sup {
	font-size: 80%;
}

/* Same spacing for indented and unindented paragraphs on talk pages */
.ns-talk .mw-body-content dd {
	margin-top: 0.4em;
	margin-bottom: 0.4em;
}

/* Reduce page jumps by hiding collapsed/dismissed content */
.client-js .collapsible:not( .mw-made-collapsible).collapsed &gt; tbody &gt; tr:not(:first-child),

/* Avoid FOUC/reflows on collapsed elements. */
/* This copies MediaWiki's solution for T42812 to apply to innercollapse/outercollapse (T325115). */
/* TODO: Use :is() selector at some reasonable future when support is good for Most Clients */
/* Reference: https://gerrit.wikimedia.org/g/mediawiki/core/+/ecda06cb2aef55b77c4b4d7ecda492d634419ead/resources/src/jquery/jquery.makeCollapsible.styles.less#75 */
.client-js .outercollapse .innercollapse.mw-collapsible:not( .mw-made-collapsible ) &gt; p,
.client-js .outercollapse .innercollapse.mw-collapsible:not( .mw-made-collapsible ) &gt; table,
.client-js .outercollapse .innercollapse.mw-collapsible:not( .mw-made-collapsible ) &gt; thead + tbody,
.client-js .outercollapse .innercollapse.mw-collapsible:not( .mw-made-collapsible ) tr:not( :first-child ),
.client-js .outercollapse .innercollapse.mw-collapsible:not( .mw-made-collapsible ) .mw-collapsible-content,

/* Hide charinsert base for those not using the gadget */
#editpage-specialchars {
	display: none;
}

/* Make the list of references smaller
 * Keep in sync with Template:Refbegin/styles.css
 * And Template:Reflist/styles.css
 */
ol.references {
	font-size: 90%;
	margin-bottom: 0.5em;
}

/* Cite customizations for Parsoid
 * Once everything uses the one true parser these are just customizations
 */
span[ rel="mw:referencedBy" ] {
	counter-reset: mw-ref-linkback 0;
}

span[ rel='mw:referencedBy' ] &gt; a::before {
	content: counter( mw-ref-linkback, lower-alpha );
	font-size: 80%;
	font-weight: bold;
	font-style: italic;
}

a[ rel="mw:referencedBy" ]::before {
	font-weight: bold;
	content: "^";
}

span[ rel="mw:referencedBy" ]::before {
	content: "^ ";
}

.mw-ref &gt; a[data-mw-group=lower-alpha]::after {
	content: '[' counter( mw-Ref, lower-alpha ) ']';
}

.mw-ref &gt; a[data-mw-group=upper-alpha]::after {
	content: '[' counter( mw-Ref, upper-alpha ) ']';
}

.mw-ref &gt; a[data-mw-group=decimal]::after {
	content: '[' counter( mw-Ref, decimal ) ']';
}

.mw-ref &gt; a[data-mw-group=lower-roman]::after {
	content: '[' counter( mw-Ref, lower-roman ) ']';
}

.mw-ref &gt; a[data-mw-group=upper-roman]::after {
	content: '[' counter( mw-Ref, upper-roman ) ']';
}

.mw-ref &gt; a[data-mw-group=lower-greek]::after {
	content: '[' counter( mw-Ref, lower-greek ) ']';
}

/* Styling for jQuery makeCollapsible, matching that of collapseButton */
.mw-parser-output .mw-collapsible-toggle:not(.mw-ui-button) {
	font-weight: normal;
	padding-right: 0.2em;
	padding-left: 0.2em;
}

.mw-collapsible-leftside-toggle .mw-collapsible-toggle {
	/* @noflip */
	float: left;
}

/* Lists in wikitable data cells are always left-aligned */
.wikitable td ul,
.wikitable td ol,
.wikitable td dl {
	/* @noflip */
	text-align: left;
}

/* Change the external link icon to a PDF icon for all PDF files */
.mw-parser-output a[href$=".pdf"].external,
.mw-parser-output a[href*=".pdf?"].external,
.mw-parser-output a[href*=".pdf#"].external,
.mw-parser-output a[href$=".PDF"].external,
.mw-parser-output a[href*=".PDF?"].external,
.mw-parser-output a[href*=".PDF#"].external {
	background: url("//upload.wikimedia.org/wikipedia/commons/4/4d/Icon_pdf_file.png") no-repeat right;
	/* @noflip */
	padding: 8px 18px 8px 0;
}

/* System messages styled similarly to fmbox */
/* for .mw-warning-with-logexcerpt, behavior of this line differs between
 * the edit-protected notice and the special:Contribs for blocked users
 * The latter has specificity of 3 classes so we have to triple up here.
 */
.mw-warning-with-logexcerpt.mw-warning-with-logexcerpt.mw-warning-with-logexcerpt,
div.mw-lag-warn-high,
div.mw-cascadeprotectedwarning,
div#mw-protect-cascadeon {
	clear: both;
	margin: 0.2em 0;
	border: 1px solid #bb7070;
	background-color: #ffdbdb;
	padding: 0.25em 0.9em;
	box-sizing: border-box;
}

/* default colors for partial block message */
/* gotta get over the hump introduced by the triple class above */
.mw-contributions-blocked-notice-partial .mw-warning-with-logexcerpt.mw-warning-with-logexcerpt {
	border-color: #fc3;
	background-color: #fef6e7;
}

/* Minimum thumb width */
figure[typeof~='mw:File/Thumb'],
figure[typeof~='mw:File/Frame'],
.thumbinner {
	min-width: 100px;
}

/* Prevent floating boxes from overlapping any category listings,
   file histories, edit previews, and edit [Show changes] views. */
#mw-subcategories,
#mw-pages,
#mw-category-media,
#filehistory,
#wikiPreview,
#wikiDiff {
	clear: both;
}

/* Styling for tags in changes pages */
.mw-tag-markers {
	font-style: italic;
	font-size: 90%;
}

/* Hide stuff meant for accounts with special permissions. Made visible again in
   [[MediaWiki:Group-checkuser.css]], [[MediaWiki:Group-sysop.css]], [[MediaWiki:Group-abusefilter.css]],
   [[MediaWiki:Group-abusefilter-helper.css]], [[MediaWiki:Group-patroller.css]],
   [[MediaWiki:Group-templateeditor.css]], [[MediaWiki:Group-extendedmover.css]],
   [[MediaWiki:Group-extendedconfirmed.css]], and [[Mediawiki:Group-autoconfirmed.css]]. */
.checkuser-show,
.sysop-show,
.abusefilter-show,
.abusefilter-helper-show,
.patroller-show,
.templateeditor-show,
.extendedmover-show,
.extendedconfirmed-show,
.autoconfirmed-show,
.user-show {
	display: none;
}

/* Hide the redlink generated by {{Editnotice}},
   this overrides the ".sysop-show { display: none; }" above that applies
   to the same link as well. See [[phab:T45013]]

   Hide the images in editnotices to keep them readable in VE view.
   Long term, editnotices should become a core feature so that they can be designed responsive. */
.ve-ui-mwNoticesPopupTool-item .editnotice-redlink,
.ve-ui-mwNoticesPopupTool-item .mbox-image,
.ve-ui-mwNoticesPopupTool-item .mbox-imageright {
	display: none !important;
}

/* Remove bullets when there are multiple edit page warnings */
ul.permissions-errors {
	margin: 0;
}

ul.permissions-errors &gt; li {
	list-style: none;
}

/* larger inline math */
span.mwe-math-mathml-inline {
	font-size: 118%;
}

/* Make &lt;math display="block"&gt; be left aligned with one space indent for 
 * compatibility with style conventions
 */
.mwe-math-fallback-image-display,
.mwe-math-mathml-display {
	margin-left: 1.6em !important;
	margin-top: 0.6em;
	margin-bottom: 0.6em;
}

.mwe-math-mathml-display math {
	display: inline;
}

@media screen {
	/* Put a chequered background behind images, only visible if they have transparency,
	 * except on main, user, and portal namespaces
	 */
	body:not(.ns-0):not(.ns-2):not(.ns-100) .gallerybox .thumb img {
		background: #fff url(//upload.wikimedia.org/wikipedia/commons/5/5d/Checker-16x16.png) repeat;
	}

	/* Display "From Wikipedia, the free encyclopedia" in skins that support it,
	   do not apply to print mode */
	#siteSub {
		display: block;
	}
}

/* Hide FlaggedRevs notice UI when there are no pending changes */
.flaggedrevs_draft_synced,
.flaggedrevs_stable_synced,
/* "Temporary" to remove links in sidebar T255381 */
#t-upload,
/* Hide broken download box on Special:Book pending T285400 */
.mw-special-Book #coll-downloadbox {
	display: none;
}

/*
 * BELOW HERE THERE BE SOONTOBE TEMPLATESTYLES THINGS;
 * SEE [[MediaWiki talk:Common.css/to do]]
 */

/* Infobox template style */
.infobox {
	border: 1px solid #a2a9b1;
	border-spacing: 3px;
	background-color: #f8f9fa;
	color: black;
	/* @noflip */
	margin: 0.5em 0 0.5em 1em;
	padding: 0.2em;
	/* @noflip */
	float: right;
	/* @noflip */
	clear: right;
	font-size: 88%;
	line-height: 1.5em;
	width: 22em;
}

.infobox-header,
.infobox-label,
.infobox-above,
.infobox-full-data,
.infobox-data,
.infobox-below,
.infobox-subheader,
.infobox-image,
.infobox-navbar,
/* Remove element selector when every .infobox thing is using the standard module/templates  */
.infobox th,
.infobox td {
	vertical-align: top;
}

.infobox-label,
.infobox-data,
/* Remove element selector when every .infobox thing is using the standard module/templates  */
.infobox th,
.infobox td {
	/* @noflip */
	text-align: left;
}

/* Remove .infobox when element selectors above are removed */
.infobox .infobox-above,
.infobox .infobox-title,
/* Remove element selector when every .infobox thing is using the standard module/templates  */
.infobox caption {
	font-size: 125%;
	font-weight: bold;
	text-align: center;
}

.infobox-title,
/* Remove element selector when every .infobox thing is using the standard module/templates  */
.infobox caption {
	padding: 0.2em;
}

/* Remove .infobox when element selectors above are removed */
.infobox .infobox-header,
.infobox .infobox-subheader,
.infobox .infobox-image,
.infobox .infobox-full-data,
.infobox .infobox-below {
	text-align: center;
}

/* Remove .infobox when element selectors above are removed */
.infobox .infobox-navbar {
	/* @noflip */
	text-align: right;
}

/* Normal font styling for wikitable row headers with scope="row" tag */
.wikitable.plainrowheaders th[scope=row],
.wikitable.plainrowheaders th[scope=rowgroup] {
	font-weight: normal;
	/* @noflip */
	text-align: left;
}

/* Remove underlines from certain links */
.nounderlines a,
.IPA a:link,
.IPA a:visited {
	text-decoration: none !important;
}

/* Prevent line breaks in silly places where desired (nowrap)
   and links when we don't want them to (nowraplinks a) */
.nowrap,
.nowraplinks a {
	white-space: nowrap;
}

/* But allow wrapping where desired: */
.wrap,
.wraplinks a {
	white-space: normal;
}

/* texhtml class for inline math (based on generic times-serif class) */
span.texhtml {
	font-family: "Nimbus Roman No9 L", "Times New Roman", Times, serif;
	font-size: 118%;
	line-height: 1;
	white-space: nowrap;
	/* Force tabular and lining display for texhtml */
	font-variant-numeric: lining-nums tabular-nums;
	font-kerning: none;
}

span.texhtml span.texhtml {
	font-size: 100%;
}

@media screen {
	.nochecker .gallerybox .thumb img {
		background-image: none;
	}
}

/* Put anything you mean to be a sitewide addition above the TemplateStyles
 * comment above.
 */</text>
      <sha1>d1tcw18tlyefphyc7o8bpvyuv8xal5w</sha1>
    </revision>
  </page>
  <page>
    <title>MediaWiki:Common.js</title>
    <ns>8</ns>
    <id>34</id>
    <revision>
      <id>40</id>
      <timestamp>2023-08-21T14:52:49Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "/**  * Keep code in MediaWiki:Common.js to a minimum as it is unconditionally  * loaded for all users on every wiki page. If possible create a gadget that is  * enabled by default instead of adding it here (since gadgets are fully  * optimized ResourceLoader modules with possibility to add dependencies etc.)  *  * Since Common.js isn't a gadget, there is no place to declare its  * dependencies, so we have to lazy load them with mw.loader.using on demand and  * then execu..."</comment>
      <origin>40</origin>
      <model>javascript</model>
      <format>text/javascript</format>
      <text bytes="6505" sha1="p4a6hghlywtrxnhrf8loo708705vlvi" xml:space="preserve">/**
 * Keep code in MediaWiki:Common.js to a minimum as it is unconditionally
 * loaded for all users on every wiki page. If possible create a gadget that is
 * enabled by default instead of adding it here (since gadgets are fully
 * optimized ResourceLoader modules with possibility to add dependencies etc.)
 *
 * Since Common.js isn't a gadget, there is no place to declare its
 * dependencies, so we have to lazy load them with mw.loader.using on demand and
 * then execute the rest in the callback. In most cases these dependencies will
 * be loaded (or loading) already and the callback will not be delayed. In case a
 * dependency hasn't arrived yet it'll make sure those are loaded before this.
 */

/* global mw, $ */
/* jshint strict:false, browser:true */

mw.loader.using( [ 'mediawiki.util' ] ).done( function () {
	/* Begin of mw.loader.using callback */

	/**
	 * Map addPortletLink to mw.util
	 * @deprecated: Use mw.util.addPortletLink instead.
	 */
	mw.log.deprecate( window, 'addPortletLink', mw.util.addPortletLink, 'Use mw.util.addPortletLink instead' );

	/**
	 * Test if an element has a certain class
	 * @deprecated:  Use $(element).hasClass() instead.
	 */
	mw.log.deprecate( window, 'hasClass', function ( element, className ) {
		return $( element ).hasClass( className );
	}, 'Use jQuery.hasClass() instead' );

	/**
	 * @source www.mediawiki.org/wiki/Snippets/Load_JS_and_CSS_by_URL
	 * @rev 6
	 */
	var extraCSS = mw.util.getParamValue( 'withCSS' ),
		extraJS = mw.util.getParamValue( 'withJS' );

	if ( extraCSS ) {
		if ( extraCSS.match( /^MediaWiki:[^&amp;&lt;&gt;=%#]*\.css$/ ) ) {
			mw.loader.load( '/w/index.php?title=' + extraCSS + '&amp;action=raw&amp;ctype=text/css', 'text/css' );
		} else {
			mw.notify( 'Only pages from the MediaWiki namespace are allowed.', { title: 'Invalid withCSS value' } );
		}
	}

	if ( extraJS ) {
		if ( extraJS.match( /^MediaWiki:[^&amp;&lt;&gt;=%#]*\.js$/ ) ) {
			mw.loader.load( '/w/index.php?title=' + extraJS + '&amp;action=raw&amp;ctype=text/javascript' );
		} else {
			mw.notify( 'Only pages from the MediaWiki namespace are allowed.', { title: 'Invalid withJS value' } );
		}
	}

	/**
	 * WikiMiniAtlas
	 *
	 * Description: WikiMiniAtlas is a popup click and drag world map.
	 *              This script causes all of our coordinate links to display the WikiMiniAtlas popup button.
	 *              The script itself is located on the Meta-Wiki because it is used by many projects.
	 *              See [[Meta:WikiMiniAtlas]] for more information.
	 * Note - use of this service is recommended to be replaced with mw:Help:Extension:Kartographer
	 */
	$( function () {
		var requireWikiminiatlas = $( 'a.external.text[href*="geohack"]' ).length || $( 'div.kmldata' ).length;
		if ( requireWikiminiatlas ) {
			mw.loader.load( '//meta.wikimedia.org/w/index.php?title=MediaWiki:Wikiminiatlas.js&amp;action=raw&amp;ctype=text/javascript' );
		}
	} );

	/**
	 * Collapsible tables; reimplemented with mw-collapsible
	 * Styling is also in place to avoid FOUC
	 *
	 * Allows tables to be collapsed, showing only the header. See [[Help:Collapsing]].
	 * @version 3.0.0 (2018-05-20)
	 * @source https://www.mediawiki.org/wiki/MediaWiki:Gadget-collapsibleTables.js
	 * @author [[User:R. Koot]]
	 * @author [[User:Krinkle]]
	 * @author [[User:TheDJ]]
	 * @deprecated Since MediaWiki 1.20: Use class="mw-collapsible" instead which
	 * is supported in MediaWiki core. Shimmable since MediaWiki 1.32
	 *
	 * @param {jQuery} $content
	 */
	function makeCollapsibleMwCollapsible( $content ) {
		var $tables = $content
			.find( 'table.collapsible:not(.mw-collapsible)' )
			.addClass( 'mw-collapsible' );

		$.each( $tables, function ( index, table ) {
			// mw.log.warn( 'This page is using the deprecated class collapsible. Please replace it with mw-collapsible.');
			if ( $( table ).hasClass( 'collapsed' ) ) {
				$( table ).addClass( 'mw-collapsed' );
				// mw.log.warn( 'This page is using the deprecated class collapsed. Please replace it with mw-collapsed.');
			}
		} );
		if ( $tables.length &gt; 0 ) {
			mw.loader.using( 'jquery.makeCollapsible' ).then( function () {
				$tables.makeCollapsible();
			} );
		}
	}
	mw.hook( 'wikipage.content' ).add( makeCollapsibleMwCollapsible );

	/**
	 * Add support to mw-collapsible for autocollapse, innercollapse and outercollapse
	 *
	 * Maintainers: TheDJ
	 */
	function mwCollapsibleSetup( $collapsibleContent ) {
		var $element,
			$toggle,
			autoCollapseThreshold = 2;
		$.each( $collapsibleContent, function ( index, element ) {
			$element = $( element );
			if ( $element.hasClass( 'collapsible' ) ) {
				$element.find( 'tr:first &gt; th:first' ).prepend( $element.find( 'tr:first &gt; * &gt; .mw-collapsible-toggle' ) );
			}
			if ( $collapsibleContent.length &gt;= autoCollapseThreshold &amp;&amp; $element.hasClass( 'autocollapse' ) ) {
				$element.data( 'mw-collapsible' ).collapse();
			} else if ( $element.hasClass( 'innercollapse' ) ) {
				if ( $element.parents( '.outercollapse' ).length &gt; 0 ) {
					$element.data( 'mw-collapsible' ).collapse();
				}
			}
			// because of colored backgrounds, style the link in the text color
			// to ensure accessible contrast
			$toggle = $element.find( '.mw-collapsible-toggle' );
			if ( $toggle.length ) {
				// Make the toggle inherit text color (Updated for T333357 2023-04-29)
				if ( $toggle.parent()[ 0 ].style.color ) {
					$toggle.css( 'color', 'inherit' );
					$toggle.find( '.mw-collapsible-text' ).css( 'color', 'inherit' );
				}
			}
		} );
	}

	mw.hook( 'wikipage.collapsibleContent' ).add( mwCollapsibleSetup );

	/**
	 * Magic editintros ****************************************************
	 *
	 * Description: Adds editintros on disambiguation pages and BLP pages.
	 * Maintainers: [[User:RockMFR]]
	 *
	 * @param {string} name
	 */
	function addEditIntro( name ) {
		$( '.mw-editsection, #ca-edit, #ca-ve-edit' ).find( 'a' ).each( function ( i, el ) {
			el.href = $( this ).attr( 'href' ) + '&amp;editintro=' + name;
		} );
	}

	if ( mw.config.get( 'wgNamespaceNumber' ) === 0 ) {
		$( function () {
			if ( document.getElementById( 'disambigbox' ) ) {
				addEditIntro( 'Template:Disambig_editintro' );
			}
		} );

		$( function () {
			var cats = mw.config.get( 'wgCategories' );
			if ( !cats ) {
				return;
			}
			if ( $.inArray( 'Living people', cats ) !== -1 || $.inArray( 'Possibly living people', cats ) !== -1 ) {
				addEditIntro( 'Template:BLP_editintro' );
			}
		} );
	}
	/* End of mw.loader.using callback */
} );
/* DO NOT ADD CODE BELOW THIS LINE */</text>
      <sha1>p4a6hghlywtrxnhrf8loo708705vlvi</sha1>
    </revision>
  </page>
  <page>
    <title>Uppsala University</title>
    <ns>0</ns>
    <id>35</id>
    <revision>
      <id>42</id>
      <timestamp>2023-08-21T14:58:46Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Uppsala University will be here"</comment>
      <origin>42</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="48" sha1="aqxzju1avxewdveu2rq2rrbnpowy32j" xml:space="preserve">An article about Uppsala University will be here</text>
      <sha1>aqxzju1avxewdveu2rq2rrbnpowy32j</sha1>
    </revision>
  </page>
  <page>
    <title>Karolinska Institute</title>
    <ns>0</ns>
    <id>36</id>
    <revision>
      <id>43</id>
      <timestamp>2023-08-21T14:59:07Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Karolinska Institute will be here"</comment>
      <origin>43</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="50" sha1="2pf7z56f96bxwk6x5x2ib11ng3m1n69" xml:space="preserve">An article about Karolinska Institute will be here</text>
      <sha1>2pf7z56f96bxwk6x5x2ib11ng3m1n69</sha1>
    </revision>
  </page>
  <page>
    <title>Swedish University of Agricultural Sciences</title>
    <ns>0</ns>
    <id>37</id>
    <revision>
      <id>44</id>
      <timestamp>2023-08-21T14:59:25Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Swedish University of Agricultural Sciences will be here"</comment>
      <origin>44</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="73" sha1="g7v69iadnbm7x4h5wduah643a81pmyt" xml:space="preserve">An article about Swedish University of Agricultural Sciences will be here</text>
      <sha1>g7v69iadnbm7x4h5wduah643a81pmyt</sha1>
    </revision>
  </page>
  <page>
    <title>Discrete Event Simulation</title>
    <ns>0</ns>
    <id>38</id>
    <revision>
      <id>45</id>
      <timestamp>2023-08-21T15:00:00Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Discrete Event Simulation will be here"</comment>
      <origin>45</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="55" sha1="0bk9wxcqut8kzycgy6v8ifxomgi8dn0" xml:space="preserve">An article about Discrete Event Simulation will be here</text>
      <sha1>0bk9wxcqut8kzycgy6v8ifxomgi8dn0</sha1>
    </revision>
  </page>
  <page>
    <title>Agent-based model</title>
    <ns>0</ns>
    <id>39</id>
    <revision>
      <id>46</id>
      <timestamp>2023-08-21T15:00:20Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Agent-based model will be here"</comment>
      <origin>46</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="47" sha1="58uin5yw71606aoeujr9wglx0giu0fd" xml:space="preserve">An article about Agent-based model will be here</text>
      <sha1>58uin5yw71606aoeujr9wglx0giu0fd</sha1>
    </revision>
  </page>
  <page>
    <title>Continuous simulation</title>
    <ns>0</ns>
    <id>40</id>
    <revision>
      <id>47</id>
      <timestamp>2023-08-21T15:00:38Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Continuous simulation will be here"</comment>
      <origin>47</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="51" sha1="gwh4wyl47x6y2cq3u7yrsdjlowweu8k" xml:space="preserve">An article about Continuous simulation will be here</text>
      <sha1>gwh4wyl47x6y2cq3u7yrsdjlowweu8k</sha1>
    </revision>
  </page>
  <page>
    <title>Affero General Public License</title>
    <ns>0</ns>
    <id>41</id>
    <revision>
      <id>49</id>
      <timestamp>2023-08-21T15:01:27Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Affero General Public License will be here"</comment>
      <origin>49</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="59" sha1="l5jfkltz19r3dvbncwhtbnemg0zj6xr" xml:space="preserve">An article about Affero General Public License will be here</text>
      <sha1>l5jfkltz19r3dvbncwhtbnemg0zj6xr</sha1>
    </revision>
  </page>
  <page>
    <title>System dynamics</title>
    <ns>0</ns>
    <id>42</id>
    <revision>
      <id>50</id>
      <timestamp>2023-08-21T15:01:45Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about System dynamics will be here"</comment>
      <origin>50</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="45" sha1="c2ebpej2st3iph3sfany874mzzwlruq" xml:space="preserve">An article about System dynamics will be here</text>
      <sha1>c2ebpej2st3iph3sfany874mzzwlruq</sha1>
    </revision>
  </page>
  <page>
    <title>Windows</title>
    <ns>0</ns>
    <id>43</id>
    <revision>
      <id>51</id>
      <timestamp>2023-08-21T15:02:04Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Windows will be here"</comment>
      <origin>51</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="37" sha1="f4njufak92daf32g0f8xrn9ygzb14os" xml:space="preserve">An article about Windows will be here</text>
      <sha1>f4njufak92daf32g0f8xrn9ygzb14os</sha1>
    </revision>
  </page>
  <page>
    <title>MacOS</title>
    <ns>0</ns>
    <id>44</id>
    <revision>
      <id>52</id>
      <timestamp>2023-08-21T15:02:21Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about MacOS will be here"</comment>
      <origin>52</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="35" sha1="md8htyzlpy1m6vwmh4d543jw0k3he8b" xml:space="preserve">An article about MacOS will be here</text>
      <sha1>md8htyzlpy1m6vwmh4d543jw0k3he8b</sha1>
    </revision>
  </page>
  <page>
    <title>Linux</title>
    <ns>0</ns>
    <id>45</id>
    <revision>
      <id>53</id>
      <timestamp>2023-08-21T15:02:38Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Linux will be here"</comment>
      <origin>53</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="35" sha1="swvjz64z6bogxx3jbk5j8rv61n4wlgg" xml:space="preserve">An article about Linux will be here</text>
      <sha1>swvjz64z6bogxx3jbk5j8rv61n4wlgg</sha1>
    </revision>
  </page>
  <page>
    <title>Javascript</title>
    <ns>0</ns>
    <id>46</id>
    <revision>
      <id>54</id>
      <timestamp>2023-08-21T15:03:00Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Javascript will be here"</comment>
      <origin>54</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="40" sha1="gx8x5tkycaeb3342yumwrrlslere4ur" xml:space="preserve">An article about Javascript will be here</text>
      <sha1>gx8x5tkycaeb3342yumwrrlslere4ur</sha1>
    </revision>
  </page>
  <page>
    <title>Programmer</title>
    <ns>0</ns>
    <id>47</id>
    <revision>
      <id>55</id>
      <timestamp>2023-08-21T15:03:30Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about programmers will be here"</comment>
      <origin>55</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="41" sha1="1qt13g9ckt03v6zu9rb3gcpednwse34" xml:space="preserve">An article about programmers will be here</text>
      <sha1>1qt13g9ckt03v6zu9rb3gcpednwse34</sha1>
    </revision>
  </page>
  <page>
    <title>Repository (version control)</title>
    <ns>0</ns>
    <id>48</id>
    <revision>
      <id>56</id>
      <timestamp>2023-08-21T15:03:46Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Repository will be here"</comment>
      <origin>56</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="40" sha1="ltskw388wfswxvqtxe9pazr8jl52ey1" xml:space="preserve">An article about Repository will be here</text>
      <sha1>ltskw388wfswxvqtxe9pazr8jl52ey1</sha1>
    </revision>
  </page>
  <page>
    <title>Software engine</title>
    <ns>0</ns>
    <id>49</id>
    <revision>
      <id>57</id>
      <timestamp>2023-08-21T15:04:06Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about software engines will be here"</comment>
      <origin>57</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="46" sha1="o16hrg4ya9w9oqtlymmvcjat51x1jhe" xml:space="preserve">An article about software engines will be here</text>
      <sha1>o16hrg4ya9w9oqtlymmvcjat51x1jhe</sha1>
    </revision>
  </page>
  <page>
    <title>Operating system</title>
    <ns>0</ns>
    <id>50</id>
    <revision>
      <id>58</id>
      <timestamp>2023-08-21T15:04:26Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Operating system will be here"</comment>
      <origin>58</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="46" sha1="lm6i33r8befjlii7112sbu48cf6ae83" xml:space="preserve">An article about Operating system will be here</text>
      <sha1>lm6i33r8befjlii7112sbu48cf6ae83</sha1>
    </revision>
  </page>
  <page>
    <title>Software categories</title>
    <ns>0</ns>
    <id>51</id>
    <revision>
      <id>59</id>
      <timestamp>2023-08-21T15:04:42Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Software categories will be here"</comment>
      <origin>59</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="49" sha1="5kiqlxnc294zz15kj01rp85m8igkbcb" xml:space="preserve">An article about Software categories will be here</text>
      <sha1>5kiqlxnc294zz15kj01rp85m8igkbcb</sha1>
    </revision>
  </page>
  <page>
    <title>Software license</title>
    <ns>0</ns>
    <id>52</id>
    <revision>
      <id>60</id>
      <timestamp>2023-08-21T15:05:00Z</timestamp>
      <contributor>
        <ip>158.174.22.61</ip>
      </contributor>
      <comment>Created page with "An article about Software license will be here"</comment>
      <origin>60</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="46" sha1="c244mjxkgi01th5k8eqr86fc2bv0eak" xml:space="preserve">An article about Software license will be here</text>
      <sha1>c244mjxkgi01th5k8eqr86fc2bv0eak</sha1>
    </revision>
  </page>
  <page>
    <title>Template:MONTHNUMBER</title>
    <ns>10</ns>
    <id>53</id>
    <revision>
      <id>61</id>
      <timestamp>2023-08-21T16:25:05Z</timestamp>
      <contributor>
        <ip>90.141.10.142</ip>
      </contributor>
      <comment>Created page with "&lt;includeonly&gt;{{#if:{{{1|}}}  |{{#switch:{{lc:{{{1}}}}}   |january|jan=1   |february|feb=2   |march|mar=3   |apr|april=4   |may=5   |june|jun=6   |july|jul=7   |august|aug=8   |september|sep|sept=9   |october|oct=10   |november|nov=11   |december|dec=12   |{{#ifexpr:{{{1}}}&lt;0    |{{#ifexpr:(({{{1}}})round 0)!=({{{1}}})     |{{#expr:12-(((0.5-({{{1}}}))round 0)mod 12)}}     |{{#expr:12-(((11.5-({{{1}}}))round 0)mod 12)}}    }}   |{{#expr:(((10.5+{{{1}}})round 0)mod 12)+1}}..."</comment>
      <origin>61</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="655" sha1="mqnyq8bnd6mmrrl70a3uwqgeo8aevfc" xml:space="preserve">&lt;includeonly&gt;{{#if:{{{1|}}}
 |{{#switch:{{lc:{{{1}}}}}
  |january|jan=1
  |february|feb=2
  |march|mar=3
  |apr|april=4
  |may=5
  |june|jun=6
  |july|jul=7
  |august|aug=8
  |september|sep|sept=9
  |october|oct=10
  |november|nov=11
  |december|dec=12
  |{{#ifexpr:{{{1}}}&lt;0
   |{{#ifexpr:(({{{1}}})round 0)!=({{{1}}})
    |{{#expr:12-(((0.5-({{{1}}}))round 0)mod 12)}}
    |{{#expr:12-(((11.5-({{{1}}}))round 0)mod 12)}}
   }}
  |{{#expr:(((10.5+{{{1}}})round 0)mod 12)+1}}
  }}
 }}
 |Missing required parameter 1=''month''!
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>mqnyq8bnd6mmrrl70a3uwqgeo8aevfc</sha1>
    </revision>
  </page>
  <page>
    <title>StochSD Old</title>
    <ns>0</ns>
    <id>54</id>
    <revision>
      <id>62</id>
      <timestamp>2023-08-22T13:21:34Z</timestamp>
      <contributor>
        <ip>78.77.203.90</ip>
      </contributor>
      <comment>Created page with "{{Infobox software | name                 = StochSD | developer            = Leif, Erik and Magnus Gustafsson | latest release version = {{Start date and age|2022|01|02}} | released             = {{Start date and age|2017|06|16}} | programming language = [[Javascript]] | operating system    = [[Windows]], [[macOS]], [[Linux]] | genre                = [[System dynamics|Sytem dynamics software]] | website              = {{URL|https://stochsd.sourceforge.io/homepage/|https:..."</comment>
      <origin>62</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5326" sha1="sxen3mt2yfjfdfb5z7w9fk90jthni45" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}

StochSD[1](2]&lt;ref&gt;{{Cite web|url=https://archlinux.org/packages/?q=libasl|title=Arch Linux - Package Search|website=archlinux.org}}&lt;/ref&gt; (Stochastic System Dynamics) is a free, open-source [[Continuous_simulation|Continuous System Simulation]] (CSS) package intended for small and medium-sized models in education, self-studies and research. Technically, StochSD is based on the Insight Maker[4] Engine with its DE-solver, function library, error checker, macro facility, etc., while the design, graphical user’s interface, construction elements, result presentation, file handling, link checking, etc. are different. Also, tools for sensitivity analysis, optimisation and statistical analysis are included. In particular, StochSD includes features for stochastic modelling, post-analysis of multiple simulations, and presentation of the results in statistical form. 

The designed and developed of StochSD was done during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

StochSD was designed to fulfil the two purposes: 
To provide an open-source CSS language based on the System Dynamics[8] [9] [10] philosophy, where a system is described in terms of stocks (compartments) and flows, and where, pedagogic aspects, ease of use and understanding are prioritised.

To enable Full Potential[11] CSS modelling and simulation, which means that a micro ([[Discrete Event Simulation]] or [[Agent-based_model|Agent-Based Simulation]]) model and a macro (CSS) model of a well-defined system under study will produce fully consistent (i.e., contradiction-free) results. 


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed by professor Leif Gustafsson during his 40 years of experience in research and teaching modelling and simulation on all levels at Swedish universities.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that provides the rules so that the results from macro-modelling become consistent with those from micro-modelling[1] [14] [15] [16]. 
Here, in addition to modelling and simulating continuous flows between stocks represented by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But in contrast to including individual entities into a CSS model, StochSD preserves the lumped macro approach for discrete entities by transferring integer number of entities (e.g., arrivals, accidents, deaths) during a time-step. However, such transitions may happen irregularly over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD contains powerful random functions to model uncertainties of different kinds, as well as devices to collect statistics during a simulation and from multiple replications of the same stochastic model. In particular, this approach also enables the construction of queuing models[17] and combined models[18] in a straightforward way.
The Full Potential concept also includes rules about how a stage has to be expanded to a structure of stocks and flows in order to produce a proper sojourn time distribution (if not exponential), how attributes are to be handled, and where and how different types of uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should be implemented.[11]. These rules can be applied in any CSS language.

==A StochSD model example==
asdadsljkad

&lt;ref&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt;

&lt;ref name="Repenning:2001kx"&gt;{{cite journal |last=Repenning |first=Nelson P. |year=2001 |title= Understanding fire fighting in new product development |journal= The Journal of Product Innovation Management |volume= 18 |issue=5|pages= 285–300|doi= 10.1016/S0737-6782(01)00099-6|url= https://dspace.mit.edu/bitstream/1721.1/3961/2/Tilting_v40-web.pdf |hdl=1721.1/3961 |hdl-access= free }}&lt;/ref&gt;

[1] Gustafsson, L., Gustafsson, E. and Gustafsson, M. (2022) StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation, 10, 219-253.
https://doi.org/10.4236/ojmsi.2022.102012

== References ==
{{Reflist}}</text>
      <sha1>sxen3mt2yfjfdfb5z7w9fk90jthni45</sha1>
    </revision>
    <revision>
      <id>77</id>
      <parentid>62</parentid>
      <timestamp>2023-08-22T14:06:43Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>77</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5375" sha1="1x77lbe1ujdeldhqbbdziuhveaiqjxd" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}

&lt;ref name="StochSD"&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt;

StochSD[1](2]&lt;ref&gt;{{Cite web|url=https://archlinux.org/packages/?q=libasl|title=Arch Linux - Package Search|website=archlinux.org}}&lt;/ref&gt; (Stochastic System Dynamics) is a free, open-source [[Continuous_simulation|Continuous System Simulation]] (CSS) package intended for small and medium-sized models in education, self-studies and research. Technically, StochSD is based on the Insight Maker[4] Engine with its DE-solver, function library, error checker, macro facility, etc., while the design, graphical user’s interface, construction elements, result presentation, file handling, link checking, etc. are different. Also, tools for sensitivity analysis, optimisation and statistical analysis are included. In particular, StochSD includes features for stochastic modelling, post-analysis of multiple simulations, and presentation of the results in statistical form. 

The designed and developed of StochSD was done during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

StochSD was designed to fulfil the two purposes: 
To provide an open-source CSS language based on the System Dynamics[8] [9] [10] philosophy, where a system is described in terms of stocks (compartments) and flows, and where, pedagogic aspects, ease of use and understanding are prioritised.

To enable Full Potential[11] CSS modelling and simulation, which means that a micro ([[Discrete Event Simulation]] or [[Agent-based_model|Agent-Based Simulation]]) model and a macro (CSS) model of a well-defined system under study will produce fully consistent (i.e., contradiction-free) results. 


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed by professor Leif Gustafsson during his 40 years of experience in research and teaching modelling and simulation on all levels at Swedish universities.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that provides the rules so that the results from macro-modelling become consistent with those from micro-modelling[1] [14] [15] [16]. 
Here, in addition to modelling and simulating continuous flows between stocks represented by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But in contrast to including individual entities into a CSS model, StochSD preserves the lumped macro approach for discrete entities by transferring integer number of entities (e.g., arrivals, accidents, deaths) during a time-step. However, such transitions may happen irregularly over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD contains powerful random functions to model uncertainties of different kinds, as well as devices to collect statistics during a simulation and from multiple replications of the same stochastic model. In particular, this approach also enables the construction of queuing models[17] and combined models[18] in a straightforward way.
The Full Potential concept also includes rules about how a stage has to be expanded to a structure of stocks and flows in order to produce a proper sojourn time distribution (if not exponential), how attributes are to be handled, and where and how different types of uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should be implemented.[11]. These rules can be applied in any CSS language.

==A StochSD model example==
asdadsljkad



&lt;ref name="StochSD"&gt;igen&lt;/ref&gt;

&lt;ref name="Repenning:2001kx"&gt;{{cite journal |last=Repenning |first=Nelson P. |year=2001 |title= Understanding fire fighting in new product development |journal= The Journal of Product Innovation Management |volume= 18 |issue=5|pages= 285–300|doi= 10.1016/S0737-6782(01)00099-6|url= https://dspace.mit.edu/bitstream/1721.1/3961/2/Tilting_v40-web.pdf |hdl=1721.1/3961 |hdl-access= free }}&lt;/ref&gt;

[1] Gustafsson, L., Gustafsson, E. and Gustafsson, M. (2022) StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation, 10, 219-253.
https://doi.org/10.4236/ojmsi.2022.102012

== References ==
{{Reflist}}</text>
      <sha1>1x77lbe1ujdeldhqbbdziuhveaiqjxd</sha1>
    </revision>
    <revision>
      <id>78</id>
      <parentid>77</parentid>
      <timestamp>2023-08-22T14:07:24Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>78</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5366" sha1="d82hy8lt9bz9z8w6lnwnvro26kakdl3" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}

&lt;ref name="StochSD"&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt;

StochSD[1](2]&lt;ref&gt;{{Cite web|url=https://archlinux.org/packages/?q=libasl|title=Arch Linux - Package Search|website=archlinux.org}}&lt;/ref&gt; (Stochastic System Dynamics) is a free, open-source [[Continuous_simulation|Continuous System Simulation]] (CSS) package intended for small and medium-sized models in education, self-studies and research. Technically, StochSD is based on the Insight Maker[4] Engine with its DE-solver, function library, error checker, macro facility, etc., while the design, graphical user’s interface, construction elements, result presentation, file handling, link checking, etc. are different. Also, tools for sensitivity analysis, optimisation and statistical analysis are included. In particular, StochSD includes features for stochastic modelling, post-analysis of multiple simulations, and presentation of the results in statistical form. 

The designed and developed of StochSD was done during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

StochSD was designed to fulfil the two purposes: 
To provide an open-source CSS language based on the System Dynamics[8] [9] [10] philosophy, where a system is described in terms of stocks (compartments) and flows, and where, pedagogic aspects, ease of use and understanding are prioritised.

To enable Full Potential[11] CSS modelling and simulation, which means that a micro ([[Discrete Event Simulation]] or [[Agent-based_model|Agent-Based Simulation]]) model and a macro (CSS) model of a well-defined system under study will produce fully consistent (i.e., contradiction-free) results. 


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed by professor Leif Gustafsson during his 40 years of experience in research and teaching modelling and simulation on all levels at Swedish universities.

==Full Potential CSS modelling==
The Full Potential CSS concept is an extension of classical Continuous System Simulation that provides the rules so that the results from macro-modelling become consistent with those from micro-modelling[1] [14] [15] [16]. 
Here, in addition to modelling and simulating continuous flows between stocks represented by ‘real numbers’, it can also handle transitions of discrete entities by integer numbers. But in contrast to including individual entities into a CSS model, StochSD preserves the lumped macro approach for discrete entities by transferring integer number of entities (e.g., arrivals, accidents, deaths) during a time-step. However, such transitions may happen irregularly over time, so stochasticity often plays a crucial role in their modelling. Therefore, StochSD contains powerful random functions to model uncertainties of different kinds, as well as devices to collect statistics during a simulation and from multiple replications of the same stochastic model. In particular, this approach also enables the construction of queuing models[17] and combined models[18] in a straightforward way.
The Full Potential concept also includes rules about how a stage has to be expanded to a structure of stocks and flows in order to produce a proper sojourn time distribution (if not exponential), how attributes are to be handled, and where and how different types of uncertainty (structural, transition, initial value, parameter, and signal uncertainties) should be implemented.[11]. These rules can be applied in any CSS language.

==A StochSD model example==
asdadsljkad



&lt;ref name="StochSD"/&gt;

&lt;ref name="Repenning:2001kx"&gt;{{cite journal |last=Repenning |first=Nelson P. |year=2001 |title= Understanding fire fighting in new product development |journal= The Journal of Product Innovation Management |volume= 18 |issue=5|pages= 285–300|doi= 10.1016/S0737-6782(01)00099-6|url= https://dspace.mit.edu/bitstream/1721.1/3961/2/Tilting_v40-web.pdf |hdl=1721.1/3961 |hdl-access= free }}&lt;/ref&gt;

[1] Gustafsson, L., Gustafsson, E. and Gustafsson, M. (2022) StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation, 10, 219-253.
https://doi.org/10.4236/ojmsi.2022.102012

== References ==
{{Reflist}}</text>
      <sha1>d82hy8lt9bz9z8w6lnwnvro26kakdl3</sha1>
    </revision>
  </page>
  <page>
    <title>StochSD round1</title>
    <ns>0</ns>
    <id>55</id>
    <revision>
      <id>73</id>
      <timestamp>2023-08-22T14:00:45Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <comment>Created page with "{{Infobox software | name                 = StochSD | developer            = Leif, Erik and Magnus Gustafsson | latest release version = {{Start date and age|2022|01|02}} | released             = {{Start date and age|2017|06|16}} | programming language = [[Javascript]] | operating system    = [[Windows]], [[macOS]], [[Linux]] | genre                = [[System dynamics|Sytem dynamics software]] | website              = {{URL|https://stochsd.sourceforge.io/homepage/|https:..."</comment>
      <origin>73</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2113" sha1="3lh7be2lostq68wbsmbc32fbgchsuu3" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.</text>
      <sha1>3lh7be2lostq68wbsmbc32fbgchsuu3</sha1>
    </revision>
    <revision>
      <id>75</id>
      <parentid>73</parentid>
      <timestamp>2023-08-22T14:02:53Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>75</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2143" sha1="8ghu18hhijmdosr7qke7ofqw74hvg1b" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.

== References ==
{{Reflist}}</text>
      <sha1>8ghu18hhijmdosr7qke7ofqw74hvg1b</sha1>
    </revision>
    <revision>
      <id>76</id>
      <parentid>75</parentid>
      <timestamp>2023-08-22T14:03:16Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>76</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2379" sha1="sezdfl4pe1ylgz3ozr9l6y5adu7v730" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
statistical form.

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

&lt;ref&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt;

==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.

== References ==
{{Reflist}}</text>
      <sha1>sezdfl4pe1ylgz3ozr9l6y5adu7v730</sha1>
    </revision>
    <revision>
      <id>79</id>
      <parentid>76</parentid>
      <timestamp>2023-08-22T14:09:29Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>79</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2406" sha1="55fdvl6n1axs9nlvff4cjt1mbgqlem0" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD
StochSD [1](2] (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

&lt;ref&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt;

==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.

== References ==
{{Reflist}}</text>
      <sha1>55fdvl6n1axs9nlvff4cjt1mbgqlem0</sha1>
    </revision>
    <revision>
      <id>80</id>
      <parentid>79</parentid>
      <timestamp>2023-08-22T14:10:15Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>80</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2405" sha1="e7r34in7y6qo6lrapn6xv2pcu9fs6ca" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker [3]
Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.

== References ==
{{Reflist}}</text>
      <sha1>e7r34in7y6qo6lrapn6xv2pcu9fs6ca</sha1>
    </revision>
    <revision>
      <id>84</id>
      <parentid>80</parentid>
      <timestamp>2023-08-22T14:27:12Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>84</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2811" sha1="agsjeyaeicgxg31yjkusho88ptgq3yw" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker &lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=https://doi.org/10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt;-Engine with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.

== References ==
{{Reflist}}</text>
      <sha1>agsjeyaeicgxg31yjkusho88ptgq3yw</sha1>
    </revision>
    <revision>
      <id>85</id>
      <parentid>84</parentid>
      <timestamp>2023-08-22T14:27:35Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>85</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2810" sha1="i6uhsylnw621wrtmih5nne3sja7fqeq" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=https://doi.org/10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.

== References ==
{{Reflist}}</text>
      <sha1>i6uhsylnw621wrtmih5nne3sja7fqeq</sha1>
    </revision>
    <revision>
      <id>86</id>
      <parentid>85</parentid>
      <timestamp>2023-08-22T14:31:08Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>86</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2794" sha1="703k7rjt7gleot6vmarrg4do29t5wsc" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models, StochSD manuals, etc., which mainly are based on material developed at Uppsala University and the Swedish University of Agricultural Sciences for courses in modelling and simulation.

== References ==
{{Reflist}}</text>
      <sha1>703k7rjt7gleot6vmarrg4do29t5wsc</sha1>
    </revision>
    <revision>
      <id>87</id>
      <parentid>86</parentid>
      <timestamp>2023-08-22T14:32:33Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>87</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2631" sha1="j6fj3elkmnsuvostbwjrcbwik9kgv4i" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].


==Education and self-studies==
To support the use in education and self-studies, free material to enable courses in classical CSS and Full Potential CSS modelling and simulation are available at the StochSD Website. This material contains lectures, laboratory exercises, instructive models and StochSD manuals.

== References ==
{{Reflist}}</text>
      <sha1>j6fj3elkmnsuvostbwjrcbwik9kgv4i</sha1>
    </revision>
    <revision>
      <id>88</id>
      <parentid>87</parentid>
      <timestamp>2023-08-22T14:32:49Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>88</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2318" sha1="16hncg82eogtq5arrehw3mvtqxog7b0" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}</text>
      <sha1>16hncg82eogtq5arrehw3mvtqxog7b0</sha1>
    </revision>
    <revision>
      <id>89</id>
      <parentid>88</parentid>
      <timestamp>2023-08-22T14:42:56Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>89</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2475" sha1="9985im9012fuusif8w1flk6wegqkt6c" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>9985im9012fuusif8w1flk6wegqkt6c</sha1>
    </revision>
    <revision>
      <id>90</id>
      <parentid>89</parentid>
      <timestamp>2023-08-22T14:47:10Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>90</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2488" sha1="rnhh4lhgfd2vcw16hrdk2t07cu8ut80" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{Cite journal|url=https://doi.org/10.4236/ojmsi.2022.102012|title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis. Open Journal of Modelling and Simulation| journal=abc}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>rnhh4lhgfd2vcw16hrdk2t07cu8ut80</sha1>
    </revision>
    <revision>
      <id>91</id>
      <parentid>90</parentid>
      <timestamp>2023-08-22T14:47:35Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>91</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2687" sha1="4k3jhlqyf8nqj592orrtinle4w9og2l" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{cite journal |last1=Gustafsson |first1=Leif |last2=Gustafsson |first2=Erik  |last3=Gustafsson |first1=Magnus |year=2022 |title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis |url=https://www.scirp.org/journal/paperinformation.aspx?paperid=116904 |journal=Open Journal of Modelling and Simulation |volume=10 |doi=10.4236/ojmsi.2022.102012 |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>4k3jhlqyf8nqj592orrtinle4w9og2l</sha1>
    </revision>
    <revision>
      <id>92</id>
      <parentid>91</parentid>
      <timestamp>2023-08-22T14:48:09Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>92</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2705" sha1="3uan29kqah45uolf0mx96wp1afixxn0" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{cite journal |last1=Gustafsson |first1=Leif |last1=Gustafsson |last2=Gustafsson |first2=Erik  |last3=Gustafsson |first1=Magnus |year=2022 |title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis |url=https://www.scirp.org/journal/paperinformation.aspx?paperid=116904 |journal=Open Journal of Modelling and Simulation |volume=10 |doi=10.4236/ojmsi.2022.102012 |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>3uan29kqah45uolf0mx96wp1afixxn0</sha1>
    </revision>
    <revision>
      <id>93</id>
      <parentid>92</parentid>
      <timestamp>2023-08-22T14:48:50Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>93</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2687" sha1="rzywwxba9wnxz972nszx3zsth605fbd" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = {{Start date and age|2022|01|02}}
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{cite journal |last1=Gustafsson |first1=Leif |last2=Gustafsson |first2=Erik  |last3=Gustafsson |first3=Magnus |year=2022 |title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis |url=https://www.scirp.org/journal/paperinformation.aspx?paperid=116904 |journal=Open Journal of Modelling and Simulation |volume=10 |doi=10.4236/ojmsi.2022.102012 |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>rzywwxba9wnxz972nszx3zsth605fbd</sha1>
    </revision>
    <revision>
      <id>94</id>
      <parentid>93</parentid>
      <timestamp>2023-08-22T14:53:42Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>94</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2657" sha1="06hvtkgbslfotj53lwww5hfj997cu1t" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 1.2
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{cite journal |last1=Gustafsson |first1=Leif |last2=Gustafsson |first2=Erik  |last3=Gustafsson |first3=Magnus |year=2022 |title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis |url=https://www.scirp.org/journal/paperinformation.aspx?paperid=116904 |journal=Open Journal of Modelling and Simulation |volume=10 |doi=10.4236/ojmsi.2022.102012 |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>06hvtkgbslfotj53lwww5hfj997cu1t</sha1>
    </revision>
    <revision>
      <id>95</id>
      <parentid>94</parentid>
      <timestamp>2023-08-22T14:55:06Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>95</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2664" sha1="803bxga39jir5nl8guyps23dn3wcimw" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="StochSD&gt;{{cite journal |last1=Gustafsson |first1=Leif |last2=Gustafsson |first2=Erik  |last3=Gustafsson |first3=Magnus |year=2022 |title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis |url=https://www.scirp.org/journal/paperinformation.aspx?paperid=116904 |journal=Open Journal of Modelling and Simulation |volume=10 |doi=10.4236/ojmsi.2022.102012 |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>803bxga39jir5nl8guyps23dn3wcimw</sha1>
    </revision>
    <revision>
      <id>96</id>
      <parentid>95</parentid>
      <timestamp>2023-08-22T15:49:39Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>96</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3055" sha1="1bsnp9iuz268askmhlrisg9zq69d2jj" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.2022&gt;{{cite journal |last1=Gustafsson |first1=Leif |last2=Gustafsson |first2=Erik  |last3=Gustafsson |first3=Magnus |year=2022 |title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis |url=https://www.scirp.org/journal/paperinformation.aspx?paperid=116904 |journal=Open Journal of Modelling and Simulation |volume=10 |doi=10.4236/ojmsi.2022.102012 |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>1bsnp9iuz268askmhlrisg9zq69d2jj</sha1>
    </revision>
    <revision>
      <id>97</id>
      <parentid>96</parentid>
      <timestamp>2023-08-22T15:50:23Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>97</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3030" sha1="qk9c66y0cag2apppons31uku0olsq57" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.2022&gt;{{cite journal |last1=Gustafsson |first1=Leif |last2=Gustafsson |first2=Erik  |last3=Gustafsson |first3=Magnus |year=2022 |title=StochSD: A Full Potential CSS Language for Dynamic and Stochastic Modelling, Simulation and Statistical Analysis |url=https://doi.org/10.4236/ojmsi.2022.102012 |journal=Open Journal of Modelling and Simulation |volume=10 |doi=10.4236/ojmsi.2022.102012 |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>qk9c66y0cag2apppons31uku0olsq57</sha1>
    </revision>
    <revision>
      <id>98</id>
      <parentid>97</parentid>
      <timestamp>2023-08-22T15:50:53Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>98</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2589" sha1="ifee51ftmoei4j0ujphuf4rt982jxic" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>ifee51ftmoei4j0ujphuf4rt982jxic</sha1>
    </revision>
    <revision>
      <id>99</id>
      <parentid>98</parentid>
      <timestamp>2023-08-22T17:37:30Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>99</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2794" sha1="2z9x2xhxyvsh77ave6pusg87mf45bqd" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=https://cosy.pixel-online.org/ |access-date=22 August 2023}}&lt;/ref&gt;
 (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>2z9x2xhxyvsh77ave6pusg87mf45bqd</sha1>
    </revision>
    <revision>
      <id>100</id>
      <parentid>99</parentid>
      <timestamp>2023-08-22T17:37:44Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>100</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2793" sha1="stju0i198073c5c6rp9dcchvwxsyo1b" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=https://cosy.pixel-online.org/ |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>stju0i198073c5c6rp9dcchvwxsyo1b</sha1>
    </revision>
    <revision>
      <id>101</id>
      <parentid>100</parentid>
      <timestamp>2023-08-22T17:42:33Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>101</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2775" sha1="76i0f5a3t70smg7sr5lz89lvpjxwqeq" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=Cosy Project |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>76i0f5a3t70smg7sr5lz89lvpjxwqeq</sha1>
    </revision>
    <revision>
      <id>102</id>
      <parentid>101</parentid>
      <timestamp>2023-08-22T17:43:17Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>102</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2794" sha1="ntfobqouur01bysn3ffi9r1z26xg8is" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=Software review at Cosy Project |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]].

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>ntfobqouur01bysn3ffi9r1z26xg8is</sha1>
    </revision>
    <revision>
      <id>103</id>
      <parentid>102</parentid>
      <timestamp>2023-08-22T17:54:01Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>103</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3092" sha1="igduhgee74k3zfqwkr9hief2y3jor26" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=Software review at Cosy Project |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and the [[Swedish University of Agricultural Sciences]], where the software is used for courses in Systems Analysis
&lt;ref name="slu.curriculum"&gt;{{cite web |url=https://slunik.slu.se/kursfiler/TN0358/30188.2122/SA-SD-schedule22.pdf |title=Course curriculum, Systems Analysis for Sustainable Development |website=slu.se |access-date=22 August 2023}}&lt;/ref&gt;. 

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>igduhgee74k3zfqwkr9hief2y3jor26</sha1>
    </revision>
    <revision>
      <id>104</id>
      <parentid>103</parentid>
      <timestamp>2023-08-22T17:54:52Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>104</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3088" sha1="r1enklqf8af7nc8tfooul4bhnt46twe" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=Software review at Cosy Project |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and [[Swedish University of Agricultural Sciences]], where the software is used for courses in Systems Analysis
&lt;ref name="slu.curriculum"&gt;{{cite web |url=https://slunik.slu.se/kursfiler/TN0358/30188.2122/SA-SD-schedule22.pdf |title=Course curriculum, Systems Analysis for Sustainable Development |website=slu.se |access-date=22 August 2023}}&lt;/ref&gt;. 

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>r1enklqf8af7nc8tfooul4bhnt46twe</sha1>
    </revision>
    <revision>
      <id>105</id>
      <parentid>104</parentid>
      <timestamp>2023-08-22T18:02:37Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>105</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3195" sha1="05ebafw4kdpvcz5zh8e8o2yr3zziale" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=Software review at Cosy Project |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and [[Swedish University of Agricultural Sciences]], where the software is used for courses in Systems Analysis
&lt;ref name="slu.curriculum"&gt;{{cite web |url=https://slunik.slu.se/kursfiler/TN0358/30188.2122/SA-SD-schedule22.pdf |title=Course curriculum, Systems Analysis for Sustainable Development |website=slu.se |access-date=22 August 2023}}&lt;/ref&gt;. 

==See also==
* [[Comparison of system dynamics software]]
* [[System dynamics]]
* [[Computer Simulation]]

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>05ebafw4kdpvcz5zh8e8o2yr3zziale</sha1>
    </revision>
    <revision>
      <id>106</id>
      <parentid>105</parentid>
      <timestamp>2023-08-22T18:02:59Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>106</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3169" sha1="dk5xrem3q9trxcly07x4l40prurefp5" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=Software review at Cosy Project |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and [[Swedish University of Agricultural Sciences]], where the software is used for courses in Systems Analysis
&lt;ref name="slu.curriculum"&gt;{{cite web |url=https://slunik.slu.se/kursfiler/TN0358/30188.2122/SA-SD-schedule22.pdf |title=Course curriculum, Systems Analysis for Sustainable Development |website=slu.se |access-date=22 August 2023}}&lt;/ref&gt;. 

==See also==
* [[Comparison of system dynamics software]]
* [[System dynamics]]

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>dk5xrem3q9trxcly07x4l40prurefp5</sha1>
    </revision>
    <revision>
      <id>107</id>
      <parentid>106</parentid>
      <timestamp>2023-08-22T18:05:26Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>107</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3147" sha1="0ii4cmh26gkax0y2i1txkrvb5ymmqch" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=Software review at Cosy Project |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and [[Swedish University of Agricultural Sciences]], where the software is used for courses in Systems Analysis
&lt;ref name="slu.curriculum"&gt;{{cite web |url=https://slunik.slu.se/kursfiler/TN0358/30188.2122/SA-SD-schedule22.pdf |title=Course curriculum, Systems Analysis for Sustainable Development |website=slu.se |access-date=22 August 2023}}&lt;/ref&gt;. 

==See also==
* [[Comparison of system dynamics software]]

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>0ii4cmh26gkax0y2i1txkrvb5ymmqch</sha1>
    </revision>
    <revision>
      <id>108</id>
      <parentid>107</parentid>
      <timestamp>2023-08-22T18:05:44Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>108</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3169" sha1="dk5xrem3q9trxcly07x4l40prurefp5" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=Software review at Cosy Project |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and [[Swedish University of Agricultural Sciences]], where the software is used for courses in Systems Analysis
&lt;ref name="slu.curriculum"&gt;{{cite web |url=https://slunik.slu.se/kursfiler/TN0358/30188.2122/SA-SD-schedule22.pdf |title=Course curriculum, Systems Analysis for Sustainable Development |website=slu.se |access-date=22 August 2023}}&lt;/ref&gt;. 

==See also==
* [[Comparison of system dynamics software]]
* [[System dynamics]]

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>dk5xrem3q9trxcly07x4l40prurefp5</sha1>
    </revision>
    <revision>
      <id>109</id>
      <parentid>108</parentid>
      <timestamp>2023-08-22T18:07:19Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>109</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3087" sha1="mt08oskzjr81748n6217hwnods0r82h" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=Software review at Cosy Project |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]], [[Karolinska Institute]], and [[Swedish University of Agricultural Sciences]], where the software is used for courses in Systems Analysis
&lt;ref name="slu.curriculum"&gt;{{cite web |url=https://slunik.slu.se/kursfiler/TN0358/30188.2122/SA-SD-schedule22.pdf |title=Course curriculum, Systems Analysis for Sustainable Development |website=slu.se |access-date=22 August 2023}}&lt;/ref&gt;.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>mt08oskzjr81748n6217hwnods0r82h</sha1>
    </revision>
    <revision>
      <id>110</id>
      <parentid>109</parentid>
      <timestamp>2023-08-22T18:11:35Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>110</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3409" sha1="ksoakqvtye5twy2hdkwlb03entaasp0" xml:space="preserve">{{Infobox software
| name                 = StochSD
| developer            = Leif, Erik and Magnus Gustafsson
| latest release version = 2022.01.02
| released             = {{Start date and age|2017|06|16}}
| programming language = [[Javascript]]
| operating system    = [[Windows]], [[macOS]], [[Linux]]
| genre                = [[System dynamics|Sytem dynamics software]]
| website              = {{URL|https://stochsd.sourceforge.io/homepage/|https://stochsd.sourceforge.io}}
| repo = {{URL|https://github.com/stochsd/stochsd}}
| license = [[Affero General Public License]]
}}
StochSD &lt;ref name="stochsd.2017"&gt;
{{cite journal |last1=Gustafsson |first1=Leif |last2=Sternad |first2=Mikael  |last3=Gustafsson |first3=Erik |year=2017 |title=The Full Potential of Continuous System Simulation Modelling |url=https://doi.org/10.4236/ojmsi.2017.54019 |journal=Open Journal of Modelling and Simulation |volume=5 |doi=10.4236/ojmsi.2017.54019 |access-date=22 August 2023}}
&lt;/ref&gt;
&lt;ref name="StochSD.review"&gt;{{cite web |url=https://cosy.pixel-online.org/software_review_view.php?id=NjQ= |title=StochSD review |website=Software review at Cosy Project |access-date=22 August 2023}}&lt;/ref&gt; (Stochastic System Dynamics) is a free,
open-source [[Continuous_simulation|Continuous System Simulation]] (CSS)
package intended for small and medium-sized
models in education, self-studies and research.
Technically, StochSD is based on the Insight Maker-Engine&lt;ref name="InsightMaker&gt;{{cite journal |last1=Fortmann-Roe |first1=Scrott |year=2014 |title=Insight Maker: A general-purpose tool for web-based modeling &amp; simulation |url=https://www.sciencedirect.com/science/article/pii/S1569190X14000513?via%3Dihub |journal=Simulation Modelling Practice and Theory |volume=47 |pages=28-45 |doi=10.1016/j.simpat.2014.03.013 |access-date=22 August 2023}}&lt;/ref&gt; with its [[Numerical_methods_for_ordinary_differential_equations|DE-solver]], [[Library_(computing)|function library]], error
checker, macro facility, etc., while the design,
graphical user’s interface, construction elements,
result presentation, file handling, link checking, etc.
are different. Also, tools for sensitivity analysis, and
optimisation with or without constraints are
included. In particular, StochSD includes features for
stochastic modelling, post-analysis of multiple
simulations, and presentation of the results in
[[Descriptive statistics|statistical form]].

The design and development of StochSD were done
during 2017-2022 with support from [[Uppsala University]]&lt;ref name="uppsala_university.signals_and_systems"&gt;{{cite web |url=http://www.signal.uu.se/Research/simulation.html |title=Simulation at Uppsala University - Department of signals and systems |website=uu.se |access-date=22 August 2023}}&lt;/ref&gt;, [[Karolinska Institute]]&lt;ref name="uppsala_university.signals_and_systems"/&gt;, and [[Swedish University of Agricultural Sciences]]&lt;ref name="slu.curriculum"&gt;{{cite web |url=https://slunik.slu.se/kursfiler/TN0358/30188.2122/SA-SD-schedule22.pdf |title=Course curriculum, Systems Analysis for Sustainable Development |website=slu.se |access-date=22 August 2023}}&lt;/ref&gt;, where the software is used for courses in Systems Analysis
&lt;ref name="slu.curriculum"/&gt;.

== References ==
{{Reflist}}

{{DEFAULTSORT:StochSD}}
[[Category:Simulation programming languages]]
[[Category:Mathematical optimization software]]
[[Category:Free simulation software]]</text>
      <sha1>ksoakqvtye5twy2hdkwlb03entaasp0</sha1>
    </revision>
  </page>
  <page>
    <title>Numerical methods for ordinary differential equations</title>
    <ns>0</ns>
    <id>56</id>
    <revision>
      <id>81</id>
      <timestamp>2023-08-22T14:11:00Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <comment>Created page with "Numerical methods for ordinary differential equations, goes here"</comment>
      <origin>81</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="64" sha1="7tjih4tss529ht51emz9fgd7k65d0b9" xml:space="preserve">Numerical methods for ordinary differential equations, goes here</text>
      <sha1>7tjih4tss529ht51emz9fgd7k65d0b9</sha1>
    </revision>
  </page>
  <page>
    <title>Library (computing)</title>
    <ns>0</ns>
    <id>57</id>
    <revision>
      <id>82</id>
      <timestamp>2023-08-22T14:11:12Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <comment>Created page with "Library (computing), goes here"</comment>
      <origin>82</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="30" sha1="sbmthe35mpw3f8iojhb6hn5oag52ak3" xml:space="preserve">Library (computing), goes here</text>
      <sha1>sbmthe35mpw3f8iojhb6hn5oag52ak3</sha1>
    </revision>
  </page>
  <page>
    <title>Descriptive statistics</title>
    <ns>0</ns>
    <id>58</id>
    <revision>
      <id>83</id>
      <timestamp>2023-08-22T14:12:07Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <comment>Created page with "Descriptive statistics, goes here"</comment>
      <origin>83</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="33" sha1="0v4g2kcsonerdofkc1938io26trxivf" xml:space="preserve">Descriptive statistics, goes here</text>
      <sha1>0v4g2kcsonerdofkc1938io26trxivf</sha1>
    </revision>
  </page>
  <page>
    <title>File:Stochsd.png</title>
    <ns>6</ns>
    <id>59</id>
    <revision>
      <id>111</id>
      <timestamp>2023-08-22T20:44:33Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <comment>StochSD logo</comment>
      <origin>111</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="26" sha1="da5iceaaq943gcaj4q6gkrx042qn327" xml:space="preserve">== Summary ==
StochSD logo</text>
      <sha1>da5iceaaq943gcaj4q6gkrx042qn327</sha1>
    </revision>
  </page>
  <page>
    <title>Erik</title>
    <ns>0</ns>
    <id>63</id>
    <revision>
      <id>126</id>
      <timestamp>2023-08-23T20:54:58Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <comment>Created page with "Eriks experimentsida  Denna är till för att Erik ska kunna testa saker"</comment>
      <origin>126</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="72" sha1="k39c9j37jxa9ajsg3sm2op724cyptzv" xml:space="preserve">Eriks experimentsida

Denna är till för att Erik ska kunna testa saker</text>
      <sha1>k39c9j37jxa9ajsg3sm2op724cyptzv</sha1>
    </revision>
    <revision>
      <id>127</id>
      <parentid>126</parentid>
      <timestamp>2023-08-23T20:55:11Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>127</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="102" sha1="5aofodgyo99v3swjhj31djqtb46yggz" xml:space="preserve">Eriks experimentsida

Denna är till för att Erik ska kunna testa saker

Expriment
[[StochSD_round1]]</text>
      <sha1>5aofodgyo99v3swjhj31djqtb46yggz</sha1>
    </revision>
    <revision>
      <id>130</id>
      <parentid>127</parentid>
      <timestamp>2023-08-23T20:58:02Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>130</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="149" sha1="okdwx28ro1vkscg6orgvcxfwobez41g" xml:space="preserve">Eriks experimentsida

Denna är till för att Erik ska kunna testa saker

Expriment
[[StochSD_round1]]


[[Special:Upload]] - sida för uppladdningar</text>
      <sha1>okdwx28ro1vkscg6orgvcxfwobez41g</sha1>
    </revision>
    <revision>
      <id>131</id>
      <parentid>130</parentid>
      <timestamp>2023-08-23T20:58:46Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>131</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="187" sha1="d4rwbtedeymj5e2zkf7m4lelbjrm69q" xml:space="preserve">Eriks experimentsida

Denna är till för att Erik ska kunna testa saker

Expriment
[[StochSD_round1]]


[[Special:Upload]] - sida för uppladdningar
[[Special:ListFiles]] - list of files</text>
      <sha1>d4rwbtedeymj5e2zkf7m4lelbjrm69q</sha1>
    </revision>
    <revision>
      <id>132</id>
      <parentid>131</parentid>
      <timestamp>2023-08-23T20:58:54Z</timestamp>
      <contributor>
        <ip>84.216.123.182</ip>
      </contributor>
      <origin>132</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="188" sha1="dfqyncbguytzvr1z5uxwd1hk2ko8kc4" xml:space="preserve">Eriks experimentsida

Denna är till för att Erik ska kunna testa saker

Expriment
[[StochSD_round1]]


[[Special:Upload]] - sida för uppladdningar

[[Special:ListFiles]] - list of files</text>
      <sha1>dfqyncbguytzvr1z5uxwd1hk2ko8kc4</sha1>
    </revision>
    <revision>
      <id>147</id>
      <parentid>132</parentid>
      <timestamp>2023-08-23T22:12:49Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>147</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="402" sha1="9brckdrarno38kfqsaxsv7lpk4as20q" xml:space="preserve">Eriks experimentsida

Denna är till för att Erik ska kunna testa saker

Expriment
[[StochSD_round1]]

== File upload==
[[Special:Upload]] - sida för uppladdningar

[[Special:ListFiles]] - list of files
==Images==
Image example
https://www.mediawiki.org/wiki/Help:Images
https://www.mediawiki.org/wiki/Help:Images#Stopping_the_text_flow
https://www.mediawiki.org/wiki/Help:Images#Horizontal_alignment</text>
      <sha1>9brckdrarno38kfqsaxsv7lpk4as20q</sha1>
    </revision>
    <revision>
      <id>148</id>
      <parentid>147</parentid>
      <timestamp>2023-08-23T22:12:57Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>148</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="408" sha1="r8u37uwyt4ap5mcbfu5d5yagggx8am9" xml:space="preserve">Eriks experimentsida

Denna är till för att Erik ska kunna testa saker

Expriment
[[StochSD_round1]]

== File upload==
[[Special:Upload]] - sida för uppladdningar

[[Special:ListFiles]] - list of files
==Images==
Image example
* https://www.mediawiki.org/wiki/Help:Images
* https://www.mediawiki.org/wiki/Help:Images#Stopping_the_text_flow
* https://www.mediawiki.org/wiki/Help:Images#Horizontal_alignment</text>
      <sha1>r8u37uwyt4ap5mcbfu5d5yagggx8am9</sha1>
    </revision>
  </page>
  <page>
    <title>File:Combined-Pray-Predator-Model.png</title>
    <ns>6</ns>
    <id>65</id>
    <revision>
      <id>134</id>
      <timestamp>2023-08-23T21:02:11Z</timestamp>
      <contributor>
        <username>Exin</username>
        <id>1</id>
      </contributor>
      <origin>134</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
</mediawiki>
